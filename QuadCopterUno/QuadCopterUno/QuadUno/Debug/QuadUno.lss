
QuadUno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00003868  000038fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003868  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025c  008001a0  008001a0  0000399c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000399c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000039cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c8  00000000  00000000  00003a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c021  00000000  00000000  00003ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002550  00000000  00000000  0000fef5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002eb8  00000000  00000000  00012445  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f70  00000000  00000000  00015300  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002e33  00000000  00000000  00016270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004b17  00000000  00000000  000190a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  0001dbba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__ctors_end>
       4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       8:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
       c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_3>
      10:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      14:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      18:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      1c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      20:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      24:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      28:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      2c:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__vector_11>
      30:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      34:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      38:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      3c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      40:	0c 94 39 15 	jmp	0x2a72	; 0x2a72 <__vector_16>
      44:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      48:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__vector_18>
      4c:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__vector_19>
      50:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      54:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      58:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      5c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      60:	0c 94 a4 1a 	jmp	0x3548	; 0x3548 <__vector_24>
      64:	0c 94 a3 00 	jmp	0x146	; 0x146 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 00       	.word	0x003f	; ????

00000096 <__trampolines_end>:
      96:	00 00       	nop
      98:	00 08       	sbc	r0, r0
      9a:	00 02       	muls	r16, r16
      9c:	01 00       	.word	0x0001	; ????
      9e:	00 03       	mulsu	r16, r16
      a0:	04 07       	cpc	r16, r20
	...

000000aa <digital_pin_to_bit_mask_PGM>:
      aa:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      ba:	04 08 10 20                                         ... 

000000be <digital_pin_to_port_PGM>:
      be:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ce:	03 03 03 03                                         ....

000000d2 <port_to_input_PGM>:
      d2:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000dc <port_to_output_PGM>:
      dc:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000e6 <port_to_mode_PGM>:
      e6:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000f0 <__ctors_start>:
      f0:	be 05       	cpc	r27, r14
      f2:	f2 12       	cpse	r15, r18
      f4:	ab 19       	sub	r26, r11

000000f6 <__ctors_end>:
      f6:	11 24       	eor	r1, r1
      f8:	1f be       	out	0x3f, r1	; 63
      fa:	cf ef       	ldi	r28, 0xFF	; 255
      fc:	d8 e0       	ldi	r29, 0x08	; 8
      fe:	de bf       	out	0x3e, r29	; 62
     100:	cd bf       	out	0x3d, r28	; 61

00000102 <__do_copy_data>:
     102:	11 e0       	ldi	r17, 0x01	; 1
     104:	a0 e0       	ldi	r26, 0x00	; 0
     106:	b1 e0       	ldi	r27, 0x01	; 1
     108:	e8 e6       	ldi	r30, 0x68	; 104
     10a:	f8 e3       	ldi	r31, 0x38	; 56
     10c:	02 c0       	rjmp	.+4      	; 0x112 <__do_copy_data+0x10>
     10e:	05 90       	lpm	r0, Z+
     110:	0d 92       	st	X+, r0
     112:	a0 3a       	cpi	r26, 0xA0	; 160
     114:	b1 07       	cpc	r27, r17
     116:	d9 f7       	brne	.-10     	; 0x10e <__do_copy_data+0xc>

00000118 <__do_clear_bss>:
     118:	23 e0       	ldi	r18, 0x03	; 3
     11a:	a0 ea       	ldi	r26, 0xA0	; 160
     11c:	b1 e0       	ldi	r27, 0x01	; 1
     11e:	01 c0       	rjmp	.+2      	; 0x122 <.do_clear_bss_start>

00000120 <.do_clear_bss_loop>:
     120:	1d 92       	st	X+, r1

00000122 <.do_clear_bss_start>:
     122:	ac 3f       	cpi	r26, 0xFC	; 252
     124:	b2 07       	cpc	r27, r18
     126:	e1 f7       	brne	.-8      	; 0x120 <.do_clear_bss_loop>

00000128 <__do_global_ctors>:
     128:	10 e0       	ldi	r17, 0x00	; 0
     12a:	cb e7       	ldi	r28, 0x7B	; 123
     12c:	d0 e0       	ldi	r29, 0x00	; 0
     12e:	04 c0       	rjmp	.+8      	; 0x138 <__do_global_ctors+0x10>
     130:	21 97       	sbiw	r28, 0x01	; 1
     132:	fe 01       	movw	r30, r28
     134:	0e 94 2c 1c 	call	0x3858	; 0x3858 <__tablejump2__>
     138:	c8 37       	cpi	r28, 0x78	; 120
     13a:	d1 07       	cpc	r29, r17
     13c:	c9 f7       	brne	.-14     	; 0x130 <__do_global_ctors+0x8>
     13e:	0e 94 20 13 	call	0x2640	; 0x2640 <main>
     142:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <_exit>

00000146 <__bad_interrupt>:
     146:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014a <_ZN7TwoWire5writeEi>:
    delay(3);                                                  //Wait 3 milliseconds before the next loop.
  }
  //Now that we have 2000 measures, we need to devide by 2000 to get the average Acc offset.
  Acc_x_cal /= 2000;                                       //Divide the roll total by 2000.
  Acc_y_cal /= 2000;                                      //Divide the pitch total by 2000.
  Acc_z_cal /= 2000;                                        //Divide the yaw total by 2000.
     14a:	dc 01       	movw	r26, r24
     14c:	ed 91       	ld	r30, X+
     14e:	fc 91       	ld	r31, X
     150:	01 90       	ld	r0, Z+
     152:	f0 81       	ld	r31, Z
     154:	e0 2d       	mov	r30, r0
     156:	09 94       	ijmp

00000158 <__vector_3>:
     158:	1f 92       	push	r1
     15a:	0f 92       	push	r0
     15c:	0f b6       	in	r0, 0x3f	; 63
     15e:	0f 92       	push	r0
     160:	11 24       	eor	r1, r1
     162:	2f 93       	push	r18
     164:	3f 93       	push	r19
     166:	4f 93       	push	r20
     168:	5f 93       	push	r21
     16a:	6f 93       	push	r22
     16c:	7f 93       	push	r23
     16e:	8f 93       	push	r24
     170:	9f 93       	push	r25
     172:	af 93       	push	r26
     174:	bf 93       	push	r27
     176:	ef 93       	push	r30
     178:	ff 93       	push	r31
     17a:	0e 94 83 15 	call	0x2b06	; 0x2b06 <micros>
     17e:	60 93 cc 01 	sts	0x01CC, r22	; 0x8001cc <current_time>
     182:	70 93 cd 01 	sts	0x01CD, r23	; 0x8001cd <current_time+0x1>
     186:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <current_time+0x2>
     18a:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <current_time+0x3>
     18e:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <last_channel_1>
     192:	18 9b       	sbis	0x03, 0	; 3
     194:	0e c0       	rjmp	.+28     	; 0x1b2 <__vector_3+0x5a>
     196:	21 11       	cpse	r18, r1
     198:	1e c0       	rjmp	.+60     	; 0x1d6 <__vector_3+0x7e>
     19a:	21 e0       	ldi	r18, 0x01	; 1
     19c:	20 93 eb 01 	sts	0x01EB, r18	; 0x8001eb <last_channel_1>
     1a0:	60 93 dc 01 	sts	0x01DC, r22	; 0x8001dc <timer_1>
     1a4:	70 93 dd 01 	sts	0x01DD, r23	; 0x8001dd <timer_1+0x1>
     1a8:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <timer_1+0x2>
     1ac:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <timer_1+0x3>
     1b0:	12 c0       	rjmp	.+36     	; 0x1d6 <__vector_3+0x7e>
     1b2:	21 30       	cpi	r18, 0x01	; 1
     1b4:	81 f4       	brne	.+32     	; 0x1d6 <__vector_3+0x7e>
     1b6:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <last_channel_1>
     1ba:	40 91 dc 01 	lds	r20, 0x01DC	; 0x8001dc <timer_1>
     1be:	50 91 dd 01 	lds	r21, 0x01DD	; 0x8001dd <timer_1+0x1>
     1c2:	28 e0       	ldi	r18, 0x08	; 8
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	24 1b       	sub	r18, r20
     1c8:	35 0b       	sbc	r19, r21
     1ca:	26 0f       	add	r18, r22
     1cc:	37 1f       	adc	r19, r23
     1ce:	30 93 e7 01 	sts	0x01E7, r19	; 0x8001e7 <receiver_input_channel_1+0x1>
     1d2:	20 93 e6 01 	sts	0x01E6, r18	; 0x8001e6 <receiver_input_channel_1>
     1d6:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <last_channel_2>
     1da:	19 9b       	sbis	0x03, 1	; 3
     1dc:	0e c0       	rjmp	.+28     	; 0x1fa <__vector_3+0xa2>
     1de:	21 11       	cpse	r18, r1
     1e0:	1b c0       	rjmp	.+54     	; 0x218 <__vector_3+0xc0>
     1e2:	21 e0       	ldi	r18, 0x01	; 1
     1e4:	20 93 ea 01 	sts	0x01EA, r18	; 0x8001ea <last_channel_2>
     1e8:	60 93 d8 01 	sts	0x01D8, r22	; 0x8001d8 <timer_2>
     1ec:	70 93 d9 01 	sts	0x01D9, r23	; 0x8001d9 <timer_2+0x1>
     1f0:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <timer_2+0x2>
     1f4:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <timer_2+0x3>
     1f8:	0f c0       	rjmp	.+30     	; 0x218 <__vector_3+0xc0>
     1fa:	21 30       	cpi	r18, 0x01	; 1
     1fc:	69 f4       	brne	.+26     	; 0x218 <__vector_3+0xc0>
     1fe:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <last_channel_2>
     202:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <timer_2>
     206:	30 91 d9 01 	lds	r19, 0x01D9	; 0x8001d9 <timer_2+0x1>
     20a:	ab 01       	movw	r20, r22
     20c:	42 1b       	sub	r20, r18
     20e:	53 0b       	sbc	r21, r19
     210:	50 93 e5 01 	sts	0x01E5, r21	; 0x8001e5 <receiver_input_channel_2+0x1>
     214:	40 93 e4 01 	sts	0x01E4, r20	; 0x8001e4 <receiver_input_channel_2>
     218:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <last_channel_3>
     21c:	1a 9b       	sbis	0x03, 2	; 3
     21e:	0e c0       	rjmp	.+28     	; 0x23c <__vector_3+0xe4>
     220:	21 11       	cpse	r18, r1
     222:	1e c0       	rjmp	.+60     	; 0x260 <__vector_3+0x108>
     224:	21 e0       	ldi	r18, 0x01	; 1
     226:	20 93 e9 01 	sts	0x01E9, r18	; 0x8001e9 <last_channel_3>
     22a:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <timer_3>
     22e:	70 93 d5 01 	sts	0x01D5, r23	; 0x8001d5 <timer_3+0x1>
     232:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <timer_3+0x2>
     236:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <timer_3+0x3>
     23a:	12 c0       	rjmp	.+36     	; 0x260 <__vector_3+0x108>
     23c:	21 30       	cpi	r18, 0x01	; 1
     23e:	81 f4       	brne	.+32     	; 0x260 <__vector_3+0x108>
     240:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <last_channel_3>
     244:	40 91 d4 01 	lds	r20, 0x01D4	; 0x8001d4 <timer_3>
     248:	50 91 d5 01 	lds	r21, 0x01D5	; 0x8001d5 <timer_3+0x1>
     24c:	24 e6       	ldi	r18, 0x64	; 100
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	24 1b       	sub	r18, r20
     252:	35 0b       	sbc	r19, r21
     254:	26 0f       	add	r18, r22
     256:	37 1f       	adc	r19, r23
     258:	30 93 e3 01 	sts	0x01E3, r19	; 0x8001e3 <receiver_input_channel_3+0x1>
     25c:	20 93 e2 01 	sts	0x01E2, r18	; 0x8001e2 <receiver_input_channel_3>
     260:	20 91 e8 01 	lds	r18, 0x01E8	; 0x8001e8 <last_channel_4>
     264:	1b 9b       	sbis	0x03, 3	; 3
     266:	0e c0       	rjmp	.+28     	; 0x284 <__vector_3+0x12c>
     268:	21 11       	cpse	r18, r1
     26a:	1e c0       	rjmp	.+60     	; 0x2a8 <__vector_3+0x150>
     26c:	21 e0       	ldi	r18, 0x01	; 1
     26e:	20 93 e8 01 	sts	0x01E8, r18	; 0x8001e8 <last_channel_4>
     272:	60 93 d0 01 	sts	0x01D0, r22	; 0x8001d0 <timer_4>
     276:	70 93 d1 01 	sts	0x01D1, r23	; 0x8001d1 <timer_4+0x1>
     27a:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <timer_4+0x2>
     27e:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <timer_4+0x3>
     282:	12 c0       	rjmp	.+36     	; 0x2a8 <__vector_3+0x150>
     284:	21 30       	cpi	r18, 0x01	; 1
     286:	81 f4       	brne	.+32     	; 0x2a8 <__vector_3+0x150>
     288:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <last_channel_4>
     28c:	40 91 d0 01 	lds	r20, 0x01D0	; 0x8001d0 <timer_4>
     290:	50 91 d1 01 	lds	r21, 0x01D1	; 0x8001d1 <timer_4+0x1>
     294:	28 ee       	ldi	r18, 0xE8	; 232
     296:	3f ef       	ldi	r19, 0xFF	; 255
     298:	24 1b       	sub	r18, r20
     29a:	35 0b       	sbc	r19, r21
     29c:	62 0f       	add	r22, r18
     29e:	73 1f       	adc	r23, r19
     2a0:	70 93 e1 01 	sts	0x01E1, r23	; 0x8001e1 <receiver_input_channel_4+0x1>
     2a4:	60 93 e0 01 	sts	0x01E0, r22	; 0x8001e0 <receiver_input_channel_4>
     2a8:	ff 91       	pop	r31
     2aa:	ef 91       	pop	r30
     2ac:	bf 91       	pop	r27
     2ae:	af 91       	pop	r26
     2b0:	9f 91       	pop	r25
     2b2:	8f 91       	pop	r24
     2b4:	7f 91       	pop	r23
     2b6:	6f 91       	pop	r22
     2b8:	5f 91       	pop	r21
     2ba:	4f 91       	pop	r20
     2bc:	3f 91       	pop	r19
     2be:	2f 91       	pop	r18
     2c0:	0f 90       	pop	r0
     2c2:	0f be       	out	0x3f, r0	; 63
     2c4:	0f 90       	pop	r0
     2c6:	1f 90       	pop	r1
     2c8:	18 95       	reti

000002ca <_Z12MotorControlifff>:
     2ca:	4f 92       	push	r4
     2cc:	5f 92       	push	r5
     2ce:	6f 92       	push	r6
     2d0:	7f 92       	push	r7
     2d2:	8f 92       	push	r8
     2d4:	9f 92       	push	r9
     2d6:	af 92       	push	r10
     2d8:	bf 92       	push	r11
     2da:	cf 92       	push	r12
     2dc:	df 92       	push	r13
     2de:	ef 92       	push	r14
     2e0:	ff 92       	push	r15
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	28 97       	sbiw	r28, 0x08	; 8
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	4a 01       	movw	r8, r20
     2fc:	5b 01       	movw	r10, r22
     2fe:	09 83       	std	Y+1, r16	; 0x01
     300:	1a 83       	std	Y+2, r17	; 0x02
     302:	2b 83       	std	Y+3, r18	; 0x03
     304:	3c 83       	std	Y+4, r19	; 0x04
     306:	89 30       	cpi	r24, 0x09	; 9
     308:	27 e0       	ldi	r18, 0x07	; 7
     30a:	92 07       	cpc	r25, r18
     30c:	14 f0       	brlt	.+4      	; 0x312 <_Z12MotorControlifff+0x48>
     30e:	88 e0       	ldi	r24, 0x08	; 8
     310:	97 e0       	ldi	r25, 0x07	; 7
     312:	bc 01       	movw	r22, r24
     314:	99 0f       	add	r25, r25
     316:	88 0b       	sbc	r24, r24
     318:	99 0b       	sbc	r25, r25
     31a:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
     31e:	2b 01       	movw	r4, r22
     320:	3c 01       	movw	r6, r24
     322:	29 81       	ldd	r18, Y+1	; 0x01
     324:	3a 81       	ldd	r19, Y+2	; 0x02
     326:	4b 81       	ldd	r20, Y+3	; 0x03
     328:	5c 81       	ldd	r21, Y+4	; 0x04
     32a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
     32e:	6d 83       	std	Y+5, r22	; 0x05
     330:	7e 83       	std	Y+6, r23	; 0x06
     332:	8f 83       	std	Y+7, r24	; 0x07
     334:	98 87       	std	Y+8, r25	; 0x08
     336:	a5 01       	movw	r20, r10
     338:	94 01       	movw	r18, r8
     33a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
     33e:	a7 01       	movw	r20, r14
     340:	96 01       	movw	r18, r12
     342:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
     346:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__fixsfsi>
     34a:	70 93 5d 02 	sts	0x025D, r23	; 0x80025d <esc_1+0x1>
     34e:	60 93 5c 02 	sts	0x025C, r22	; 0x80025c <esc_1>
     352:	29 81       	ldd	r18, Y+1	; 0x01
     354:	3a 81       	ldd	r19, Y+2	; 0x02
     356:	4b 81       	ldd	r20, Y+3	; 0x03
     358:	5c 81       	ldd	r21, Y+4	; 0x04
     35a:	c3 01       	movw	r24, r6
     35c:	b2 01       	movw	r22, r4
     35e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
     362:	2b 01       	movw	r4, r22
     364:	3c 01       	movw	r6, r24
     366:	9b 01       	movw	r18, r22
     368:	ac 01       	movw	r20, r24
     36a:	c5 01       	movw	r24, r10
     36c:	b4 01       	movw	r22, r8
     36e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
     372:	a7 01       	movw	r20, r14
     374:	96 01       	movw	r18, r12
     376:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
     37a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__fixsfsi>
     37e:	70 93 5b 02 	sts	0x025B, r23	; 0x80025b <esc_2+0x1>
     382:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <esc_2>
     386:	a5 01       	movw	r20, r10
     388:	94 01       	movw	r18, r8
     38a:	c3 01       	movw	r24, r6
     38c:	b2 01       	movw	r22, r4
     38e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
     392:	a7 01       	movw	r20, r14
     394:	96 01       	movw	r18, r12
     396:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
     39a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__fixsfsi>
     39e:	70 93 59 02 	sts	0x0259, r23	; 0x800259 <esc_3+0x1>
     3a2:	60 93 58 02 	sts	0x0258, r22	; 0x800258 <esc_3>
     3a6:	a5 01       	movw	r20, r10
     3a8:	94 01       	movw	r18, r8
     3aa:	6d 81       	ldd	r22, Y+5	; 0x05
     3ac:	7e 81       	ldd	r23, Y+6	; 0x06
     3ae:	8f 81       	ldd	r24, Y+7	; 0x07
     3b0:	98 85       	ldd	r25, Y+8	; 0x08
     3b2:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
     3b6:	a7 01       	movw	r20, r14
     3b8:	96 01       	movw	r18, r12
     3ba:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
     3be:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__fixsfsi>
     3c2:	70 93 57 02 	sts	0x0257, r23	; 0x800257 <esc_4+0x1>
     3c6:	60 93 56 02 	sts	0x0256, r22	; 0x800256 <esc_4>
     3ca:	83 e5       	ldi	r24, 0x53	; 83
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	0e 94 4a 18 	call	0x3094	; 0x3094 <_ZN5Servo17writeMicrosecondsEi>
     3d2:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <esc_3>
     3d6:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <esc_3+0x1>
     3da:	8d e4       	ldi	r24, 0x4D	; 77
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	0e 94 4a 18 	call	0x3094	; 0x3094 <_ZN5Servo17writeMicrosecondsEi>
     3e2:	60 91 5c 02 	lds	r22, 0x025C	; 0x80025c <esc_1>
     3e6:	70 91 5d 02 	lds	r23, 0x025D	; 0x80025d <esc_1+0x1>
     3ea:	80 e5       	ldi	r24, 0x50	; 80
     3ec:	92 e0       	ldi	r25, 0x02	; 2
     3ee:	0e 94 4a 18 	call	0x3094	; 0x3094 <_ZN5Servo17writeMicrosecondsEi>
     3f2:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <esc_2>
     3f6:	70 91 5b 02 	lds	r23, 0x025B	; 0x80025b <esc_2+0x1>
     3fa:	8a e4       	ldi	r24, 0x4A	; 74
     3fc:	92 e0       	ldi	r25, 0x02	; 2
     3fe:	28 96       	adiw	r28, 0x08	; 8
     400:	0f b6       	in	r0, 0x3f	; 63
     402:	f8 94       	cli
     404:	de bf       	out	0x3e, r29	; 62
     406:	0f be       	out	0x3f, r0	; 63
     408:	cd bf       	out	0x3d, r28	; 61
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	ef 90       	pop	r14
     416:	df 90       	pop	r13
     418:	cf 90       	pop	r12
     41a:	bf 90       	pop	r11
     41c:	af 90       	pop	r10
     41e:	9f 90       	pop	r9
     420:	8f 90       	pop	r8
     422:	7f 90       	pop	r7
     424:	6f 90       	pop	r6
     426:	5f 90       	pop	r5
     428:	4f 90       	pop	r4
     42a:	0c 94 4a 18 	jmp	0x3094	; 0x3094 <_ZN5Servo17writeMicrosecondsEi>

0000042e <_Z13printPIDGainsv>:
     42e:	66 e2       	ldi	r22, 0x26	; 38
     430:	71 e0       	ldi	r23, 0x01	; 1
     432:	80 e7       	ldi	r24, 0x70	; 112
     434:	92 e0       	ldi	r25, 0x02	; 2
     436:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN5Print5printEPKc>
     43a:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <pid_p_gain_roll>
     43e:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <pid_p_gain_roll+0x1>
     442:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <pid_p_gain_roll+0x2>
     446:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <pid_p_gain_roll+0x3>
     44a:	26 e0       	ldi	r18, 0x06	; 6
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	80 e7       	ldi	r24, 0x70	; 112
     450:	92 e0       	ldi	r25, 0x02	; 2
     452:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <_ZN5Print5printEdi>
     456:	62 e2       	ldi	r22, 0x22	; 34
     458:	71 e0       	ldi	r23, 0x01	; 1
     45a:	80 e7       	ldi	r24, 0x70	; 112
     45c:	92 e0       	ldi	r25, 0x02	; 2
     45e:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN5Print5printEPKc>
     462:	6a e2       	ldi	r22, 0x2A	; 42
     464:	71 e0       	ldi	r23, 0x01	; 1
     466:	80 e7       	ldi	r24, 0x70	; 112
     468:	92 e0       	ldi	r25, 0x02	; 2
     46a:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN5Print5printEPKc>
     46e:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <pid_i_gain_roll>
     472:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <pid_i_gain_roll+0x1>
     476:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <pid_i_gain_roll+0x2>
     47a:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <pid_i_gain_roll+0x3>
     47e:	26 e0       	ldi	r18, 0x06	; 6
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	80 e7       	ldi	r24, 0x70	; 112
     484:	92 e0       	ldi	r25, 0x02	; 2
     486:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <_ZN5Print5printEdi>
     48a:	62 e2       	ldi	r22, 0x22	; 34
     48c:	71 e0       	ldi	r23, 0x01	; 1
     48e:	80 e7       	ldi	r24, 0x70	; 112
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN5Print5printEPKc>
     496:	6e e2       	ldi	r22, 0x2E	; 46
     498:	71 e0       	ldi	r23, 0x01	; 1
     49a:	80 e7       	ldi	r24, 0x70	; 112
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN5Print5printEPKc>
     4a2:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <pid_d_gain_roll>
     4a6:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <pid_d_gain_roll+0x1>
     4aa:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <pid_d_gain_roll+0x2>
     4ae:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <pid_d_gain_roll+0x3>
     4b2:	26 e0       	ldi	r18, 0x06	; 6
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	80 e7       	ldi	r24, 0x70	; 112
     4b8:	92 e0       	ldi	r25, 0x02	; 2
     4ba:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <_ZN5Print5printEdi>
     4be:	60 e2       	ldi	r22, 0x20	; 32
     4c0:	71 e0       	ldi	r23, 0x01	; 1
     4c2:	80 e7       	ldi	r24, 0x70	; 112
     4c4:	92 e0       	ldi	r25, 0x02	; 2
     4c6:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN5Print5printEPKc>
     4ca:	65 e2       	ldi	r22, 0x25	; 37
     4cc:	71 e0       	ldi	r23, 0x01	; 1
     4ce:	80 e7       	ldi	r24, 0x70	; 112
     4d0:	92 e0       	ldi	r25, 0x02	; 2
     4d2:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN5Print5printEPKc>
     4d6:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <pid_p_gain_roll>
     4da:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <pid_p_gain_roll+0x1>
     4de:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <pid_p_gain_roll+0x2>
     4e2:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <pid_p_gain_roll+0x3>
     4e6:	26 e0       	ldi	r18, 0x06	; 6
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	80 e7       	ldi	r24, 0x70	; 112
     4ec:	92 e0       	ldi	r25, 0x02	; 2
     4ee:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <_ZN5Print5printEdi>
     4f2:	62 e2       	ldi	r22, 0x22	; 34
     4f4:	71 e0       	ldi	r23, 0x01	; 1
     4f6:	80 e7       	ldi	r24, 0x70	; 112
     4f8:	92 e0       	ldi	r25, 0x02	; 2
     4fa:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN5Print5printEPKc>
     4fe:	69 e2       	ldi	r22, 0x29	; 41
     500:	71 e0       	ldi	r23, 0x01	; 1
     502:	80 e7       	ldi	r24, 0x70	; 112
     504:	92 e0       	ldi	r25, 0x02	; 2
     506:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN5Print5printEPKc>
     50a:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <pid_i_gain_roll>
     50e:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <pid_i_gain_roll+0x1>
     512:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <pid_i_gain_roll+0x2>
     516:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <pid_i_gain_roll+0x3>
     51a:	26 e0       	ldi	r18, 0x06	; 6
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	80 e7       	ldi	r24, 0x70	; 112
     520:	92 e0       	ldi	r25, 0x02	; 2
     522:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <_ZN5Print5printEdi>
     526:	62 e2       	ldi	r22, 0x22	; 34
     528:	71 e0       	ldi	r23, 0x01	; 1
     52a:	80 e7       	ldi	r24, 0x70	; 112
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN5Print5printEPKc>
     532:	6d e2       	ldi	r22, 0x2D	; 45
     534:	71 e0       	ldi	r23, 0x01	; 1
     536:	80 e7       	ldi	r24, 0x70	; 112
     538:	92 e0       	ldi	r25, 0x02	; 2
     53a:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN5Print5printEPKc>
     53e:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <pid_d_gain_roll>
     542:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <pid_d_gain_roll+0x1>
     546:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <pid_d_gain_roll+0x2>
     54a:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <pid_d_gain_roll+0x3>
     54e:	26 e0       	ldi	r18, 0x06	; 6
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	80 e7       	ldi	r24, 0x70	; 112
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <_ZN5Print7printlnEdi>

0000055a <_Z8ResetPIDv>:
     55a:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <pid_i_mem_roll>
     55e:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <pid_i_mem_roll+0x1>
     562:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <pid_i_mem_roll+0x2>
     566:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <pid_i_mem_roll+0x3>
     56a:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <pid_last_roll_d_error>
     56e:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <pid_last_roll_d_error+0x1>
     572:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <pid_last_roll_d_error+0x2>
     576:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <pid_last_roll_d_error+0x3>
     57a:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <pid_i_mem_pitch>
     57e:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <pid_i_mem_pitch+0x1>
     582:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <pid_i_mem_pitch+0x2>
     586:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <pid_i_mem_pitch+0x3>
     58a:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <pid_last_pitch_d_error>
     58e:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <pid_last_pitch_d_error+0x1>
     592:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <pid_last_pitch_d_error+0x2>
     596:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <pid_last_pitch_d_error+0x3>
     59a:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <pid_i_mem_yaw>
     59e:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <pid_i_mem_yaw+0x1>
     5a2:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <pid_i_mem_yaw+0x2>
     5a6:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <pid_i_mem_yaw+0x3>
     5aa:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <pid_last_yaw_d_error>
     5ae:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <pid_last_yaw_d_error+0x1>
     5b2:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <pid_last_yaw_d_error+0x2>
     5b6:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <pid_last_yaw_d_error+0x3>
     5ba:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <pid_roll_setpoint>
     5be:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <pid_roll_setpoint+0x1>
     5c2:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <pid_roll_setpoint+0x2>
     5c6:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <pid_roll_setpoint+0x3>
     5ca:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <pid_pitch_setpoint>
     5ce:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <pid_pitch_setpoint+0x1>
     5d2:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <pid_pitch_setpoint+0x2>
     5d6:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <pid_pitch_setpoint+0x3>
     5da:	08 95       	ret

000005dc <_Z13calculate_pidv>:
     5dc:	4f 92       	push	r4
     5de:	5f 92       	push	r5
     5e0:	6f 92       	push	r6
     5e2:	7f 92       	push	r7
     5e4:	8f 92       	push	r8
     5e6:	9f 92       	push	r9
     5e8:	af 92       	push	r10
     5ea:	bf 92       	push	r11
     5ec:	cf 92       	push	r12
     5ee:	df 92       	push	r13
     5f0:	ef 92       	push	r14
     5f2:	ff 92       	push	r15
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	00 d0       	rcall	.+0      	; 0x5fa <_Z13calculate_pidv+0x1e>
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <_Z13calculate_pidv+0x20>
     5fc:	00 d0       	rcall	.+0      	; 0x5fe <_Z13calculate_pidv+0x22>
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <pid_roll_setpoint>
     606:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <pid_roll_setpoint+0x1>
     60a:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <pid_roll_setpoint+0x2>
     60e:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <pid_roll_setpoint+0x3>
     612:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <gyro_roll_input>
     616:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <gyro_roll_input+0x1>
     61a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <gyro_roll_input+0x2>
     61e:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <gyro_roll_input+0x3>
     622:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
     626:	6b 01       	movw	r12, r22
     628:	7c 01       	movw	r14, r24
     62a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <pid_i_gain_roll>
     62e:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <pid_i_gain_roll+0x1>
     632:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <pid_i_gain_roll+0x2>
     636:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <pid_i_gain_roll+0x3>
     63a:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
     63e:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <pid_i_mem_roll>
     642:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <pid_i_mem_roll+0x1>
     646:	40 91 28 02 	lds	r20, 0x0228	; 0x800228 <pid_i_mem_roll+0x2>
     64a:	50 91 29 02 	lds	r21, 0x0229	; 0x800229 <pid_i_mem_roll+0x3>
     64e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
     652:	2b 01       	movw	r4, r22
     654:	3c 01       	movw	r6, r24
     656:	60 93 26 02 	sts	0x0226, r22	; 0x800226 <pid_i_mem_roll>
     65a:	70 93 27 02 	sts	0x0227, r23	; 0x800227 <pid_i_mem_roll+0x1>
     65e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <pid_i_mem_roll+0x2>
     662:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <pid_i_mem_roll+0x3>
     666:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <pid_max_roll>
     66a:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <pid_max_roll+0x1>
     66e:	3e 83       	std	Y+6, r19	; 0x06
     670:	2d 83       	std	Y+5, r18	; 0x05
     672:	b9 01       	movw	r22, r18
     674:	33 0f       	add	r19, r19
     676:	88 0b       	sbc	r24, r24
     678:	99 0b       	sbc	r25, r25
     67a:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
     67e:	4b 01       	movw	r8, r22
     680:	5c 01       	movw	r10, r24
     682:	9b 01       	movw	r18, r22
     684:	ac 01       	movw	r20, r24
     686:	c3 01       	movw	r24, r6
     688:	b2 01       	movw	r22, r4
     68a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__gesf2>
     68e:	18 16       	cp	r1, r24
     690:	4c f4       	brge	.+18     	; 0x6a4 <_Z13calculate_pidv+0xc8>
     692:	80 92 26 02 	sts	0x0226, r8	; 0x800226 <pid_i_mem_roll>
     696:	90 92 27 02 	sts	0x0227, r9	; 0x800227 <pid_i_mem_roll+0x1>
     69a:	a0 92 28 02 	sts	0x0228, r10	; 0x800228 <pid_i_mem_roll+0x2>
     69e:	b0 92 29 02 	sts	0x0229, r11	; 0x800229 <pid_i_mem_roll+0x3>
     6a2:	23 c0       	rjmp	.+70     	; 0x6ea <_Z13calculate_pidv+0x10e>
     6a4:	6d 81       	ldd	r22, Y+5	; 0x05
     6a6:	7e 81       	ldd	r23, Y+6	; 0x06
     6a8:	71 95       	neg	r23
     6aa:	61 95       	neg	r22
     6ac:	71 09       	sbc	r23, r1
     6ae:	07 2e       	mov	r0, r23
     6b0:	00 0c       	add	r0, r0
     6b2:	88 0b       	sbc	r24, r24
     6b4:	99 0b       	sbc	r25, r25
     6b6:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
     6ba:	69 83       	std	Y+1, r22	; 0x01
     6bc:	7a 83       	std	Y+2, r23	; 0x02
     6be:	8b 83       	std	Y+3, r24	; 0x03
     6c0:	9c 83       	std	Y+4, r25	; 0x04
     6c2:	9b 01       	movw	r18, r22
     6c4:	ac 01       	movw	r20, r24
     6c6:	c3 01       	movw	r24, r6
     6c8:	b2 01       	movw	r22, r4
     6ca:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
     6ce:	87 ff       	sbrs	r24, 7
     6d0:	0c c0       	rjmp	.+24     	; 0x6ea <_Z13calculate_pidv+0x10e>
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
     6d4:	9a 81       	ldd	r25, Y+2	; 0x02
     6d6:	ab 81       	ldd	r26, Y+3	; 0x03
     6d8:	bc 81       	ldd	r27, Y+4	; 0x04
     6da:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <pid_i_mem_roll>
     6de:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <pid_i_mem_roll+0x1>
     6e2:	a0 93 28 02 	sts	0x0228, r26	; 0x800228 <pid_i_mem_roll+0x2>
     6e6:	b0 93 29 02 	sts	0x0229, r27	; 0x800229 <pid_i_mem_roll+0x3>
     6ea:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <pid_p_gain_roll>
     6ee:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <pid_p_gain_roll+0x1>
     6f2:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <pid_p_gain_roll+0x2>
     6f6:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <pid_p_gain_roll+0x3>
     6fa:	c7 01       	movw	r24, r14
     6fc:	b6 01       	movw	r22, r12
     6fe:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
     702:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <pid_i_mem_roll>
     706:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <pid_i_mem_roll+0x1>
     70a:	40 91 28 02 	lds	r20, 0x0228	; 0x800228 <pid_i_mem_roll+0x2>
     70e:	50 91 29 02 	lds	r21, 0x0229	; 0x800229 <pid_i_mem_roll+0x3>
     712:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
     716:	2b 01       	movw	r4, r22
     718:	3c 01       	movw	r6, r24
     71a:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <pid_last_roll_d_error>
     71e:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <pid_last_roll_d_error+0x1>
     722:	40 91 18 02 	lds	r20, 0x0218	; 0x800218 <pid_last_roll_d_error+0x2>
     726:	50 91 19 02 	lds	r21, 0x0219	; 0x800219 <pid_last_roll_d_error+0x3>
     72a:	c7 01       	movw	r24, r14
     72c:	b6 01       	movw	r22, r12
     72e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
     732:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <pid_d_gain_roll>
     736:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <pid_d_gain_roll+0x1>
     73a:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <pid_d_gain_roll+0x2>
     73e:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <pid_d_gain_roll+0x3>
     742:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
     746:	9b 01       	movw	r18, r22
     748:	ac 01       	movw	r20, r24
     74a:	c3 01       	movw	r24, r6
     74c:	b2 01       	movw	r22, r4
     74e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
     752:	2b 01       	movw	r4, r22
     754:	3c 01       	movw	r6, r24
     756:	9b 01       	movw	r18, r22
     758:	ac 01       	movw	r20, r24
     75a:	c5 01       	movw	r24, r10
     75c:	b4 01       	movw	r22, r8
     75e:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
     762:	87 fd       	sbrc	r24, 7
     764:	1e c0       	rjmp	.+60     	; 0x7a2 <_Z13calculate_pidv+0x1c6>
     766:	6d 81       	ldd	r22, Y+5	; 0x05
     768:	7e 81       	ldd	r23, Y+6	; 0x06
     76a:	71 95       	neg	r23
     76c:	61 95       	neg	r22
     76e:	71 09       	sbc	r23, r1
     770:	07 2e       	mov	r0, r23
     772:	00 0c       	add	r0, r0
     774:	88 0b       	sbc	r24, r24
     776:	99 0b       	sbc	r25, r25
     778:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
     77c:	4b 01       	movw	r8, r22
     77e:	5c 01       	movw	r10, r24
     780:	9b 01       	movw	r18, r22
     782:	ac 01       	movw	r20, r24
     784:	c3 01       	movw	r24, r6
     786:	b2 01       	movw	r22, r4
     788:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
     78c:	87 fd       	sbrc	r24, 7
     78e:	09 c0       	rjmp	.+18     	; 0x7a2 <_Z13calculate_pidv+0x1c6>
     790:	40 92 1a 02 	sts	0x021A, r4	; 0x80021a <pid_output_roll>
     794:	50 92 1b 02 	sts	0x021B, r5	; 0x80021b <pid_output_roll+0x1>
     798:	60 92 1c 02 	sts	0x021C, r6	; 0x80021c <pid_output_roll+0x2>
     79c:	70 92 1d 02 	sts	0x021D, r7	; 0x80021d <pid_output_roll+0x3>
     7a0:	08 c0       	rjmp	.+16     	; 0x7b2 <_Z13calculate_pidv+0x1d6>
     7a2:	80 92 1a 02 	sts	0x021A, r8	; 0x80021a <pid_output_roll>
     7a6:	90 92 1b 02 	sts	0x021B, r9	; 0x80021b <pid_output_roll+0x1>
     7aa:	a0 92 1c 02 	sts	0x021C, r10	; 0x80021c <pid_output_roll+0x2>
     7ae:	b0 92 1d 02 	sts	0x021D, r11	; 0x80021d <pid_output_roll+0x3>
     7b2:	c0 92 16 02 	sts	0x0216, r12	; 0x800216 <pid_last_roll_d_error>
     7b6:	d0 92 17 02 	sts	0x0217, r13	; 0x800217 <pid_last_roll_d_error+0x1>
     7ba:	e0 92 18 02 	sts	0x0218, r14	; 0x800218 <pid_last_roll_d_error+0x2>
     7be:	f0 92 19 02 	sts	0x0219, r15	; 0x800219 <pid_last_roll_d_error+0x3>
     7c2:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <pid_pitch_setpoint>
     7c6:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <pid_pitch_setpoint+0x1>
     7ca:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <pid_pitch_setpoint+0x2>
     7ce:	50 91 11 02 	lds	r21, 0x0211	; 0x800211 <pid_pitch_setpoint+0x3>
     7d2:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <gyro_pitch_input>
     7d6:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <gyro_pitch_input+0x1>
     7da:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <gyro_pitch_input+0x2>
     7de:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <gyro_pitch_input+0x3>
     7e2:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
     7e6:	6b 01       	movw	r12, r22
     7e8:	7c 01       	movw	r14, r24
     7ea:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <pid_i_gain_pitch>
     7ee:	30 91 69 02 	lds	r19, 0x0269	; 0x800269 <pid_i_gain_pitch+0x1>
     7f2:	40 91 6a 02 	lds	r20, 0x026A	; 0x80026a <pid_i_gain_pitch+0x2>
     7f6:	50 91 6b 02 	lds	r21, 0x026B	; 0x80026b <pid_i_gain_pitch+0x3>
     7fa:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
     7fe:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <pid_i_mem_pitch>
     802:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <pid_i_mem_pitch+0x1>
     806:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <pid_i_mem_pitch+0x2>
     80a:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <pid_i_mem_pitch+0x3>
     80e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
     812:	2b 01       	movw	r4, r22
     814:	3c 01       	movw	r6, r24
     816:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <pid_i_mem_pitch>
     81a:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <pid_i_mem_pitch+0x1>
     81e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <pid_i_mem_pitch+0x2>
     822:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <pid_i_mem_pitch+0x3>
     826:	a0 91 62 02 	lds	r26, 0x0262	; 0x800262 <pid_max_pitch>
     82a:	b0 91 63 02 	lds	r27, 0x0263	; 0x800263 <pid_max_pitch+0x1>
     82e:	be 83       	std	Y+6, r27	; 0x06
     830:	ad 83       	std	Y+5, r26	; 0x05
     832:	bd 01       	movw	r22, r26
     834:	bb 0f       	add	r27, r27
     836:	88 0b       	sbc	r24, r24
     838:	99 0b       	sbc	r25, r25
     83a:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
     83e:	4b 01       	movw	r8, r22
     840:	5c 01       	movw	r10, r24
     842:	9b 01       	movw	r18, r22
     844:	ac 01       	movw	r20, r24
     846:	c3 01       	movw	r24, r6
     848:	b2 01       	movw	r22, r4
     84a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__gesf2>
     84e:	18 16       	cp	r1, r24
     850:	4c f4       	brge	.+18     	; 0x864 <_Z13calculate_pidv+0x288>
     852:	80 92 12 02 	sts	0x0212, r8	; 0x800212 <pid_i_mem_pitch>
     856:	90 92 13 02 	sts	0x0213, r9	; 0x800213 <pid_i_mem_pitch+0x1>
     85a:	a0 92 14 02 	sts	0x0214, r10	; 0x800214 <pid_i_mem_pitch+0x2>
     85e:	b0 92 15 02 	sts	0x0215, r11	; 0x800215 <pid_i_mem_pitch+0x3>
     862:	23 c0       	rjmp	.+70     	; 0x8aa <_Z13calculate_pidv+0x2ce>
     864:	6d 81       	ldd	r22, Y+5	; 0x05
     866:	7e 81       	ldd	r23, Y+6	; 0x06
     868:	71 95       	neg	r23
     86a:	61 95       	neg	r22
     86c:	71 09       	sbc	r23, r1
     86e:	07 2e       	mov	r0, r23
     870:	00 0c       	add	r0, r0
     872:	88 0b       	sbc	r24, r24
     874:	99 0b       	sbc	r25, r25
     876:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
     87a:	69 83       	std	Y+1, r22	; 0x01
     87c:	7a 83       	std	Y+2, r23	; 0x02
     87e:	8b 83       	std	Y+3, r24	; 0x03
     880:	9c 83       	std	Y+4, r25	; 0x04
     882:	9b 01       	movw	r18, r22
     884:	ac 01       	movw	r20, r24
     886:	c3 01       	movw	r24, r6
     888:	b2 01       	movw	r22, r4
     88a:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
     88e:	87 ff       	sbrs	r24, 7
     890:	0c c0       	rjmp	.+24     	; 0x8aa <_Z13calculate_pidv+0x2ce>
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	9a 81       	ldd	r25, Y+2	; 0x02
     896:	ab 81       	ldd	r26, Y+3	; 0x03
     898:	bc 81       	ldd	r27, Y+4	; 0x04
     89a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <pid_i_mem_pitch>
     89e:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <pid_i_mem_pitch+0x1>
     8a2:	a0 93 14 02 	sts	0x0214, r26	; 0x800214 <pid_i_mem_pitch+0x2>
     8a6:	b0 93 15 02 	sts	0x0215, r27	; 0x800215 <pid_i_mem_pitch+0x3>
     8aa:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <pid_p_gain_pitch>
     8ae:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <pid_p_gain_pitch+0x1>
     8b2:	40 91 6e 02 	lds	r20, 0x026E	; 0x80026e <pid_p_gain_pitch+0x2>
     8b6:	50 91 6f 02 	lds	r21, 0x026F	; 0x80026f <pid_p_gain_pitch+0x3>
     8ba:	c7 01       	movw	r24, r14
     8bc:	b6 01       	movw	r22, r12
     8be:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
     8c2:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <pid_i_mem_pitch>
     8c6:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <pid_i_mem_pitch+0x1>
     8ca:	40 91 14 02 	lds	r20, 0x0214	; 0x800214 <pid_i_mem_pitch+0x2>
     8ce:	50 91 15 02 	lds	r21, 0x0215	; 0x800215 <pid_i_mem_pitch+0x3>
     8d2:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
     8d6:	2b 01       	movw	r4, r22
     8d8:	3c 01       	movw	r6, r24
     8da:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <pid_last_pitch_d_error>
     8de:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <pid_last_pitch_d_error+0x1>
     8e2:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <pid_last_pitch_d_error+0x2>
     8e6:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <pid_last_pitch_d_error+0x3>
     8ea:	c7 01       	movw	r24, r14
     8ec:	b6 01       	movw	r22, r12
     8ee:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
     8f2:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <pid_d_gain_pitch>
     8f6:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <pid_d_gain_pitch+0x1>
     8fa:	40 91 66 02 	lds	r20, 0x0266	; 0x800266 <pid_d_gain_pitch+0x2>
     8fe:	50 91 67 02 	lds	r21, 0x0267	; 0x800267 <pid_d_gain_pitch+0x3>
     902:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
     906:	9b 01       	movw	r18, r22
     908:	ac 01       	movw	r20, r24
     90a:	c3 01       	movw	r24, r6
     90c:	b2 01       	movw	r22, r4
     90e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
     912:	2b 01       	movw	r4, r22
     914:	3c 01       	movw	r6, r24
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	c5 01       	movw	r24, r10
     91c:	b4 01       	movw	r22, r8
     91e:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
     922:	87 fd       	sbrc	r24, 7
     924:	1e c0       	rjmp	.+60     	; 0x962 <__stack+0x63>
     926:	6d 81       	ldd	r22, Y+5	; 0x05
     928:	7e 81       	ldd	r23, Y+6	; 0x06
     92a:	71 95       	neg	r23
     92c:	61 95       	neg	r22
     92e:	71 09       	sbc	r23, r1
     930:	07 2e       	mov	r0, r23
     932:	00 0c       	add	r0, r0
     934:	88 0b       	sbc	r24, r24
     936:	99 0b       	sbc	r25, r25
     938:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
     93c:	4b 01       	movw	r8, r22
     93e:	5c 01       	movw	r10, r24
     940:	9b 01       	movw	r18, r22
     942:	ac 01       	movw	r20, r24
     944:	c3 01       	movw	r24, r6
     946:	b2 01       	movw	r22, r4
     948:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
     94c:	87 fd       	sbrc	r24, 7
     94e:	09 c0       	rjmp	.+18     	; 0x962 <__stack+0x63>
     950:	40 92 06 02 	sts	0x0206, r4	; 0x800206 <pid_output_pitch>
     954:	50 92 07 02 	sts	0x0207, r5	; 0x800207 <pid_output_pitch+0x1>
     958:	60 92 08 02 	sts	0x0208, r6	; 0x800208 <pid_output_pitch+0x2>
     95c:	70 92 09 02 	sts	0x0209, r7	; 0x800209 <pid_output_pitch+0x3>
     960:	08 c0       	rjmp	.+16     	; 0x972 <__stack+0x73>
     962:	80 92 06 02 	sts	0x0206, r8	; 0x800206 <pid_output_pitch>
     966:	90 92 07 02 	sts	0x0207, r9	; 0x800207 <pid_output_pitch+0x1>
     96a:	a0 92 08 02 	sts	0x0208, r10	; 0x800208 <pid_output_pitch+0x2>
     96e:	b0 92 09 02 	sts	0x0209, r11	; 0x800209 <pid_output_pitch+0x3>
     972:	c0 92 02 02 	sts	0x0202, r12	; 0x800202 <pid_last_pitch_d_error>
     976:	d0 92 03 02 	sts	0x0203, r13	; 0x800203 <pid_last_pitch_d_error+0x1>
     97a:	e0 92 04 02 	sts	0x0204, r14	; 0x800204 <pid_last_pitch_d_error+0x2>
     97e:	f0 92 05 02 	sts	0x0205, r15	; 0x800205 <pid_last_pitch_d_error+0x3>
     982:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <pid_yaw_setpoint>
     986:	30 91 fb 01 	lds	r19, 0x01FB	; 0x8001fb <pid_yaw_setpoint+0x1>
     98a:	40 91 fc 01 	lds	r20, 0x01FC	; 0x8001fc <pid_yaw_setpoint+0x2>
     98e:	50 91 fd 01 	lds	r21, 0x01FD	; 0x8001fd <pid_yaw_setpoint+0x3>
     992:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <gyro_yaw_input>
     996:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <gyro_yaw_input+0x1>
     99a:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <gyro_yaw_input+0x2>
     99e:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <gyro_yaw_input+0x3>
     9a2:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
     9a6:	6b 01       	movw	r12, r22
     9a8:	7c 01       	movw	r14, r24
     9aa:	60 93 2a 02 	sts	0x022A, r22	; 0x80022a <pid_error_temp>
     9ae:	70 93 2b 02 	sts	0x022B, r23	; 0x80022b <pid_error_temp+0x1>
     9b2:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <pid_error_temp+0x2>
     9b6:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <pid_error_temp+0x3>
     9ba:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <pid_i_gain_yaw>
     9be:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <pid_i_gain_yaw+0x1>
     9c2:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <pid_i_gain_yaw+0x2>
     9c6:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <pid_i_gain_yaw+0x3>
     9ca:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
     9ce:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <pid_i_mem_yaw>
     9d2:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <pid_i_mem_yaw+0x1>
     9d6:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <pid_i_mem_yaw+0x2>
     9da:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <pid_i_mem_yaw+0x3>
     9de:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
     9e2:	2b 01       	movw	r4, r22
     9e4:	3c 01       	movw	r6, r24
     9e6:	60 93 fe 01 	sts	0x01FE, r22	; 0x8001fe <pid_i_mem_yaw>
     9ea:	70 93 ff 01 	sts	0x01FF, r23	; 0x8001ff <pid_i_mem_yaw+0x1>
     9ee:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <pid_i_mem_yaw+0x2>
     9f2:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <pid_i_mem_yaw+0x3>
     9f6:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <pid_max_yaw>
     9fa:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <pid_max_yaw+0x1>
     9fe:	be 83       	std	Y+6, r27	; 0x06
     a00:	ad 83       	std	Y+5, r26	; 0x05
     a02:	bd 01       	movw	r22, r26
     a04:	bb 0f       	add	r27, r27
     a06:	88 0b       	sbc	r24, r24
     a08:	99 0b       	sbc	r25, r25
     a0a:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
     a0e:	4b 01       	movw	r8, r22
     a10:	5c 01       	movw	r10, r24
     a12:	9b 01       	movw	r18, r22
     a14:	ac 01       	movw	r20, r24
     a16:	c3 01       	movw	r24, r6
     a18:	b2 01       	movw	r22, r4
     a1a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__gesf2>
     a1e:	18 16       	cp	r1, r24
     a20:	4c f4       	brge	.+18     	; 0xa34 <__stack+0x135>
     a22:	80 92 fe 01 	sts	0x01FE, r8	; 0x8001fe <pid_i_mem_yaw>
     a26:	90 92 ff 01 	sts	0x01FF, r9	; 0x8001ff <pid_i_mem_yaw+0x1>
     a2a:	a0 92 00 02 	sts	0x0200, r10	; 0x800200 <pid_i_mem_yaw+0x2>
     a2e:	b0 92 01 02 	sts	0x0201, r11	; 0x800201 <pid_i_mem_yaw+0x3>
     a32:	23 c0       	rjmp	.+70     	; 0xa7a <__stack+0x17b>
     a34:	6d 81       	ldd	r22, Y+5	; 0x05
     a36:	7e 81       	ldd	r23, Y+6	; 0x06
     a38:	71 95       	neg	r23
     a3a:	61 95       	neg	r22
     a3c:	71 09       	sbc	r23, r1
     a3e:	07 2e       	mov	r0, r23
     a40:	00 0c       	add	r0, r0
     a42:	88 0b       	sbc	r24, r24
     a44:	99 0b       	sbc	r25, r25
     a46:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
     a4a:	69 83       	std	Y+1, r22	; 0x01
     a4c:	7a 83       	std	Y+2, r23	; 0x02
     a4e:	8b 83       	std	Y+3, r24	; 0x03
     a50:	9c 83       	std	Y+4, r25	; 0x04
     a52:	9b 01       	movw	r18, r22
     a54:	ac 01       	movw	r20, r24
     a56:	c3 01       	movw	r24, r6
     a58:	b2 01       	movw	r22, r4
     a5a:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
     a5e:	87 ff       	sbrs	r24, 7
     a60:	0c c0       	rjmp	.+24     	; 0xa7a <__stack+0x17b>
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	9a 81       	ldd	r25, Y+2	; 0x02
     a66:	ab 81       	ldd	r26, Y+3	; 0x03
     a68:	bc 81       	ldd	r27, Y+4	; 0x04
     a6a:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <pid_i_mem_yaw>
     a6e:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <pid_i_mem_yaw+0x1>
     a72:	a0 93 00 02 	sts	0x0200, r26	; 0x800200 <pid_i_mem_yaw+0x2>
     a76:	b0 93 01 02 	sts	0x0201, r27	; 0x800201 <pid_i_mem_yaw+0x3>
     a7a:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <pid_p_gain_yaw>
     a7e:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <pid_p_gain_yaw+0x1>
     a82:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <pid_p_gain_yaw+0x2>
     a86:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <pid_p_gain_yaw+0x3>
     a8a:	c7 01       	movw	r24, r14
     a8c:	b6 01       	movw	r22, r12
     a8e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
     a92:	20 91 fe 01 	lds	r18, 0x01FE	; 0x8001fe <pid_i_mem_yaw>
     a96:	30 91 ff 01 	lds	r19, 0x01FF	; 0x8001ff <pid_i_mem_yaw+0x1>
     a9a:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <pid_i_mem_yaw+0x2>
     a9e:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <pid_i_mem_yaw+0x3>
     aa2:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
     aa6:	2b 01       	movw	r4, r22
     aa8:	3c 01       	movw	r6, r24
     aaa:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <pid_last_yaw_d_error>
     aae:	30 91 ef 01 	lds	r19, 0x01EF	; 0x8001ef <pid_last_yaw_d_error+0x1>
     ab2:	40 91 f0 01 	lds	r20, 0x01F0	; 0x8001f0 <pid_last_yaw_d_error+0x2>
     ab6:	50 91 f1 01 	lds	r21, 0x01F1	; 0x8001f1 <pid_last_yaw_d_error+0x3>
     aba:	c7 01       	movw	r24, r14
     abc:	b6 01       	movw	r22, r12
     abe:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
     ac2:	20 91 5e 02 	lds	r18, 0x025E	; 0x80025e <pid_d_gain_yaw>
     ac6:	30 91 5f 02 	lds	r19, 0x025F	; 0x80025f <pid_d_gain_yaw+0x1>
     aca:	40 91 60 02 	lds	r20, 0x0260	; 0x800260 <pid_d_gain_yaw+0x2>
     ace:	50 91 61 02 	lds	r21, 0x0261	; 0x800261 <pid_d_gain_yaw+0x3>
     ad2:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
     ad6:	9b 01       	movw	r18, r22
     ad8:	ac 01       	movw	r20, r24
     ada:	c3 01       	movw	r24, r6
     adc:	b2 01       	movw	r22, r4
     ade:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
     ae2:	2b 01       	movw	r4, r22
     ae4:	3c 01       	movw	r6, r24
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	c5 01       	movw	r24, r10
     aec:	b4 01       	movw	r22, r8
     aee:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
     af2:	87 fd       	sbrc	r24, 7
     af4:	1e c0       	rjmp	.+60     	; 0xb32 <__stack+0x233>
     af6:	6d 81       	ldd	r22, Y+5	; 0x05
     af8:	7e 81       	ldd	r23, Y+6	; 0x06
     afa:	71 95       	neg	r23
     afc:	61 95       	neg	r22
     afe:	71 09       	sbc	r23, r1
     b00:	07 2e       	mov	r0, r23
     b02:	00 0c       	add	r0, r0
     b04:	88 0b       	sbc	r24, r24
     b06:	99 0b       	sbc	r25, r25
     b08:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
     b0c:	4b 01       	movw	r8, r22
     b0e:	5c 01       	movw	r10, r24
     b10:	9b 01       	movw	r18, r22
     b12:	ac 01       	movw	r20, r24
     b14:	c3 01       	movw	r24, r6
     b16:	b2 01       	movw	r22, r4
     b18:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
     b1c:	87 fd       	sbrc	r24, 7
     b1e:	09 c0       	rjmp	.+18     	; 0xb32 <__stack+0x233>
     b20:	40 92 f2 01 	sts	0x01F2, r4	; 0x8001f2 <pid_output_yaw>
     b24:	50 92 f3 01 	sts	0x01F3, r5	; 0x8001f3 <pid_output_yaw+0x1>
     b28:	60 92 f4 01 	sts	0x01F4, r6	; 0x8001f4 <pid_output_yaw+0x2>
     b2c:	70 92 f5 01 	sts	0x01F5, r7	; 0x8001f5 <pid_output_yaw+0x3>
     b30:	08 c0       	rjmp	.+16     	; 0xb42 <__stack+0x243>
     b32:	80 92 f2 01 	sts	0x01F2, r8	; 0x8001f2 <pid_output_yaw>
     b36:	90 92 f3 01 	sts	0x01F3, r9	; 0x8001f3 <pid_output_yaw+0x1>
     b3a:	a0 92 f4 01 	sts	0x01F4, r10	; 0x8001f4 <pid_output_yaw+0x2>
     b3e:	b0 92 f5 01 	sts	0x01F5, r11	; 0x8001f5 <pid_output_yaw+0x3>
     b42:	c0 92 ee 01 	sts	0x01EE, r12	; 0x8001ee <pid_last_yaw_d_error>
     b46:	d0 92 ef 01 	sts	0x01EF, r13	; 0x8001ef <pid_last_yaw_d_error+0x1>
     b4a:	e0 92 f0 01 	sts	0x01F0, r14	; 0x8001f0 <pid_last_yaw_d_error+0x2>
     b4e:	f0 92 f1 01 	sts	0x01F1, r15	; 0x8001f1 <pid_last_yaw_d_error+0x3>
     b52:	26 96       	adiw	r28, 0x06	; 6
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	ff 90       	pop	r15
     b64:	ef 90       	pop	r14
     b66:	df 90       	pop	r13
     b68:	cf 90       	pop	r12
     b6a:	bf 90       	pop	r11
     b6c:	af 90       	pop	r10
     b6e:	9f 90       	pop	r9
     b70:	8f 90       	pop	r8
     b72:	7f 90       	pop	r7
     b74:	6f 90       	pop	r6
     b76:	5f 90       	pop	r5
     b78:	4f 90       	pop	r4
     b7a:	08 95       	ret

00000b7c <_GLOBAL__sub_I_rotationThreshold>:
     b7c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pid_p_gain_roll>
     b80:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <pid_p_gain_roll+0x1>
     b84:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <pid_p_gain_roll+0x2>
     b88:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <pid_p_gain_roll+0x3>
     b8c:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <pid_p_gain_pitch>
     b90:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <pid_p_gain_pitch+0x1>
     b94:	a0 93 6e 02 	sts	0x026E, r26	; 0x80026e <pid_p_gain_pitch+0x2>
     b98:	b0 93 6f 02 	sts	0x026F, r27	; 0x80026f <pid_p_gain_pitch+0x3>
     b9c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pid_i_gain_roll>
     ba0:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <pid_i_gain_roll+0x1>
     ba4:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <pid_i_gain_roll+0x2>
     ba8:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <pid_i_gain_roll+0x3>
     bac:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pid_i_gain_pitch>
     bb0:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <pid_i_gain_pitch+0x1>
     bb4:	a0 93 6a 02 	sts	0x026A, r26	; 0x80026a <pid_i_gain_pitch+0x2>
     bb8:	b0 93 6b 02 	sts	0x026B, r27	; 0x80026b <pid_i_gain_pitch+0x3>
     bbc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pid_d_gain_roll>
     bc0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <pid_d_gain_roll+0x1>
     bc4:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <pid_d_gain_roll+0x2>
     bc8:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <pid_d_gain_roll+0x3>
     bcc:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <pid_d_gain_pitch>
     bd0:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <pid_d_gain_pitch+0x1>
     bd4:	a0 93 66 02 	sts	0x0266, r26	; 0x800266 <pid_d_gain_pitch+0x2>
     bd8:	b0 93 67 02 	sts	0x0267, r27	; 0x800267 <pid_d_gain_pitch+0x3>
     bdc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <pid_max_roll>
     be0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <pid_max_roll+0x1>
     be4:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <pid_max_pitch+0x1>
     be8:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <pid_max_pitch>
     bec:	83 e5       	ldi	r24, 0x53	; 83
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN5ServoC1Ev>
     bf4:	80 e5       	ldi	r24, 0x50	; 80
     bf6:	92 e0       	ldi	r25, 0x02	; 2
     bf8:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN5ServoC1Ev>
     bfc:	8d e4       	ldi	r24, 0x4D	; 77
     bfe:	92 e0       	ldi	r25, 0x02	; 2
     c00:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <_ZN5ServoC1Ev>
     c04:	8a e4       	ldi	r24, 0x4A	; 74
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	0c 94 a8 17 	jmp	0x2f50	; 0x2f50 <_ZN5ServoC1Ev>

00000c0c <_Z16WriteAccRegisterhh>:
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	c8 2f       	mov	r28, r24
     c12:	d6 2f       	mov	r29, r22
     c14:	69 e1       	ldi	r22, 0x19	; 25
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	8c e3       	ldi	r24, 0x3C	; 60
     c1a:	93 e0       	ldi	r25, 0x03	; 3
     c1c:	0e 94 2c 19 	call	0x3258	; 0x3258 <_ZN7TwoWire17beginTransmissionEi>
     c20:	6d 2f       	mov	r22, r29
     c22:	8c e3       	ldi	r24, 0x3C	; 60
     c24:	93 e0       	ldi	r25, 0x03	; 3
     c26:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN7TwoWire5writeEh>
     c2a:	6c 2f       	mov	r22, r28
     c2c:	8c e3       	ldi	r24, 0x3C	; 60
     c2e:	93 e0       	ldi	r25, 0x03	; 3
     c30:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <_ZN7TwoWire5writeEh>
     c34:	8c e3       	ldi	r24, 0x3C	; 60
     c36:	93 e0       	ldi	r25, 0x03	; 3
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	0c 94 a8 19 	jmp	0x3350	; 0x3350 <_ZN7TwoWire15endTransmissionEv>

00000c40 <_Z12init_Compassv>:
     c40:	60 e2       	ldi	r22, 0x20	; 32
     c42:	87 e7       	ldi	r24, 0x77	; 119
     c44:	0e 94 06 06 	call	0xc0c	; 0xc0c <_Z16WriteAccRegisterhh>
     c48:	63 e2       	ldi	r22, 0x23	; 35
     c4a:	88 e9       	ldi	r24, 0x98	; 152
     c4c:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <_Z16WriteAccRegisterhh>

00000c50 <_Z11checkSerialv>:
     c50:	80 e7       	ldi	r24, 0x70	; 112
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	0e 94 65 11 	call	0x22ca	; 0x22ca <_ZN14HardwareSerial9availableEv>
     c58:	89 2b       	or	r24, r25
     c5a:	09 f4       	brne	.+2      	; 0xc5e <_Z11checkSerialv+0xe>
     c5c:	02 c1       	rjmp	.+516    	; 0xe62 <_Z11checkSerialv+0x212>
     c5e:	80 e7       	ldi	r24, 0x70	; 112
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	0e 94 7f 11 	call	0x22fe	; 0x22fe <_ZN14HardwareSerial4readEv>
     c66:	81 37       	cpi	r24, 0x71	; 113
     c68:	09 f4       	brne	.+2      	; 0xc6c <_Z11checkSerialv+0x1c>
     c6a:	a8 c0       	rjmp	.+336    	; 0xdbc <_Z11checkSerialv+0x16c>
     c6c:	81 36       	cpi	r24, 0x61	; 97
     c6e:	31 f5       	brne	.+76     	; 0xcbc <_Z11checkSerialv+0x6c>
     c70:	2a e0       	ldi	r18, 0x0A	; 10
     c72:	37 ed       	ldi	r19, 0xD7	; 215
     c74:	43 e2       	ldi	r20, 0x23	; 35
     c76:	5c e3       	ldi	r21, 0x3C	; 60
     c78:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <pid_p_gain_roll>
     c7c:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <pid_p_gain_roll+0x1>
     c80:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <pid_p_gain_roll+0x2>
     c84:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <pid_p_gain_roll+0x3>
     c88:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
     c8c:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <pid_p_gain_roll>
     c90:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <pid_p_gain_roll+0x1>
     c94:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <pid_p_gain_roll+0x2>
     c98:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <pid_p_gain_roll+0x3>
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	a9 01       	movw	r20, r18
     ca2:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
     ca6:	87 ff       	sbrs	r24, 7
     ca8:	d7 c0       	rjmp	.+430    	; 0xe58 <_Z11checkSerialv+0x208>
     caa:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <pid_p_gain_roll>
     cae:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <pid_p_gain_roll+0x1>
     cb2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <pid_p_gain_roll+0x2>
     cb6:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <pid_p_gain_roll+0x3>
     cba:	ce c0       	rjmp	.+412    	; 0xe58 <_Z11checkSerialv+0x208>
     cbc:	87 37       	cpi	r24, 0x77	; 119
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <_Z11checkSerialv+0x72>
     cc0:	99 c0       	rjmp	.+306    	; 0xdf4 <_Z11checkSerialv+0x1a4>
     cc2:	83 37       	cpi	r24, 0x73	; 115
     cc4:	31 f5       	brne	.+76     	; 0xd12 <_Z11checkSerialv+0xc2>
     cc6:	2f e6       	ldi	r18, 0x6F	; 111
     cc8:	32 e1       	ldi	r19, 0x12	; 18
     cca:	43 e8       	ldi	r20, 0x83	; 131
     ccc:	5a e3       	ldi	r21, 0x3A	; 58
     cce:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <pid_i_gain_roll>
     cd2:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <pid_i_gain_roll+0x1>
     cd6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pid_i_gain_roll+0x2>
     cda:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <pid_i_gain_roll+0x3>
     cde:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
     ce2:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <pid_i_gain_roll>
     ce6:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <pid_i_gain_roll+0x1>
     cea:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <pid_i_gain_roll+0x2>
     cee:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <pid_i_gain_roll+0x3>
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	a9 01       	movw	r20, r18
     cf8:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
     cfc:	87 ff       	sbrs	r24, 7
     cfe:	ac c0       	rjmp	.+344    	; 0xe58 <_Z11checkSerialv+0x208>
     d00:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <pid_i_gain_roll>
     d04:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <pid_i_gain_roll+0x1>
     d08:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <pid_i_gain_roll+0x2>
     d0c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <pid_i_gain_roll+0x3>
     d10:	a3 c0       	rjmp	.+326    	; 0xe58 <_Z11checkSerialv+0x208>
     d12:	85 36       	cpi	r24, 0x65	; 101
     d14:	09 f4       	brne	.+2      	; 0xd18 <_Z11checkSerialv+0xc8>
     d16:	8a c0       	rjmp	.+276    	; 0xe2c <_Z11checkSerialv+0x1dc>
     d18:	84 36       	cpi	r24, 0x64	; 100
     d1a:	31 f5       	brne	.+76     	; 0xd68 <_Z11checkSerialv+0x118>
     d1c:	2a e0       	ldi	r18, 0x0A	; 10
     d1e:	37 ed       	ldi	r19, 0xD7	; 215
     d20:	43 e2       	ldi	r20, 0x23	; 35
     d22:	5c e3       	ldi	r21, 0x3C	; 60
     d24:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <pid_d_gain_roll>
     d28:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <pid_d_gain_roll+0x1>
     d2c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pid_d_gain_roll+0x2>
     d30:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <pid_d_gain_roll+0x3>
     d34:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
     d38:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <pid_d_gain_roll>
     d3c:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <pid_d_gain_roll+0x1>
     d40:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <pid_d_gain_roll+0x2>
     d44:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <pid_d_gain_roll+0x3>
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	a9 01       	movw	r20, r18
     d4e:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
     d52:	87 ff       	sbrs	r24, 7
     d54:	81 c0       	rjmp	.+258    	; 0xe58 <_Z11checkSerialv+0x208>
     d56:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <pid_d_gain_roll>
     d5a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <pid_d_gain_roll+0x1>
     d5e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <pid_d_gain_roll+0x2>
     d62:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <pid_d_gain_roll+0x3>
     d66:	78 c0       	rjmp	.+240    	; 0xe58 <_Z11checkSerialv+0x208>
     d68:	88 37       	cpi	r24, 0x78	; 120
     d6a:	a1 f4       	brne	.+40     	; 0xd94 <_Z11checkSerialv+0x144>
     d6c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <throttle>
     d70:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <throttle+0x1>
     d74:	81 3d       	cpi	r24, 0xD1	; 209
     d76:	97 40       	sbci	r25, 0x07	; 7
     d78:	34 f0       	brlt	.+12     	; 0xd86 <_Z11checkSerialv+0x136>
     d7a:	80 ed       	ldi	r24, 0xD0	; 208
     d7c:	97 e0       	ldi	r25, 0x07	; 7
     d7e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <throttle+0x1>
     d82:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <throttle>
     d86:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <throttle>
     d8a:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <throttle+0x1>
     d8e:	66 5f       	subi	r22, 0xF6	; 246
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	08 c0       	rjmp	.+16     	; 0xda4 <_Z11checkSerialv+0x154>
     d94:	8a 37       	cpi	r24, 0x7A	; 122
     d96:	81 f4       	brne	.+32     	; 0xdb8 <_Z11checkSerialv+0x168>
     d98:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <throttle>
     d9c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <throttle+0x1>
     da0:	6a 50       	subi	r22, 0x0A	; 10
     da2:	71 09       	sbc	r23, r1
     da4:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <throttle+0x1>
     da8:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <throttle>
     dac:	4a e0       	ldi	r20, 0x0A	; 10
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	80 e7       	ldi	r24, 0x70	; 112
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	0c 94 38 14 	jmp	0x2870	; 0x2870 <_ZN5Print7printlnEii>
     db8:	85 37       	cpi	r24, 0x75	; 117
     dba:	b9 f4       	brne	.+46     	; 0xdea <_Z11checkSerialv+0x19a>
     dbc:	2a e0       	ldi	r18, 0x0A	; 10
     dbe:	37 ed       	ldi	r19, 0xD7	; 215
     dc0:	43 e2       	ldi	r20, 0x23	; 35
     dc2:	5c e3       	ldi	r21, 0x3C	; 60
     dc4:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <pid_p_gain_roll>
     dc8:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <pid_p_gain_roll+0x1>
     dcc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <pid_p_gain_roll+0x2>
     dd0:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <pid_p_gain_roll+0x3>
     dd4:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
     dd8:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <pid_p_gain_roll>
     ddc:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <pid_p_gain_roll+0x1>
     de0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <pid_p_gain_roll+0x2>
     de4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <pid_p_gain_roll+0x3>
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <_Z11checkSerialv+0x208>
     dea:	8a 36       	cpi	r24, 0x6A	; 106
     dec:	09 f4       	brne	.+2      	; 0xdf0 <_Z11checkSerialv+0x1a0>
     dee:	40 cf       	rjmp	.-384    	; 0xc70 <_Z11checkSerialv+0x20>
     df0:	89 36       	cpi	r24, 0x69	; 105
     df2:	b9 f4       	brne	.+46     	; 0xe22 <_Z11checkSerialv+0x1d2>
     df4:	2f e6       	ldi	r18, 0x6F	; 111
     df6:	32 e1       	ldi	r19, 0x12	; 18
     df8:	43 e8       	ldi	r20, 0x83	; 131
     dfa:	5a e3       	ldi	r21, 0x3A	; 58
     dfc:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <pid_i_gain_roll>
     e00:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <pid_i_gain_roll+0x1>
     e04:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <pid_i_gain_roll+0x2>
     e08:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <pid_i_gain_roll+0x3>
     e0c:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
     e10:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <pid_i_gain_roll>
     e14:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <pid_i_gain_roll+0x1>
     e18:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <pid_i_gain_roll+0x2>
     e1c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <pid_i_gain_roll+0x3>
     e20:	1b c0       	rjmp	.+54     	; 0xe58 <_Z11checkSerialv+0x208>
     e22:	8b 36       	cpi	r24, 0x6B	; 107
     e24:	09 f4       	brne	.+2      	; 0xe28 <_Z11checkSerialv+0x1d8>
     e26:	4f cf       	rjmp	.-354    	; 0xcc6 <_Z11checkSerialv+0x76>
     e28:	8f 36       	cpi	r24, 0x6F	; 111
     e2a:	c1 f4       	brne	.+48     	; 0xe5c <_Z11checkSerialv+0x20c>
     e2c:	2a e0       	ldi	r18, 0x0A	; 10
     e2e:	37 ed       	ldi	r19, 0xD7	; 215
     e30:	43 e2       	ldi	r20, 0x23	; 35
     e32:	5c e3       	ldi	r21, 0x3C	; 60
     e34:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <pid_d_gain_roll>
     e38:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <pid_d_gain_roll+0x1>
     e3c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pid_d_gain_roll+0x2>
     e40:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <pid_d_gain_roll+0x3>
     e44:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
     e48:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <pid_d_gain_roll>
     e4c:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <pid_d_gain_roll+0x1>
     e50:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <pid_d_gain_roll+0x2>
     e54:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <pid_d_gain_roll+0x3>
     e58:	0c 94 17 02 	jmp	0x42e	; 0x42e <_Z13printPIDGainsv>
     e5c:	8c 36       	cpi	r24, 0x6C	; 108
     e5e:	09 f4       	brne	.+2      	; 0xe62 <_Z11checkSerialv+0x212>
     e60:	5d cf       	rjmp	.-326    	; 0xd1c <_Z11checkSerialv+0xcc>
     e62:	08 95       	ret

00000e64 <_Z13gyro_signalenv>:
     e64:	ef 92       	push	r14
     e66:	ff 92       	push	r15
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	6b e6       	ldi	r22, 0x6B	; 107
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	8c e3       	ldi	r24, 0x3C	; 60
     e76:	93 e0       	ldi	r25, 0x03	; 3
     e78:	0e 94 2c 19 	call	0x3258	; 0x3258 <_ZN7TwoWire17beginTransmissionEi>
     e7c:	68 ea       	ldi	r22, 0xA8	; 168
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	8c e3       	ldi	r24, 0x3C	; 60
     e82:	93 e0       	ldi	r25, 0x03	; 3
     e84:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7TwoWire5writeEi>
     e88:	8c e3       	ldi	r24, 0x3C	; 60
     e8a:	93 e0       	ldi	r25, 0x03	; 3
     e8c:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN7TwoWire15endTransmissionEv>
     e90:	46 e0       	ldi	r20, 0x06	; 6
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	6b e6       	ldi	r22, 0x6B	; 107
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	8c e3       	ldi	r24, 0x3C	; 60
     e9a:	93 e0       	ldi	r25, 0x03	; 3
     e9c:	0e 94 a5 19 	call	0x334a	; 0x334a <_ZN7TwoWire11requestFromEii>
     ea0:	8c e3       	ldi	r24, 0x3C	; 60
     ea2:	93 e0       	ldi	r25, 0x03	; 3
     ea4:	0e 94 80 18 	call	0x3100	; 0x3100 <_ZN7TwoWire9availableEv>
     ea8:	06 97       	sbiw	r24, 0x06	; 6
     eaa:	d4 f3       	brlt	.-12     	; 0xea0 <_Z13gyro_signalenv+0x3c>
     eac:	8c e3       	ldi	r24, 0x3C	; 60
     eae:	93 e0       	ldi	r25, 0x03	; 3
     eb0:	0e 94 88 18 	call	0x3110	; 0x3110 <_ZN7TwoWire4readEv>
     eb4:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <lowByte>
     eb8:	8c e3       	ldi	r24, 0x3C	; 60
     eba:	93 e0       	ldi	r25, 0x03	; 3
     ebc:	0e 94 88 18 	call	0x3110	; 0x3110 <_ZN7TwoWire4readEv>
     ec0:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <highByte>
     ec4:	f8 2e       	mov	r15, r24
     ec6:	e1 2c       	mov	r14, r1
     ec8:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <lowByte>
     ecc:	b7 01       	movw	r22, r14
     ece:	68 2b       	or	r22, r24
     ed0:	07 2e       	mov	r0, r23
     ed2:	00 0c       	add	r0, r0
     ed4:	88 0b       	sbc	r24, r24
     ed6:	99 0b       	sbc	r25, r25
     ed8:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
     edc:	60 93 40 02 	sts	0x0240, r22	; 0x800240 <gyro_roll>
     ee0:	70 93 41 02 	sts	0x0241, r23	; 0x800241 <gyro_roll+0x1>
     ee4:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <gyro_roll+0x2>
     ee8:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <gyro_roll+0x3>
     eec:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <cal_int>
     ef0:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <cal_int+0x1>
     ef4:	20 3d       	cpi	r18, 0xD0	; 208
     ef6:	37 40       	sbci	r19, 0x07	; 7
     ef8:	91 f4       	brne	.+36     	; 0xf1e <_Z13gyro_signalenv+0xba>
     efa:	20 91 38 02 	lds	r18, 0x0238	; 0x800238 <gyro_roll_cal>
     efe:	30 91 39 02 	lds	r19, 0x0239	; 0x800239 <gyro_roll_cal+0x1>
     f02:	40 91 3a 02 	lds	r20, 0x023A	; 0x80023a <gyro_roll_cal+0x2>
     f06:	50 91 3b 02 	lds	r21, 0x023B	; 0x80023b <gyro_roll_cal+0x3>
     f0a:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
     f0e:	60 93 40 02 	sts	0x0240, r22	; 0x800240 <gyro_roll>
     f12:	70 93 41 02 	sts	0x0241, r23	; 0x800241 <gyro_roll+0x1>
     f16:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <gyro_roll+0x2>
     f1a:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <gyro_roll+0x3>
     f1e:	8c e3       	ldi	r24, 0x3C	; 60
     f20:	93 e0       	ldi	r25, 0x03	; 3
     f22:	0e 94 88 18 	call	0x3110	; 0x3110 <_ZN7TwoWire4readEv>
     f26:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <lowByte>
     f2a:	8c e3       	ldi	r24, 0x3C	; 60
     f2c:	93 e0       	ldi	r25, 0x03	; 3
     f2e:	0e 94 88 18 	call	0x3110	; 0x3110 <_ZN7TwoWire4readEv>
     f32:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <highByte>
     f36:	18 2f       	mov	r17, r24
     f38:	00 e0       	ldi	r16, 0x00	; 0
     f3a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <lowByte>
     f3e:	b8 01       	movw	r22, r16
     f40:	68 2b       	or	r22, r24
     f42:	07 2e       	mov	r0, r23
     f44:	00 0c       	add	r0, r0
     f46:	88 0b       	sbc	r24, r24
     f48:	99 0b       	sbc	r25, r25
     f4a:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
     f4e:	90 58       	subi	r25, 0x80	; 128
     f50:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <gyro_pitch>
     f54:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <gyro_pitch+0x1>
     f58:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <gyro_pitch+0x2>
     f5c:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <gyro_pitch+0x3>
     f60:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <cal_int>
     f64:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <cal_int+0x1>
     f68:	20 3d       	cpi	r18, 0xD0	; 208
     f6a:	37 40       	sbci	r19, 0x07	; 7
     f6c:	91 f4       	brne	.+36     	; 0xf92 <_Z13gyro_signalenv+0x12e>
     f6e:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <gyro_pitch_cal>
     f72:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <gyro_pitch_cal+0x1>
     f76:	40 91 36 02 	lds	r20, 0x0236	; 0x800236 <gyro_pitch_cal+0x2>
     f7a:	50 91 37 02 	lds	r21, 0x0237	; 0x800237 <gyro_pitch_cal+0x3>
     f7e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
     f82:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <gyro_pitch>
     f86:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <gyro_pitch+0x1>
     f8a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <gyro_pitch+0x2>
     f8e:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <gyro_pitch+0x3>
     f92:	8c e3       	ldi	r24, 0x3C	; 60
     f94:	93 e0       	ldi	r25, 0x03	; 3
     f96:	0e 94 88 18 	call	0x3110	; 0x3110 <_ZN7TwoWire4readEv>
     f9a:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <lowByte>
     f9e:	8c e3       	ldi	r24, 0x3C	; 60
     fa0:	93 e0       	ldi	r25, 0x03	; 3
     fa2:	0e 94 88 18 	call	0x3110	; 0x3110 <_ZN7TwoWire4readEv>
     fa6:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <highByte>
     faa:	d8 2f       	mov	r29, r24
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	c8 2f       	mov	r28, r24
     fb0:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <lowByte>
     fb4:	be 01       	movw	r22, r28
     fb6:	68 2b       	or	r22, r24
     fb8:	07 2e       	mov	r0, r23
     fba:	00 0c       	add	r0, r0
     fbc:	88 0b       	sbc	r24, r24
     fbe:	99 0b       	sbc	r25, r25
     fc0:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
     fc4:	90 58       	subi	r25, 0x80	; 128
     fc6:	60 93 3c 02 	sts	0x023C, r22	; 0x80023c <gyro_yaw>
     fca:	70 93 3d 02 	sts	0x023D, r23	; 0x80023d <gyro_yaw+0x1>
     fce:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <gyro_yaw+0x2>
     fd2:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <gyro_yaw+0x3>
     fd6:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <cal_int>
     fda:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <cal_int+0x1>
     fde:	20 3d       	cpi	r18, 0xD0	; 208
     fe0:	37 40       	sbci	r19, 0x07	; 7
     fe2:	91 f4       	brne	.+36     	; 0x1008 <_Z13gyro_signalenv+0x1a4>
     fe4:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <gyro_yaw_cal>
     fe8:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <gyro_yaw_cal+0x1>
     fec:	40 91 32 02 	lds	r20, 0x0232	; 0x800232 <gyro_yaw_cal+0x2>
     ff0:	50 91 33 02 	lds	r21, 0x0233	; 0x800233 <gyro_yaw_cal+0x3>
     ff4:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
     ff8:	60 93 3c 02 	sts	0x023C, r22	; 0x80023c <gyro_yaw>
     ffc:	70 93 3d 02 	sts	0x023D, r23	; 0x80023d <gyro_yaw+0x1>
    1000:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <gyro_yaw+0x2>
    1004:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <gyro_yaw+0x3>
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	08 95       	ret

00001016 <setup>:
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	85 b1       	in	r24, 0x05	; 5
    101c:	15 b8       	out	0x05, r1	; 5
    101e:	26 e0       	ldi	r18, 0x06	; 6
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	51 ee       	ldi	r21, 0xE1	; 225
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	80 e7       	ldi	r24, 0x70	; 112
    102a:	92 e0       	ldi	r25, 0x02	; 2
    102c:	0e 94 2b 12 	call	0x2456	; 0x2456 <_ZN14HardwareSerial5beginEmh>
    1030:	8c e3       	ldi	r24, 0x3C	; 60
    1032:	93 e0       	ldi	r25, 0x03	; 3
    1034:	0e 94 18 19 	call	0x3230	; 0x3230 <_ZN7TwoWire5beginEv>
    1038:	8a b1       	in	r24, 0x0a	; 10
    103a:	8c 63       	ori	r24, 0x3C	; 60
    103c:	8a b9       	out	0x0a, r24	; 10
    103e:	25 9a       	sbi	0x04, 5	; 4
    1040:	2d 9a       	sbi	0x05, 5	; 5
    1042:	6b e6       	ldi	r22, 0x6B	; 107
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	8c e3       	ldi	r24, 0x3C	; 60
    1048:	93 e0       	ldi	r25, 0x03	; 3
    104a:	0e 94 2c 19 	call	0x3258	; 0x3258 <_ZN7TwoWire17beginTransmissionEi>
    104e:	60 e2       	ldi	r22, 0x20	; 32
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	8c e3       	ldi	r24, 0x3C	; 60
    1054:	93 e0       	ldi	r25, 0x03	; 3
    1056:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7TwoWire5writeEi>
    105a:	6f e0       	ldi	r22, 0x0F	; 15
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	8c e3       	ldi	r24, 0x3C	; 60
    1060:	93 e0       	ldi	r25, 0x03	; 3
    1062:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7TwoWire5writeEi>
    1066:	8c e3       	ldi	r24, 0x3C	; 60
    1068:	93 e0       	ldi	r25, 0x03	; 3
    106a:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN7TwoWire15endTransmissionEv>
    106e:	6b e6       	ldi	r22, 0x6B	; 107
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	8c e3       	ldi	r24, 0x3C	; 60
    1074:	93 e0       	ldi	r25, 0x03	; 3
    1076:	0e 94 2c 19 	call	0x3258	; 0x3258 <_ZN7TwoWire17beginTransmissionEi>
    107a:	63 e2       	ldi	r22, 0x23	; 35
    107c:	70 e0       	ldi	r23, 0x00	; 0
    107e:	8c e3       	ldi	r24, 0x3C	; 60
    1080:	93 e0       	ldi	r25, 0x03	; 3
    1082:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7TwoWire5writeEi>
    1086:	60 e9       	ldi	r22, 0x90	; 144
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	8c e3       	ldi	r24, 0x3C	; 60
    108c:	93 e0       	ldi	r25, 0x03	; 3
    108e:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7TwoWire5writeEi>
    1092:	8c e3       	ldi	r24, 0x3C	; 60
    1094:	93 e0       	ldi	r25, 0x03	; 3
    1096:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN7TwoWire15endTransmissionEv>
    109a:	6a ef       	ldi	r22, 0xFA	; 250
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <delay>
    10a6:	61 e3       	ldi	r22, 0x31	; 49
    10a8:	71 e0       	ldi	r23, 0x01	; 1
    10aa:	80 e7       	ldi	r24, 0x70	; 112
    10ac:	92 e0       	ldi	r25, 0x02	; 2
    10ae:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <_ZN5Print7printlnEPKc>
    10b2:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <cal_int+0x1>
    10b6:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <cal_int>
    10ba:	cf e0       	ldi	r28, 0x0F	; 15
    10bc:	d0 e0       	ldi	r29, 0x00	; 0
    10be:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <cal_int>
    10c2:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <cal_int+0x1>
    10c6:	80 3d       	cpi	r24, 0xD0	; 208
    10c8:	27 e0       	ldi	r18, 0x07	; 7
    10ca:	92 07       	cpc	r25, r18
    10cc:	0c f0       	brlt	.+2      	; 0x10d0 <setup+0xba>
    10ce:	79 c0       	rjmp	.+242    	; 0x11c2 <setup+0x1ac>
    10d0:	be 01       	movw	r22, r28
    10d2:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <__divmodhi4>
    10d6:	89 2b       	or	r24, r25
    10d8:	51 f4       	brne	.+20     	; 0x10ee <setup+0xd8>
    10da:	8c e0       	ldi	r24, 0x0C	; 12
    10dc:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <digitalRead>
    10e0:	61 e0       	ldi	r22, 0x01	; 1
    10e2:	89 2b       	or	r24, r25
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <setup+0xd2>
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	8c e0       	ldi	r24, 0x0C	; 12
    10ea:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <digitalWrite>
    10ee:	0e 94 32 07 	call	0xe64	; 0xe64 <_Z13gyro_signalenv>
    10f2:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <gyro_roll>
    10f6:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <gyro_roll+0x1>
    10fa:	40 91 42 02 	lds	r20, 0x0242	; 0x800242 <gyro_roll+0x2>
    10fe:	50 91 43 02 	lds	r21, 0x0243	; 0x800243 <gyro_roll+0x3>
    1102:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <gyro_roll_cal>
    1106:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <gyro_roll_cal+0x1>
    110a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <gyro_roll_cal+0x2>
    110e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <gyro_roll_cal+0x3>
    1112:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
    1116:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <gyro_roll_cal>
    111a:	70 93 39 02 	sts	0x0239, r23	; 0x800239 <gyro_roll_cal+0x1>
    111e:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <gyro_roll_cal+0x2>
    1122:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <gyro_roll_cal+0x3>
    1126:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <gyro_pitch>
    112a:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <gyro_pitch+0x1>
    112e:	40 91 46 02 	lds	r20, 0x0246	; 0x800246 <gyro_pitch+0x2>
    1132:	50 91 47 02 	lds	r21, 0x0247	; 0x800247 <gyro_pitch+0x3>
    1136:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <gyro_pitch_cal>
    113a:	70 91 35 02 	lds	r23, 0x0235	; 0x800235 <gyro_pitch_cal+0x1>
    113e:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <gyro_pitch_cal+0x2>
    1142:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <gyro_pitch_cal+0x3>
    1146:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
    114a:	60 93 34 02 	sts	0x0234, r22	; 0x800234 <gyro_pitch_cal>
    114e:	70 93 35 02 	sts	0x0235, r23	; 0x800235 <gyro_pitch_cal+0x1>
    1152:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <gyro_pitch_cal+0x2>
    1156:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <gyro_pitch_cal+0x3>
    115a:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <gyro_yaw>
    115e:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <gyro_yaw+0x1>
    1162:	40 91 3e 02 	lds	r20, 0x023E	; 0x80023e <gyro_yaw+0x2>
    1166:	50 91 3f 02 	lds	r21, 0x023F	; 0x80023f <gyro_yaw+0x3>
    116a:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <gyro_yaw_cal>
    116e:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <gyro_yaw_cal+0x1>
    1172:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <gyro_yaw_cal+0x2>
    1176:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <gyro_yaw_cal+0x3>
    117a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
    117e:	60 93 30 02 	sts	0x0230, r22	; 0x800230 <gyro_yaw_cal>
    1182:	70 93 31 02 	sts	0x0231, r23	; 0x800231 <gyro_yaw_cal+0x1>
    1186:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <gyro_yaw_cal+0x2>
    118a:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <gyro_yaw_cal+0x3>
    118e:	8b b1       	in	r24, 0x0b	; 11
    1190:	8c 63       	ori	r24, 0x3C	; 60
    1192:	8b b9       	out	0x0b, r24	; 11
    1194:	88 ee       	ldi	r24, 0xE8	; 232
    1196:	93 e0       	ldi	r25, 0x03	; 3
    1198:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <delayMicroseconds>
    119c:	8b b1       	in	r24, 0x0b	; 11
    119e:	8f 70       	andi	r24, 0x0F	; 15
    11a0:	8b b9       	out	0x0b, r24	; 11
    11a2:	63 e0       	ldi	r22, 0x03	; 3
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <delay>
    11ae:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <cal_int>
    11b2:	90 91 49 02 	lds	r25, 0x0249	; 0x800249 <cal_int+0x1>
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <cal_int+0x1>
    11bc:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <cal_int>
    11c0:	7e cf       	rjmp	.-260    	; 0x10be <setup+0xa8>
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	4a ef       	ldi	r20, 0xFA	; 250
    11c8:	54 e4       	ldi	r21, 0x44	; 68
    11ca:	60 91 38 02 	lds	r22, 0x0238	; 0x800238 <gyro_roll_cal>
    11ce:	70 91 39 02 	lds	r23, 0x0239	; 0x800239 <gyro_roll_cal+0x1>
    11d2:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <gyro_roll_cal+0x2>
    11d6:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <gyro_roll_cal+0x3>
    11da:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__divsf3>
    11de:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <gyro_roll_cal>
    11e2:	70 93 39 02 	sts	0x0239, r23	; 0x800239 <gyro_roll_cal+0x1>
    11e6:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <gyro_roll_cal+0x2>
    11ea:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <gyro_roll_cal+0x3>
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	4a ef       	ldi	r20, 0xFA	; 250
    11f4:	54 e4       	ldi	r21, 0x44	; 68
    11f6:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <gyro_pitch_cal>
    11fa:	70 91 35 02 	lds	r23, 0x0235	; 0x800235 <gyro_pitch_cal+0x1>
    11fe:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <gyro_pitch_cal+0x2>
    1202:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <gyro_pitch_cal+0x3>
    1206:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__divsf3>
    120a:	60 93 34 02 	sts	0x0234, r22	; 0x800234 <gyro_pitch_cal>
    120e:	70 93 35 02 	sts	0x0235, r23	; 0x800235 <gyro_pitch_cal+0x1>
    1212:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <gyro_pitch_cal+0x2>
    1216:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <gyro_pitch_cal+0x3>
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	4a ef       	ldi	r20, 0xFA	; 250
    1220:	54 e4       	ldi	r21, 0x44	; 68
    1222:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <gyro_yaw_cal>
    1226:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <gyro_yaw_cal+0x1>
    122a:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <gyro_yaw_cal+0x2>
    122e:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <gyro_yaw_cal+0x3>
    1232:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__divsf3>
    1236:	60 93 30 02 	sts	0x0230, r22	; 0x800230 <gyro_yaw_cal>
    123a:	70 93 31 02 	sts	0x0231, r23	; 0x800231 <gyro_yaw_cal+0x1>
    123e:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <gyro_yaw_cal+0x2>
    1242:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <gyro_yaw_cal+0x3>
    1246:	0e 94 20 06 	call	0xc40	; 0xc40 <_Z12init_Compassv>
    124a:	85 b1       	in	r24, 0x05	; 5
    124c:	15 b8       	out	0x05, r1	; 5
    124e:	69 e4       	ldi	r22, 0x49	; 73
    1250:	71 e0       	ldi	r23, 0x01	; 1
    1252:	80 e7       	ldi	r24, 0x70	; 112
    1254:	92 e0       	ldi	r25, 0x02	; 2
    1256:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <_ZN5Print7printlnEPKc>
    125a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    125e:	81 60       	ori	r24, 0x01	; 1
    1260:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    1264:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    1268:	81 60       	ori	r24, 0x01	; 1
    126a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    126e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    1272:	82 60       	ori	r24, 0x02	; 2
    1274:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    1278:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    127c:	84 60       	ori	r24, 0x04	; 4
    127e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    1282:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    1286:	88 60       	ori	r24, 0x08	; 8
    1288:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
    128c:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <receiver_input_channel_3>
    1290:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <receiver_input_channel_3+0x1>
    1294:	86 5a       	subi	r24, 0xA6	; 166
    1296:	94 40       	sbci	r25, 0x04	; 4
    1298:	81 35       	cpi	r24, 0x51	; 81
    129a:	91 05       	cpc	r25, r1
    129c:	38 f0       	brcs	.+14     	; 0x12ac <setup+0x296>
    129e:	6c e5       	ldi	r22, 0x5C	; 92
    12a0:	71 e0       	ldi	r23, 0x01	; 1
    12a2:	80 e7       	ldi	r24, 0x70	; 112
    12a4:	92 e0       	ldi	r25, 0x02	; 2
    12a6:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <_ZN5Print7printlnEPKc>
    12aa:	f0 cf       	rjmp	.-32     	; 0x128c <setup+0x276>
    12ac:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <pid_roll_setpoint>
    12b0:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <pid_roll_setpoint+0x1>
    12b4:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <pid_roll_setpoint+0x2>
    12b8:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <pid_roll_setpoint+0x3>
    12bc:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <pid_pitch_setpoint>
    12c0:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <pid_pitch_setpoint+0x1>
    12c4:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <pid_pitch_setpoint+0x2>
    12c8:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <pid_pitch_setpoint+0x3>
    12cc:	63 e0       	ldi	r22, 0x03	; 3
    12ce:	70 e0       	ldi	r23, 0x00	; 0
    12d0:	83 e5       	ldi	r24, 0x53	; 83
    12d2:	92 e0       	ldi	r25, 0x02	; 2
    12d4:	0e 94 44 18 	call	0x3088	; 0x3088 <_ZN5Servo6attachEi>
    12d8:	62 e0       	ldi	r22, 0x02	; 2
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	8d e4       	ldi	r24, 0x4D	; 77
    12de:	92 e0       	ldi	r25, 0x02	; 2
    12e0:	0e 94 44 18 	call	0x3088	; 0x3088 <_ZN5Servo6attachEi>
    12e4:	65 e0       	ldi	r22, 0x05	; 5
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	80 e5       	ldi	r24, 0x50	; 80
    12ea:	92 e0       	ldi	r25, 0x02	; 2
    12ec:	0e 94 44 18 	call	0x3088	; 0x3088 <_ZN5Servo6attachEi>
    12f0:	64 e0       	ldi	r22, 0x04	; 4
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	8a e4       	ldi	r24, 0x4A	; 74
    12f6:	92 e0       	ldi	r25, 0x02	; 2
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
    12fc:	0c 94 44 18 	jmp	0x3088	; 0x3088 <_ZN5Servo6attachEi>

00001300 <_Z7ReadAccv>:
    1300:	8f 92       	push	r8
    1302:	9f 92       	push	r9
    1304:	af 92       	push	r10
    1306:	bf 92       	push	r11
    1308:	cf 92       	push	r12
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	69 e1       	ldi	r22, 0x19	; 25
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	8c e3       	ldi	r24, 0x3C	; 60
    131e:	93 e0       	ldi	r25, 0x03	; 3
    1320:	0e 94 2c 19 	call	0x3258	; 0x3258 <_ZN7TwoWire17beginTransmissionEi>
    1324:	68 ea       	ldi	r22, 0xA8	; 168
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	8c e3       	ldi	r24, 0x3C	; 60
    132a:	93 e0       	ldi	r25, 0x03	; 3
    132c:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN7TwoWire5writeEi>
    1330:	8c e3       	ldi	r24, 0x3C	; 60
    1332:	93 e0       	ldi	r25, 0x03	; 3
    1334:	0e 94 a8 19 	call	0x3350	; 0x3350 <_ZN7TwoWire15endTransmissionEv>
    1338:	46 e0       	ldi	r20, 0x06	; 6
    133a:	50 e0       	ldi	r21, 0x00	; 0
    133c:	69 e1       	ldi	r22, 0x19	; 25
    133e:	70 e0       	ldi	r23, 0x00	; 0
    1340:	8c e3       	ldi	r24, 0x3C	; 60
    1342:	93 e0       	ldi	r25, 0x03	; 3
    1344:	0e 94 a5 19 	call	0x334a	; 0x334a <_ZN7TwoWire11requestFromEii>
    1348:	8c e3       	ldi	r24, 0x3C	; 60
    134a:	93 e0       	ldi	r25, 0x03	; 3
    134c:	0e 94 80 18 	call	0x3100	; 0x3100 <_ZN7TwoWire9availableEv>
    1350:	06 97       	sbiw	r24, 0x06	; 6
    1352:	d4 f3       	brlt	.-12     	; 0x1348 <_Z7ReadAccv+0x48>
    1354:	8c e3       	ldi	r24, 0x3C	; 60
    1356:	93 e0       	ldi	r25, 0x03	; 3
    1358:	0e 94 88 18 	call	0x3110	; 0x3110 <_ZN7TwoWire4readEv>
    135c:	98 2e       	mov	r9, r24
    135e:	8c e3       	ldi	r24, 0x3C	; 60
    1360:	93 e0       	ldi	r25, 0x03	; 3
    1362:	0e 94 88 18 	call	0x3110	; 0x3110 <_ZN7TwoWire4readEv>
    1366:	88 2e       	mov	r8, r24
    1368:	8c e3       	ldi	r24, 0x3C	; 60
    136a:	93 e0       	ldi	r25, 0x03	; 3
    136c:	0e 94 88 18 	call	0x3110	; 0x3110 <_ZN7TwoWire4readEv>
    1370:	b8 2e       	mov	r11, r24
    1372:	8c e3       	ldi	r24, 0x3C	; 60
    1374:	93 e0       	ldi	r25, 0x03	; 3
    1376:	0e 94 88 18 	call	0x3110	; 0x3110 <_ZN7TwoWire4readEv>
    137a:	a8 2e       	mov	r10, r24
    137c:	8c e3       	ldi	r24, 0x3C	; 60
    137e:	93 e0       	ldi	r25, 0x03	; 3
    1380:	0e 94 88 18 	call	0x3110	; 0x3110 <_ZN7TwoWire4readEv>
    1384:	d8 2e       	mov	r13, r24
    1386:	8c e3       	ldi	r24, 0x3C	; 60
    1388:	93 e0       	ldi	r25, 0x03	; 3
    138a:	0e 94 88 18 	call	0x3110	; 0x3110 <_ZN7TwoWire4readEv>
    138e:	c8 2e       	mov	r12, r24
    1390:	f8 2c       	mov	r15, r8
    1392:	e1 2c       	mov	r14, r1
    1394:	b7 01       	movw	r22, r14
    1396:	69 29       	or	r22, r9
    1398:	07 2e       	mov	r0, r23
    139a:	00 0c       	add	r0, r0
    139c:	88 0b       	sbc	r24, r24
    139e:	99 0b       	sbc	r25, r25
    13a0:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
    13a4:	2f e8       	ldi	r18, 0x8F	; 143
    13a6:	32 e6       	ldi	r19, 0x62	; 98
    13a8:	4f e9       	ldi	r20, 0x9F	; 159
    13aa:	53 e4       	ldi	r21, 0x43	; 67
    13ac:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
    13b0:	60 93 bc 01 	sts	0x01BC, r22	; 0x8001bc <Accy>
    13b4:	70 93 bd 01 	sts	0x01BD, r23	; 0x8001bd <Accy+0x1>
    13b8:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <Accy+0x2>
    13bc:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <Accy+0x3>
    13c0:	1a 2d       	mov	r17, r10
    13c2:	00 e0       	ldi	r16, 0x00	; 0
    13c4:	b8 01       	movw	r22, r16
    13c6:	6b 29       	or	r22, r11
    13c8:	07 2e       	mov	r0, r23
    13ca:	00 0c       	add	r0, r0
    13cc:	88 0b       	sbc	r24, r24
    13ce:	99 0b       	sbc	r25, r25
    13d0:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
    13d4:	26 e6       	ldi	r18, 0x66	; 102
    13d6:	36 e6       	ldi	r19, 0x66	; 102
    13d8:	42 ee       	ldi	r20, 0xE2	; 226
    13da:	51 e4       	ldi	r21, 0x41	; 65
    13dc:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
    13e0:	60 93 c0 01 	sts	0x01C0, r22	; 0x8001c0 <Accx>
    13e4:	70 93 c1 01 	sts	0x01C1, r23	; 0x8001c1 <Accx+0x1>
    13e8:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <Accx+0x2>
    13ec:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <Accx+0x3>
    13f0:	dc 2d       	mov	r29, r12
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	c8 2f       	mov	r28, r24
    13f6:	be 01       	movw	r22, r28
    13f8:	6d 29       	or	r22, r13
    13fa:	07 2e       	mov	r0, r23
    13fc:	00 0c       	add	r0, r0
    13fe:	88 0b       	sbc	r24, r24
    1400:	99 0b       	sbc	r25, r25
    1402:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	4a ef       	ldi	r20, 0xFA	; 250
    140c:	53 e4       	ldi	r21, 0x43	; 67
    140e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
    1412:	60 93 b8 01 	sts	0x01B8, r22	; 0x8001b8 <Accz>
    1416:	70 93 b9 01 	sts	0x01B9, r23	; 0x8001b9 <Accz+0x1>
    141a:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <Accz+0x2>
    141e:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <Accz+0x3>
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	ff 90       	pop	r15
    142c:	ef 90       	pop	r14
    142e:	df 90       	pop	r13
    1430:	cf 90       	pop	r12
    1432:	bf 90       	pop	r11
    1434:	af 90       	pop	r10
    1436:	9f 90       	pop	r9
    1438:	8f 90       	pop	r8
    143a:	08 95       	ret

0000143c <_Z17get_AccelerometerPfS_>:
/*
Readsthe X,Y,Z axis values from the accelerometer and sends the values to the
serial monitor.
*/
void get_Accelerometer(float *roll, float *pitch)
{
    143c:	4f 92       	push	r4
    143e:	5f 92       	push	r5
    1440:	6f 92       	push	r6
    1442:	7f 92       	push	r7
    1444:	8f 92       	push	r8
    1446:	9f 92       	push	r9
    1448:	af 92       	push	r10
    144a:	bf 92       	push	r11
    144c:	cf 92       	push	r12
    144e:	df 92       	push	r13
    1450:	ef 92       	push	r14
    1452:	ff 92       	push	r15
    1454:	0f 93       	push	r16
    1456:	1f 93       	push	r17
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	ec 01       	movw	r28, r24
    145e:	8b 01       	movw	r16, r22
  ReadAcc();
    1460:	0e 94 80 09 	call	0x1300	; 0x1300 <_Z7ReadAccv>
    Serial.print("  ");
    Serial.println(Accz);
  */
  //if (forceMagnitudeApprox > 8192 && forceMagnitudeApprox < 32768)

  int forceMagnitudeApprox = abs(Accx) + abs(Accy) + abs(Accz);
    1464:	c0 90 c0 01 	lds	r12, 0x01C0	; 0x8001c0 <Accx>
    1468:	d0 90 c1 01 	lds	r13, 0x01C1	; 0x8001c1 <Accx+0x1>
    146c:	e0 90 c2 01 	lds	r14, 0x01C2	; 0x8001c2 <Accx+0x2>
    1470:	f0 90 c3 01 	lds	r15, 0x01C3	; 0x8001c3 <Accx+0x3>
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	a9 01       	movw	r20, r18
    147a:	c7 01       	movw	r24, r14
    147c:	b6 01       	movw	r22, r12
    147e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__gesf2>
    1482:	26 01       	movw	r4, r12
    1484:	37 01       	movw	r6, r14
    1486:	18 16       	cp	r1, r24
    1488:	24 f0       	brlt	.+8      	; 0x1492 <_Z17get_AccelerometerPfS_+0x56>
    148a:	77 fa       	bst	r7, 7
    148c:	70 94       	com	r7
    148e:	77 f8       	bld	r7, 7
    1490:	70 94       	com	r7
    1492:	80 90 bc 01 	lds	r8, 0x01BC	; 0x8001bc <Accy>
    1496:	90 90 bd 01 	lds	r9, 0x01BD	; 0x8001bd <Accy+0x1>
    149a:	a0 90 be 01 	lds	r10, 0x01BE	; 0x8001be <Accy+0x2>
    149e:	b0 90 bf 01 	lds	r11, 0x01BF	; 0x8001bf <Accy+0x3>
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	a9 01       	movw	r20, r18
    14a8:	c5 01       	movw	r24, r10
    14aa:	b4 01       	movw	r22, r8
    14ac:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__gesf2>
    14b0:	18 16       	cp	r1, r24
    14b2:	24 f0       	brlt	.+8      	; 0x14bc <_Z17get_AccelerometerPfS_+0x80>
    14b4:	b7 fa       	bst	r11, 7
    14b6:	b0 94       	com	r11
    14b8:	b7 f8       	bld	r11, 7
    14ba:	b0 94       	com	r11
    14bc:	a5 01       	movw	r20, r10
    14be:	94 01       	movw	r18, r8
    14c0:	c3 01       	movw	r24, r6
    14c2:	b2 01       	movw	r22, r4
    14c4:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
    14c8:	2b 01       	movw	r4, r22
    14ca:	3c 01       	movw	r6, r24
    14cc:	80 90 b8 01 	lds	r8, 0x01B8	; 0x8001b8 <Accz>
    14d0:	90 90 b9 01 	lds	r9, 0x01B9	; 0x8001b9 <Accz+0x1>
    14d4:	a0 90 ba 01 	lds	r10, 0x01BA	; 0x8001ba <Accz+0x2>
    14d8:	b0 90 bb 01 	lds	r11, 0x01BB	; 0x8001bb <Accz+0x3>
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	a9 01       	movw	r20, r18
    14e2:	c5 01       	movw	r24, r10
    14e4:	b4 01       	movw	r22, r8
    14e6:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__gesf2>
    14ea:	18 16       	cp	r1, r24
    14ec:	24 f0       	brlt	.+8      	; 0x14f6 <_Z17get_AccelerometerPfS_+0xba>
    14ee:	c5 01       	movw	r24, r10
    14f0:	b4 01       	movw	r22, r8
    14f2:	90 58       	subi	r25, 0x80	; 128
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <_Z17get_AccelerometerPfS_+0xbe>
    14f6:	c5 01       	movw	r24, r10
    14f8:	b4 01       	movw	r22, r8
  if (forceMagnitudeApprox > 4096 && forceMagnitudeApprox < 32768)//4G
    14fa:	a3 01       	movw	r20, r6
    14fc:	92 01       	movw	r18, r4
    14fe:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
    1502:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__fixsfsi>
    1506:	61 30       	cpi	r22, 0x01	; 1
    1508:	70 41       	sbci	r23, 0x10	; 16
    150a:	0c f4       	brge	.+2      	; 0x150e <_Z17get_AccelerometerPfS_+0xd2>
    150c:	96 c0       	rjmp	.+300    	; 0x163a <_Z17get_AccelerometerPfS_+0x1fe>
  {

    rollAcc = atan2f(Accx, Accz) * 180 / M_PI;//AccAngle
    150e:	a5 01       	movw	r20, r10
    1510:	94 01       	movw	r18, r8
    1512:	c7 01       	movw	r24, r14
    1514:	b6 01       	movw	r22, r12
    1516:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <atan2>
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	44 e3       	ldi	r20, 0x34	; 52
    1520:	53 e4       	ldi	r21, 0x43	; 67
    1522:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
    1526:	2b ed       	ldi	r18, 0xDB	; 219
    1528:	3f e0       	ldi	r19, 0x0F	; 15
    152a:	49 e4       	ldi	r20, 0x49	; 73
    152c:	50 e4       	ldi	r21, 0x40	; 64
    152e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__divsf3>
    1532:	6b 01       	movw	r12, r22
    1534:	7c 01       	movw	r14, r24
    1536:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <rollAcc>
    153a:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <rollAcc+0x1>
    153e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <rollAcc+0x2>
    1542:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <rollAcc+0x3>

    //compAngleX = 0.90 * (compAngleX + *roll * dt) + 0.1 * rollAcc;//original//man vill ha mer av roll
    *roll = 0.9996 * *roll + 0.0004 * rollAcc;
    1546:	29 ec       	ldi	r18, 0xC9	; 201
    1548:	35 ee       	ldi	r19, 0xE5	; 229
    154a:	4f e7       	ldi	r20, 0x7F	; 127
    154c:	5f e3       	ldi	r21, 0x3F	; 63
    154e:	68 81       	ld	r22, Y
    1550:	79 81       	ldd	r23, Y+1	; 0x01
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	9b 81       	ldd	r25, Y+3	; 0x03
    1556:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
    155a:	4b 01       	movw	r8, r22
    155c:	5c 01       	movw	r10, r24
    155e:	27 e1       	ldi	r18, 0x17	; 23
    1560:	37 eb       	ldi	r19, 0xB7	; 183
    1562:	41 ed       	ldi	r20, 0xD1	; 209
    1564:	59 e3       	ldi	r21, 0x39	; 57
    1566:	c7 01       	movw	r24, r14
    1568:	b6 01       	movw	r22, r12
    156a:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
    156e:	9b 01       	movw	r18, r22
    1570:	ac 01       	movw	r20, r24
    1572:	c5 01       	movw	r24, r10
    1574:	b4 01       	movw	r22, r8
    1576:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
    157a:	68 83       	st	Y, r22
    157c:	79 83       	std	Y+1, r23	; 0x01
    157e:	8a 83       	std	Y+2, r24	; 0x02
    1580:	9b 83       	std	Y+3, r25	; 0x03

    pitchAcc = (atan2f(Accy, Accz) * 180 / M_PI);//Adjustment
    1582:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <Accz>
    1586:	30 91 b9 01 	lds	r19, 0x01B9	; 0x8001b9 <Accz+0x1>
    158a:	40 91 ba 01 	lds	r20, 0x01BA	; 0x8001ba <Accz+0x2>
    158e:	50 91 bb 01 	lds	r21, 0x01BB	; 0x8001bb <Accz+0x3>
    1592:	60 91 bc 01 	lds	r22, 0x01BC	; 0x8001bc <Accy>
    1596:	70 91 bd 01 	lds	r23, 0x01BD	; 0x8001bd <Accy+0x1>
    159a:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <Accy+0x2>
    159e:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <Accy+0x3>
    15a2:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <atan2>
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	44 e3       	ldi	r20, 0x34	; 52
    15ac:	53 e4       	ldi	r21, 0x43	; 67
    15ae:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
    15b2:	2b ed       	ldi	r18, 0xDB	; 219
    15b4:	3f e0       	ldi	r19, 0x0F	; 15
    15b6:	49 e4       	ldi	r20, 0x49	; 73
    15b8:	50 e4       	ldi	r21, 0x40	; 64
    15ba:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__divsf3>
    15be:	6b 01       	movw	r12, r22
    15c0:	7c 01       	movw	r14, r24
    15c2:	60 93 b0 01 	sts	0x01B0, r22	; 0x8001b0 <pitchAcc>
    15c6:	70 93 b1 01 	sts	0x01B1, r23	; 0x8001b1 <pitchAcc+0x1>
    15ca:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <pitchAcc+0x2>
    15ce:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <pitchAcc+0x3>

    //compAngleY = 0.90 * (compAngleY + *pitch * dt) + 0.1 * pitchAcc;//0.94,0.06
    *pitch = 0.9996 * *pitch + 0.0004 * pitchAcc;
    15d2:	29 ec       	ldi	r18, 0xC9	; 201
    15d4:	35 ee       	ldi	r19, 0xE5	; 229
    15d6:	4f e7       	ldi	r20, 0x7F	; 127
    15d8:	5f e3       	ldi	r21, 0x3F	; 63
    15da:	f8 01       	movw	r30, r16
    15dc:	60 81       	ld	r22, Z
    15de:	71 81       	ldd	r23, Z+1	; 0x01
    15e0:	82 81       	ldd	r24, Z+2	; 0x02
    15e2:	93 81       	ldd	r25, Z+3	; 0x03
    15e4:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
    15e8:	4b 01       	movw	r8, r22
    15ea:	5c 01       	movw	r10, r24
    15ec:	27 e1       	ldi	r18, 0x17	; 23
    15ee:	37 eb       	ldi	r19, 0xB7	; 183
    15f0:	41 ed       	ldi	r20, 0xD1	; 209
    15f2:	59 e3       	ldi	r21, 0x39	; 57
    15f4:	c7 01       	movw	r24, r14
    15f6:	b6 01       	movw	r22, r12
    15f8:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
    15fc:	9b 01       	movw	r18, r22
    15fe:	ac 01       	movw	r20, r24
    1600:	c5 01       	movw	r24, r10
    1602:	b4 01       	movw	r22, r8
    1604:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
    1608:	f8 01       	movw	r30, r16
    160a:	60 83       	st	Z, r22
    160c:	71 83       	std	Z+1, r23	; 0x01
    160e:	82 83       	std	Z+2, r24	; 0x02
    1610:	93 83       	std	Z+3, r25	; 0x03


    compAngleX = *roll;
    1612:	08 81       	ld	r16, Y
    1614:	19 81       	ldd	r17, Y+1	; 0x01
    1616:	2a 81       	ldd	r18, Y+2	; 0x02
    1618:	3b 81       	ldd	r19, Y+3	; 0x03
    161a:	00 93 ac 01 	sts	0x01AC, r16	; 0x8001ac <compAngleX>
    161e:	10 93 ad 01 	sts	0x01AD, r17	; 0x8001ad <compAngleX+0x1>
    1622:	20 93 ae 01 	sts	0x01AE, r18	; 0x8001ae <compAngleX+0x2>
    1626:	30 93 af 01 	sts	0x01AF, r19	; 0x8001af <compAngleX+0x3>
    compAngleY = *pitch;
    162a:	60 93 a8 01 	sts	0x01A8, r22	; 0x8001a8 <compAngleY>
    162e:	70 93 a9 01 	sts	0x01A9, r23	; 0x8001a9 <compAngleY+0x1>
    1632:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <compAngleY+0x2>
    1636:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <compAngleY+0x3>
        Serial.print("  ");
        Serial.println(pitchAcc);
    */
  }

}
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	df 90       	pop	r13
    1648:	cf 90       	pop	r12
    164a:	bf 90       	pop	r11
    164c:	af 90       	pop	r10
    164e:	9f 90       	pop	r9
    1650:	8f 90       	pop	r8
    1652:	7f 90       	pop	r7
    1654:	6f 90       	pop	r6
    1656:	5f 90       	pop	r5
    1658:	4f 90       	pop	r4
    165a:	08 95       	ret

0000165c <loop>:
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Main program loop
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop() {
    165c:	4f 92       	push	r4
    165e:	5f 92       	push	r5
    1660:	6f 92       	push	r6
    1662:	7f 92       	push	r7
    1664:	8f 92       	push	r8
    1666:	9f 92       	push	r9
    1668:	af 92       	push	r10
    166a:	bf 92       	push	r11
    166c:	cf 92       	push	r12
    166e:	df 92       	push	r13
    1670:	ef 92       	push	r14
    1672:	ff 92       	push	r15
    1674:	0f 93       	push	r16
    1676:	1f 93       	push	r17
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29

  //Let's get the current gyro data and scale it to degrees per second for the pid calculations.
  gyro_signalen();
    167c:	0e 94 32 07 	call	0xe64	; 0xe64 <_Z13gyro_signalenv>
  gyro_roll_input = (gyro_roll_input * 0.8) + ((gyro_roll / 57.14286) * 0.2);            //Gyro pid input is deg/sec.
    1680:	2a e4       	ldi	r18, 0x4A	; 74
    1682:	32 e9       	ldi	r19, 0x92	; 146
    1684:	44 e6       	ldi	r20, 0x64	; 100
    1686:	52 e4       	ldi	r21, 0x42	; 66
    1688:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <gyro_roll>
    168c:	70 91 41 02 	lds	r23, 0x0241	; 0x800241 <gyro_roll+0x1>
    1690:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <gyro_roll+0x2>
    1694:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <gyro_roll+0x3>
    1698:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__divsf3>
    169c:	2d ec       	ldi	r18, 0xCD	; 205
    169e:	3c ec       	ldi	r19, 0xCC	; 204
    16a0:	4c e4       	ldi	r20, 0x4C	; 76
    16a2:	5e e3       	ldi	r21, 0x3E	; 62
    16a4:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
    16a8:	6b 01       	movw	r12, r22
    16aa:	7c 01       	movw	r14, r24
    16ac:	2d ec       	ldi	r18, 0xCD	; 205
    16ae:	3c ec       	ldi	r19, 0xCC	; 204
    16b0:	4c e4       	ldi	r20, 0x4C	; 76
    16b2:	5f e3       	ldi	r21, 0x3F	; 63
    16b4:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <gyro_roll_input>
    16b8:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <gyro_roll_input+0x1>
    16bc:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <gyro_roll_input+0x2>
    16c0:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <gyro_roll_input+0x3>
    16c4:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
    16c8:	9b 01       	movw	r18, r22
    16ca:	ac 01       	movw	r20, r24
    16cc:	c7 01       	movw	r24, r14
    16ce:	b6 01       	movw	r22, r12
    16d0:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
    16d4:	2b 01       	movw	r4, r22
    16d6:	3c 01       	movw	r6, r24
    16d8:	60 93 1e 02 	sts	0x021E, r22	; 0x80021e <gyro_roll_input>
    16dc:	70 93 1f 02 	sts	0x021F, r23	; 0x80021f <gyro_roll_input+0x1>
    16e0:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <gyro_roll_input+0x2>
    16e4:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <gyro_roll_input+0x3>
  gyro_pitch_input = (gyro_pitch_input * 0.8) + ((gyro_pitch / 57.14286) * 0.2);         //Gyro pid input is deg/sec.
    16e8:	2a e4       	ldi	r18, 0x4A	; 74
    16ea:	32 e9       	ldi	r19, 0x92	; 146
    16ec:	44 e6       	ldi	r20, 0x64	; 100
    16ee:	52 e4       	ldi	r21, 0x42	; 66
    16f0:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <gyro_pitch>
    16f4:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <gyro_pitch+0x1>
    16f8:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <gyro_pitch+0x2>
    16fc:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <gyro_pitch+0x3>
    1700:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__divsf3>
    1704:	2d ec       	ldi	r18, 0xCD	; 205
    1706:	3c ec       	ldi	r19, 0xCC	; 204
    1708:	4c e4       	ldi	r20, 0x4C	; 76
    170a:	5e e3       	ldi	r21, 0x3E	; 62
    170c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
    1710:	6b 01       	movw	r12, r22
    1712:	7c 01       	movw	r14, r24
    1714:	2d ec       	ldi	r18, 0xCD	; 205
    1716:	3c ec       	ldi	r19, 0xCC	; 204
    1718:	4c e4       	ldi	r20, 0x4C	; 76
    171a:	5f e3       	ldi	r21, 0x3F	; 63
    171c:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <gyro_pitch_input>
    1720:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <gyro_pitch_input+0x1>
    1724:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <gyro_pitch_input+0x2>
    1728:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <gyro_pitch_input+0x3>
    172c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
    1730:	9b 01       	movw	r18, r22
    1732:	ac 01       	movw	r20, r24
    1734:	c7 01       	movw	r24, r14
    1736:	b6 01       	movw	r22, r12
    1738:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
    173c:	4b 01       	movw	r8, r22
    173e:	5c 01       	movw	r10, r24
    1740:	60 93 0a 02 	sts	0x020A, r22	; 0x80020a <gyro_pitch_input>
    1744:	70 93 0b 02 	sts	0x020B, r23	; 0x80020b <gyro_pitch_input+0x1>
    1748:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <gyro_pitch_input+0x2>
    174c:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <gyro_pitch_input+0x3>
  gyro_yaw_input = (gyro_yaw_input * 0.8) + ((gyro_yaw / 57.14286) * 0.2);               //Gyro pid input is deg/sec.
    1750:	2a e4       	ldi	r18, 0x4A	; 74
    1752:	32 e9       	ldi	r19, 0x92	; 146
    1754:	44 e6       	ldi	r20, 0x64	; 100
    1756:	52 e4       	ldi	r21, 0x42	; 66
    1758:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <gyro_yaw>
    175c:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <gyro_yaw+0x1>
    1760:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <gyro_yaw+0x2>
    1764:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <gyro_yaw+0x3>
    1768:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__divsf3>
    176c:	2d ec       	ldi	r18, 0xCD	; 205
    176e:	3c ec       	ldi	r19, 0xCC	; 204
    1770:	4c e4       	ldi	r20, 0x4C	; 76
    1772:	5e e3       	ldi	r21, 0x3E	; 62
    1774:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
    1778:	6b 01       	movw	r12, r22
    177a:	7c 01       	movw	r14, r24
    177c:	2d ec       	ldi	r18, 0xCD	; 205
    177e:	3c ec       	ldi	r19, 0xCC	; 204
    1780:	4c e4       	ldi	r20, 0x4C	; 76
    1782:	5f e3       	ldi	r21, 0x3F	; 63
    1784:	60 91 f6 01 	lds	r22, 0x01F6	; 0x8001f6 <gyro_yaw_input>
    1788:	70 91 f7 01 	lds	r23, 0x01F7	; 0x8001f7 <gyro_yaw_input+0x1>
    178c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <gyro_yaw_input+0x2>
    1790:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <gyro_yaw_input+0x3>
    1794:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
    1798:	9b 01       	movw	r18, r22
    179a:	ac 01       	movw	r20, r24
    179c:	c7 01       	movw	r24, r14
    179e:	b6 01       	movw	r22, r12
    17a0:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
    17a4:	60 93 f6 01 	sts	0x01F6, r22	; 0x8001f6 <gyro_yaw_input>
    17a8:	70 93 f7 01 	sts	0x01F7, r23	; 0x8001f7 <gyro_yaw_input+0x1>
    17ac:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <gyro_yaw_input+0x2>
    17b0:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <gyro_yaw_input+0x3>

  if (gyro_roll_input >= rotationThreshold || gyro_roll_input <= -rotationThreshold)
    17b4:	c0 90 1c 01 	lds	r12, 0x011C	; 0x80011c <rotationThreshold>
    17b8:	d0 90 1d 01 	lds	r13, 0x011D	; 0x80011d <rotationThreshold+0x1>
    17bc:	e0 90 1e 01 	lds	r14, 0x011E	; 0x80011e <rotationThreshold+0x2>
    17c0:	f0 90 1f 01 	lds	r15, 0x011F	; 0x80011f <rotationThreshold+0x3>
    17c4:	a7 01       	movw	r20, r14
    17c6:	96 01       	movw	r18, r12
    17c8:	c3 01       	movw	r24, r6
    17ca:	b2 01       	movw	r22, r4
    17cc:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__gesf2>
    17d0:	87 ff       	sbrs	r24, 7
    17d2:	09 c0       	rjmp	.+18     	; 0x17e6 <loop+0x18a>
    17d4:	a7 01       	movw	r20, r14
    17d6:	96 01       	movw	r18, r12
    17d8:	50 58       	subi	r21, 0x80	; 128
    17da:	c3 01       	movw	r24, r6
    17dc:	b2 01       	movw	r22, r4
    17de:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	04 f1       	brlt	.+64     	; 0x1826 <loop+0x1ca>
  {
    angle_roll += (gyro_roll_input * dt);//Gyro Angle
    17e6:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <dt>
    17ea:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <dt+0x1>
    17ee:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <dt+0x2>
    17f2:	50 91 a7 01 	lds	r21, 0x01A7	; 0x8001a7 <dt+0x3>
    17f6:	c3 01       	movw	r24, r6
    17f8:	b2 01       	movw	r22, r4
    17fa:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
    17fe:	9b 01       	movw	r18, r22
    1800:	ac 01       	movw	r20, r24
    1802:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <angle_roll>
    1806:	70 91 c9 01 	lds	r23, 0x01C9	; 0x8001c9 <angle_roll+0x1>
    180a:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <angle_roll+0x2>
    180e:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <angle_roll+0x3>
    1812:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
    1816:	60 93 c8 01 	sts	0x01C8, r22	; 0x8001c8 <angle_roll>
    181a:	70 93 c9 01 	sts	0x01C9, r23	; 0x8001c9 <angle_roll+0x1>
    181e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <angle_roll+0x2>
    1822:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <angle_roll+0x3>
  }
  if (gyro_pitch_input >= rotationThreshold || gyro_pitch_input <= -rotationThreshold)
    1826:	a7 01       	movw	r20, r14
    1828:	96 01       	movw	r18, r12
    182a:	c5 01       	movw	r24, r10
    182c:	b4 01       	movw	r22, r8
    182e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__gesf2>
    1832:	87 ff       	sbrs	r24, 7
    1834:	09 c0       	rjmp	.+18     	; 0x1848 <loop+0x1ec>
    1836:	a7 01       	movw	r20, r14
    1838:	96 01       	movw	r18, r12
    183a:	50 58       	subi	r21, 0x80	; 128
    183c:	c5 01       	movw	r24, r10
    183e:	b4 01       	movw	r22, r8
    1840:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
    1844:	18 16       	cp	r1, r24
    1846:	04 f1       	brlt	.+64     	; 0x1888 <loop+0x22c>
  {
    angle_pitch += (gyro_pitch_input * dt);//Gyro Angle
    1848:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <dt>
    184c:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <dt+0x1>
    1850:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <dt+0x2>
    1854:	50 91 a7 01 	lds	r21, 0x01A7	; 0x8001a7 <dt+0x3>
    1858:	c5 01       	movw	r24, r10
    185a:	b4 01       	movw	r22, r8
    185c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
    1860:	9b 01       	movw	r18, r22
    1862:	ac 01       	movw	r20, r24
    1864:	60 91 c4 01 	lds	r22, 0x01C4	; 0x8001c4 <angle_pitch>
    1868:	70 91 c5 01 	lds	r23, 0x01C5	; 0x8001c5 <angle_pitch+0x1>
    186c:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <angle_pitch+0x2>
    1870:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <angle_pitch+0x3>
    1874:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
    1878:	60 93 c4 01 	sts	0x01C4, r22	; 0x8001c4 <angle_pitch>
    187c:	70 93 c5 01 	sts	0x01C5, r23	; 0x8001c5 <angle_pitch+0x1>
    1880:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <angle_pitch+0x2>
    1884:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <angle_pitch+0x3>
    Serial.print("  ");
    Serial.println(angle_pitch);
  */

  //Get Angles and combine Acc with Gyro, Complimentary Filter
  get_Accelerometer(&angle_roll, &angle_pitch);
    1888:	64 ec       	ldi	r22, 0xC4	; 196
    188a:	71 e0       	ldi	r23, 0x01	; 1
    188c:	88 ec       	ldi	r24, 0xC8	; 200
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	0e 94 1e 0a 	call	0x143c	; 0x143c <_Z17get_AccelerometerPfS_>
  //compAngleX_roll_input = compAngleX;//PID AUTOX input

  //compAngleY_pitch_input = compAngleY;//PID AUTOX input

  //For starting the motors: throttle low and yaw left (step 1).
  if (receiver_input_channel_3 < 1270 && receiver_input_channel_4 < 1050)start = 1;
    1894:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <receiver_input_channel_3>
    1898:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <receiver_input_channel_3+0x1>
    189c:	86 3f       	cpi	r24, 0xF6	; 246
    189e:	24 e0       	ldi	r18, 0x04	; 4
    18a0:	92 07       	cpc	r25, r18
    18a2:	6c f4       	brge	.+26     	; 0x18be <loop+0x262>
    18a4:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <receiver_input_channel_4>
    18a8:	30 91 e1 01 	lds	r19, 0x01E1	; 0x8001e1 <receiver_input_channel_4+0x1>
    18ac:	2a 31       	cpi	r18, 0x1A	; 26
    18ae:	34 40       	sbci	r19, 0x04	; 4
    18b0:	34 f4       	brge	.+12     	; 0x18be <loop+0x262>
    18b2:	21 e0       	ldi	r18, 0x01	; 1
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	30 93 ed 01 	sts	0x01ED, r19	; 0x8001ed <start+0x1>
    18ba:	20 93 ec 01 	sts	0x01EC, r18	; 0x8001ec <start>
  //When yaw stick is back in the center position start the motors (step 2).
  if (start == 1 && receiver_input_channel_3 < 1270 && receiver_input_channel_4 > 1450)
    18be:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <start>
    18c2:	30 91 ed 01 	lds	r19, 0x01ED	; 0x8001ed <start+0x1>
    18c6:	21 30       	cpi	r18, 0x01	; 1
    18c8:	31 05       	cpc	r19, r1
    18ca:	91 f4       	brne	.+36     	; 0x18f0 <loop+0x294>
    18cc:	86 3f       	cpi	r24, 0xF6	; 246
    18ce:	94 40       	sbci	r25, 0x04	; 4
    18d0:	7c f4       	brge	.+30     	; 0x18f0 <loop+0x294>
    18d2:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <receiver_input_channel_4>
    18d6:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <receiver_input_channel_4+0x1>
    18da:	8b 3a       	cpi	r24, 0xAB	; 171
    18dc:	95 40       	sbci	r25, 0x05	; 5
    18de:	44 f0       	brlt	.+16     	; 0x18f0 <loop+0x294>
  {
    start = 2;
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <start+0x1>
    18e8:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <start>
    //Reset the pid controllers for a bumpless start.
    ResetPID();
    18ec:	0e 94 ad 02 	call	0x55a	; 0x55a <_Z8ResetPIDv>
  }
  //Stopping the motors: throttle low and yaw right.
  if (start == 2 && receiver_input_channel_3 < 1270 && receiver_input_channel_4 > 1950)
    18f0:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <start>
    18f4:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <start+0x1>
    18f8:	02 97       	sbiw	r24, 0x02	; 2
    18fa:	a1 f4       	brne	.+40     	; 0x1924 <loop+0x2c8>
    18fc:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <receiver_input_channel_3>
    1900:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <receiver_input_channel_3+0x1>
    1904:	86 3f       	cpi	r24, 0xF6	; 246
    1906:	94 40       	sbci	r25, 0x04	; 4
    1908:	6c f4       	brge	.+26     	; 0x1924 <loop+0x2c8>
    190a:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <receiver_input_channel_4>
    190e:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <receiver_input_channel_4+0x1>
    1912:	8f 39       	cpi	r24, 0x9F	; 159
    1914:	97 40       	sbci	r25, 0x07	; 7
    1916:	34 f0       	brlt	.+12     	; 0x1924 <loop+0x2c8>
  {
    start = 0;
    1918:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <start+0x1>
    191c:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <start>
    ResetPID();
    1920:	0e 94 ad 02 	call	0x55a	; 0x55a <_Z8ResetPIDv>
  }


  //The PID set point in degrees per second is determined by the yaw receiver input.
  //In the case of deviding by 3 the max yaw rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).
  pid_yaw_setpoint = 0;
    1924:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <pid_yaw_setpoint>
    1928:	10 92 fb 01 	sts	0x01FB, r1	; 0x8001fb <pid_yaw_setpoint+0x1>
    192c:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <pid_yaw_setpoint+0x2>
    1930:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <pid_yaw_setpoint+0x3>

  //We need a little dead band of 16us for better results.

  if (receiver_input_channel_3 > 1250) { //Do not yaw when turning off the motors.
    1934:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <receiver_input_channel_3>
    1938:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <receiver_input_channel_3+0x1>
    193c:	83 3e       	cpi	r24, 0xE3	; 227
    193e:	94 40       	sbci	r25, 0x04	; 4
    1940:	2c f1       	brlt	.+74     	; 0x198c <loop+0x330>
    if (receiver_input_channel_4 > 1510)pid_yaw_setpoint = (receiver_input_channel_4 - 1510) / 3.0;
    1942:	60 91 e0 01 	lds	r22, 0x01E0	; 0x8001e0 <receiver_input_channel_4>
    1946:	70 91 e1 01 	lds	r23, 0x01E1	; 0x8001e1 <receiver_input_channel_4+0x1>
    194a:	67 3e       	cpi	r22, 0xE7	; 231
    194c:	45 e0       	ldi	r20, 0x05	; 5
    194e:	74 07       	cpc	r23, r20
    1950:	1c f0       	brlt	.+6      	; 0x1958 <loop+0x2fc>
    1952:	66 5e       	subi	r22, 0xE6	; 230
    1954:	75 40       	sbci	r23, 0x05	; 5
    1956:	06 c0       	rjmp	.+12     	; 0x1964 <loop+0x308>
    else if (receiver_input_channel_4 < 1490)pid_yaw_setpoint = (receiver_input_channel_4 - 1490) / 3.0;
    1958:	62 3d       	cpi	r22, 0xD2	; 210
    195a:	85 e0       	ldi	r24, 0x05	; 5
    195c:	78 07       	cpc	r23, r24
    195e:	b4 f4       	brge	.+44     	; 0x198c <loop+0x330>
    1960:	62 5d       	subi	r22, 0xD2	; 210
    1962:	75 40       	sbci	r23, 0x05	; 5
    1964:	07 2e       	mov	r0, r23
    1966:	00 0c       	add	r0, r0
    1968:	88 0b       	sbc	r24, r24
    196a:	99 0b       	sbc	r25, r25
    196c:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e4       	ldi	r20, 0x40	; 64
    1976:	50 e4       	ldi	r21, 0x40	; 64
    1978:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__divsf3>
    197c:	60 93 fa 01 	sts	0x01FA, r22	; 0x8001fa <pid_yaw_setpoint>
    1980:	70 93 fb 01 	sts	0x01FB, r23	; 0x8001fb <pid_yaw_setpoint+0x1>
    1984:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <pid_yaw_setpoint+0x2>
    1988:	90 93 fd 01 	sts	0x01FD, r25	; 0x8001fd <pid_yaw_setpoint+0x3>
  }

  //The PID set point in degrees per second is determined by the roll receiver input.
  //In the case of deviding by 3 the max roll rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).

  pid_roll_setpoint = -compAngleX;
    198c:	c0 90 ac 01 	lds	r12, 0x01AC	; 0x8001ac <compAngleX>
    1990:	d0 90 ad 01 	lds	r13, 0x01AD	; 0x8001ad <compAngleX+0x1>
    1994:	e0 90 ae 01 	lds	r14, 0x01AE	; 0x8001ae <compAngleX+0x2>
    1998:	f0 90 af 01 	lds	r15, 0x01AF	; 0x8001af <compAngleX+0x3>
    199c:	d7 01       	movw	r26, r14
    199e:	c6 01       	movw	r24, r12
    19a0:	b0 58       	subi	r27, 0x80	; 128
    19a2:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <pid_roll_setpoint>
    19a6:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <pid_roll_setpoint+0x1>
    19aa:	a0 93 24 02 	sts	0x0224, r26	; 0x800224 <pid_roll_setpoint+0x2>
    19ae:	b0 93 25 02 	sts	0x0225, r27	; 0x800225 <pid_roll_setpoint+0x3>

  //We need a little dead band of 16us for better results.
  if (receiver_input_channel_1 > 1510 && compAngleX < setmaxangle)pid_roll_setpoint = (receiver_input_channel_1 - 1510) / 12.0;
    19b2:	c0 91 e6 01 	lds	r28, 0x01E6	; 0x8001e6 <receiver_input_channel_1>
    19b6:	d0 91 e7 01 	lds	r29, 0x01E7	; 0x8001e7 <receiver_input_channel_1+0x1>
    19ba:	c7 3e       	cpi	r28, 0xE7	; 231
    19bc:	25 e0       	ldi	r18, 0x05	; 5
    19be:	d2 07       	cpc	r29, r18
    19c0:	cc f0       	brlt	.+50     	; 0x19f4 <loop+0x398>
    19c2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    19c6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    19ca:	07 2e       	mov	r0, r23
    19cc:	00 0c       	add	r0, r0
    19ce:	88 0b       	sbc	r24, r24
    19d0:	99 0b       	sbc	r25, r25
    19d2:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
    19d6:	9b 01       	movw	r18, r22
    19d8:	ac 01       	movw	r20, r24
    19da:	c7 01       	movw	r24, r14
    19dc:	b6 01       	movw	r22, r12
    19de:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
    19e2:	87 ff       	sbrs	r24, 7
    19e4:	37 c0       	rjmp	.+110    	; 0x1a54 <loop+0x3f8>
    19e6:	c6 5e       	subi	r28, 0xE6	; 230
    19e8:	d5 40       	sbci	r29, 0x05	; 5
    19ea:	be 01       	movw	r22, r28
    19ec:	dd 0f       	add	r29, r29
    19ee:	88 0b       	sbc	r24, r24
    19f0:	99 0b       	sbc	r25, r25
    19f2:	20 c0       	rjmp	.+64     	; 0x1a34 <loop+0x3d8>
  else if (receiver_input_channel_1 < 1490 && compAngleX > -setmaxangle)pid_roll_setpoint = (receiver_input_channel_1 - 1490) / 12.0;
    19f4:	c2 3d       	cpi	r28, 0xD2	; 210
    19f6:	45 e0       	ldi	r20, 0x05	; 5
    19f8:	d4 07       	cpc	r29, r20
    19fa:	64 f5       	brge	.+88     	; 0x1a54 <loop+0x3f8>
    19fc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1a00:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1a04:	71 95       	neg	r23
    1a06:	61 95       	neg	r22
    1a08:	71 09       	sbc	r23, r1
    1a0a:	07 2e       	mov	r0, r23
    1a0c:	00 0c       	add	r0, r0
    1a0e:	88 0b       	sbc	r24, r24
    1a10:	99 0b       	sbc	r25, r25
    1a12:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
    1a16:	9b 01       	movw	r18, r22
    1a18:	ac 01       	movw	r20, r24
    1a1a:	c7 01       	movw	r24, r14
    1a1c:	b6 01       	movw	r22, r12
    1a1e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__gesf2>
    1a22:	18 16       	cp	r1, r24
    1a24:	bc f4       	brge	.+46     	; 0x1a54 <loop+0x3f8>
    1a26:	be 01       	movw	r22, r28
    1a28:	62 5d       	subi	r22, 0xD2	; 210
    1a2a:	75 40       	sbci	r23, 0x05	; 5
    1a2c:	07 2e       	mov	r0, r23
    1a2e:	00 0c       	add	r0, r0
    1a30:	88 0b       	sbc	r24, r24
    1a32:	99 0b       	sbc	r25, r25
    1a34:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e4       	ldi	r20, 0x40	; 64
    1a3e:	51 e4       	ldi	r21, 0x41	; 65
    1a40:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__divsf3>
    1a44:	60 93 22 02 	sts	0x0222, r22	; 0x800222 <pid_roll_setpoint>
    1a48:	70 93 23 02 	sts	0x0223, r23	; 0x800223 <pid_roll_setpoint+0x1>
    1a4c:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <pid_roll_setpoint+0x2>
    1a50:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <pid_roll_setpoint+0x3>


  //The PID set point in degrees per second is determined by the pitch receiver input.
  //In the case of deviding by 3 the max pitch rate is aprox 164 degrees per second ( (500-8)/3 = 164d/s ).

  pid_pitch_setpoint = -compAngleY;
    1a54:	c0 90 a8 01 	lds	r12, 0x01A8	; 0x8001a8 <compAngleY>
    1a58:	d0 90 a9 01 	lds	r13, 0x01A9	; 0x8001a9 <compAngleY+0x1>
    1a5c:	e0 90 aa 01 	lds	r14, 0x01AA	; 0x8001aa <compAngleY+0x2>
    1a60:	f0 90 ab 01 	lds	r15, 0x01AB	; 0x8001ab <compAngleY+0x3>
    1a64:	d7 01       	movw	r26, r14
    1a66:	c6 01       	movw	r24, r12
    1a68:	b0 58       	subi	r27, 0x80	; 128
    1a6a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <pid_pitch_setpoint>
    1a6e:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <pid_pitch_setpoint+0x1>
    1a72:	a0 93 10 02 	sts	0x0210, r26	; 0x800210 <pid_pitch_setpoint+0x2>
    1a76:	b0 93 11 02 	sts	0x0211, r27	; 0x800211 <pid_pitch_setpoint+0x3>

  //We need a little dead band of 16us for better results.
  if (receiver_input_channel_2 > 1510 && compAngleY < setmaxangle)pid_pitch_setpoint = (receiver_input_channel_2 - 1510) / 12.0;
    1a7a:	c0 91 e4 01 	lds	r28, 0x01E4	; 0x8001e4 <receiver_input_channel_2>
    1a7e:	d0 91 e5 01 	lds	r29, 0x01E5	; 0x8001e5 <receiver_input_channel_2+0x1>
    1a82:	c7 3e       	cpi	r28, 0xE7	; 231
    1a84:	85 e0       	ldi	r24, 0x05	; 5
    1a86:	d8 07       	cpc	r29, r24
    1a88:	cc f0       	brlt	.+50     	; 0x1abc <loop+0x460>
    1a8a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1a8e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1a92:	07 2e       	mov	r0, r23
    1a94:	00 0c       	add	r0, r0
    1a96:	88 0b       	sbc	r24, r24
    1a98:	99 0b       	sbc	r25, r25
    1a9a:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
    1a9e:	9b 01       	movw	r18, r22
    1aa0:	ac 01       	movw	r20, r24
    1aa2:	c7 01       	movw	r24, r14
    1aa4:	b6 01       	movw	r22, r12
    1aa6:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
    1aaa:	87 ff       	sbrs	r24, 7
    1aac:	37 c0       	rjmp	.+110    	; 0x1b1c <loop+0x4c0>
    1aae:	c6 5e       	subi	r28, 0xE6	; 230
    1ab0:	d5 40       	sbci	r29, 0x05	; 5
    1ab2:	be 01       	movw	r22, r28
    1ab4:	dd 0f       	add	r29, r29
    1ab6:	88 0b       	sbc	r24, r24
    1ab8:	99 0b       	sbc	r25, r25
    1aba:	20 c0       	rjmp	.+64     	; 0x1afc <loop+0x4a0>
  else if (receiver_input_channel_2 < 1490 && compAngleY > -setmaxangle)pid_pitch_setpoint = (receiver_input_channel_2 - 1490) / 12.0;
    1abc:	c2 3d       	cpi	r28, 0xD2	; 210
    1abe:	25 e0       	ldi	r18, 0x05	; 5
    1ac0:	d2 07       	cpc	r29, r18
    1ac2:	64 f5       	brge	.+88     	; 0x1b1c <loop+0x4c0>
    1ac4:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1ac8:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1acc:	71 95       	neg	r23
    1ace:	61 95       	neg	r22
    1ad0:	71 09       	sbc	r23, r1
    1ad2:	07 2e       	mov	r0, r23
    1ad4:	00 0c       	add	r0, r0
    1ad6:	88 0b       	sbc	r24, r24
    1ad8:	99 0b       	sbc	r25, r25
    1ada:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
    1ade:	9b 01       	movw	r18, r22
    1ae0:	ac 01       	movw	r20, r24
    1ae2:	c7 01       	movw	r24, r14
    1ae4:	b6 01       	movw	r22, r12
    1ae6:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__gesf2>
    1aea:	18 16       	cp	r1, r24
    1aec:	bc f4       	brge	.+46     	; 0x1b1c <loop+0x4c0>
    1aee:	be 01       	movw	r22, r28
    1af0:	62 5d       	subi	r22, 0xD2	; 210
    1af2:	75 40       	sbci	r23, 0x05	; 5
    1af4:	07 2e       	mov	r0, r23
    1af6:	00 0c       	add	r0, r0
    1af8:	88 0b       	sbc	r24, r24
    1afa:	99 0b       	sbc	r25, r25
    1afc:	0e 94 10 10 	call	0x2020	; 0x2020 <__floatsisf>
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e4       	ldi	r20, 0x40	; 64
    1b06:	51 e4       	ldi	r21, 0x41	; 65
    1b08:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__divsf3>
    1b0c:	60 93 0e 02 	sts	0x020E, r22	; 0x80020e <pid_pitch_setpoint>
    1b10:	70 93 0f 02 	sts	0x020F, r23	; 0x80020f <pid_pitch_setpoint+0x1>
    1b14:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <pid_pitch_setpoint+0x2>
    1b18:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <pid_pitch_setpoint+0x3>

  checkSerial();
    1b1c:	0e 94 28 06 	call	0xc50	; 0xc50 <_Z11checkSerialv>

  calculate_pid();
    1b20:	0e 94 ee 02 	call	0x5dc	; 0x5dc <_Z13calculate_pidv>

  throttle = receiver_input_channel_3;//We need the throttle signal as a base signal.
    1b24:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <receiver_input_channel_3>
    1b28:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <receiver_input_channel_3+0x1>
    1b2c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <throttle+0x1>
    1b30:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <throttle>

  if (start == 2)
    1b34:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <start>
    1b38:	30 91 ed 01 	lds	r19, 0x01ED	; 0x8001ed <start+0x1>
    1b3c:	22 30       	cpi	r18, 0x02	; 2
    1b3e:	31 05       	cpc	r19, r1
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <loop+0x4e8>
    1b42:	83 c0       	rjmp	.+262    	; 0x1c4a <loop+0x5ee>
  {

    MotorControl(throttle, pid_output_roll, pid_output_pitch, pid_output_yaw);
    1b44:	c0 90 f2 01 	lds	r12, 0x01F2	; 0x8001f2 <pid_output_yaw>
    1b48:	d0 90 f3 01 	lds	r13, 0x01F3	; 0x8001f3 <pid_output_yaw+0x1>
    1b4c:	e0 90 f4 01 	lds	r14, 0x01F4	; 0x8001f4 <pid_output_yaw+0x2>
    1b50:	f0 90 f5 01 	lds	r15, 0x01F5	; 0x8001f5 <pid_output_yaw+0x3>
    1b54:	00 91 06 02 	lds	r16, 0x0206	; 0x800206 <pid_output_pitch>
    1b58:	10 91 07 02 	lds	r17, 0x0207	; 0x800207 <pid_output_pitch+0x1>
    1b5c:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <pid_output_pitch+0x2>
    1b60:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <pid_output_pitch+0x3>
    1b64:	40 91 1a 02 	lds	r20, 0x021A	; 0x80021a <pid_output_roll>
    1b68:	50 91 1b 02 	lds	r21, 0x021B	; 0x80021b <pid_output_roll+0x1>
    1b6c:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <pid_output_roll+0x2>
    1b70:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <pid_output_roll+0x3>
    1b74:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z12MotorControlifff>

    //String myGyro = "Pitch=" + String(gyro_pitch_input) + "  " + "Roll" + String(gyro_roll_input) + "  " + "YAW=" + String(gyro_yaw_input);
    //Serial.println(myGyro);

    if (esc_1 < 1200) esc_1 = 1200;                                         //Keep the motors running.
    1b78:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <esc_1>
    1b7c:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <esc_1+0x1>
    1b80:	80 3b       	cpi	r24, 0xB0	; 176
    1b82:	94 40       	sbci	r25, 0x04	; 4
    1b84:	34 f4       	brge	.+12     	; 0x1b92 <loop+0x536>
    1b86:	80 eb       	ldi	r24, 0xB0	; 176
    1b88:	94 e0       	ldi	r25, 0x04	; 4
    1b8a:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <esc_1+0x1>
    1b8e:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <esc_1>
    if (esc_2 < 1200) esc_2 = 1200;                                         //Keep the motors running.
    1b92:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <esc_2>
    1b96:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <esc_2+0x1>
    1b9a:	80 3b       	cpi	r24, 0xB0	; 176
    1b9c:	94 40       	sbci	r25, 0x04	; 4
    1b9e:	34 f4       	brge	.+12     	; 0x1bac <loop+0x550>
    1ba0:	80 eb       	ldi	r24, 0xB0	; 176
    1ba2:	94 e0       	ldi	r25, 0x04	; 4
    1ba4:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <esc_2+0x1>
    1ba8:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <esc_2>
    if (esc_3 < 1200) esc_3 = 1200;                                         //Keep the motors running.
    1bac:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <esc_3>
    1bb0:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <esc_3+0x1>
    1bb4:	80 3b       	cpi	r24, 0xB0	; 176
    1bb6:	94 40       	sbci	r25, 0x04	; 4
    1bb8:	34 f4       	brge	.+12     	; 0x1bc6 <loop+0x56a>
    1bba:	80 eb       	ldi	r24, 0xB0	; 176
    1bbc:	94 e0       	ldi	r25, 0x04	; 4
    1bbe:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <esc_3+0x1>
    1bc2:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <esc_3>
    if (esc_4 < 1200) esc_4 = 1200;                                         //Keep the motors running.
    1bc6:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <esc_4>
    1bca:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <esc_4+0x1>
    1bce:	80 3b       	cpi	r24, 0xB0	; 176
    1bd0:	94 40       	sbci	r25, 0x04	; 4
    1bd2:	34 f4       	brge	.+12     	; 0x1be0 <loop+0x584>
    1bd4:	80 eb       	ldi	r24, 0xB0	; 176
    1bd6:	94 e0       	ldi	r25, 0x04	; 4
    1bd8:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <esc_4+0x1>
    1bdc:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <esc_4>

    if (esc_1 > 2200)esc_1 = 2200;                                          //Limit the esc-1 pulse to 2000us.
    1be0:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <esc_1>
    1be4:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <esc_1+0x1>
    1be8:	89 39       	cpi	r24, 0x99	; 153
    1bea:	98 40       	sbci	r25, 0x08	; 8
    1bec:	34 f0       	brlt	.+12     	; 0x1bfa <loop+0x59e>
    1bee:	88 e9       	ldi	r24, 0x98	; 152
    1bf0:	98 e0       	ldi	r25, 0x08	; 8
    1bf2:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <esc_1+0x1>
    1bf6:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <esc_1>
    if (esc_2 > 2200)esc_2 = 2200;                                          //Limit the esc-2 pulse to 2000us.
    1bfa:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <esc_2>
    1bfe:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <esc_2+0x1>
    1c02:	89 39       	cpi	r24, 0x99	; 153
    1c04:	98 40       	sbci	r25, 0x08	; 8
    1c06:	34 f0       	brlt	.+12     	; 0x1c14 <loop+0x5b8>
    1c08:	88 e9       	ldi	r24, 0x98	; 152
    1c0a:	98 e0       	ldi	r25, 0x08	; 8
    1c0c:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <esc_2+0x1>
    1c10:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <esc_2>
    if (esc_3 > 2200)esc_3 = 2200;                                          //Limit the esc-3 pulse to 2000us.
    1c14:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <esc_3>
    1c18:	90 91 59 02 	lds	r25, 0x0259	; 0x800259 <esc_3+0x1>
    1c1c:	89 39       	cpi	r24, 0x99	; 153
    1c1e:	98 40       	sbci	r25, 0x08	; 8
    1c20:	34 f0       	brlt	.+12     	; 0x1c2e <loop+0x5d2>
    1c22:	88 e9       	ldi	r24, 0x98	; 152
    1c24:	98 e0       	ldi	r25, 0x08	; 8
    1c26:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <esc_3+0x1>
    1c2a:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <esc_3>
    if (esc_4 > 2200)esc_4 = 2200;                                          //Limit the esc-4 pulse to 2000us.
    1c2e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <esc_4>
    1c32:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <esc_4+0x1>
    1c36:	89 39       	cpi	r24, 0x99	; 153
    1c38:	98 40       	sbci	r25, 0x08	; 8
    1c3a:	b4 f0       	brlt	.+44     	; 0x1c68 <loop+0x60c>
    1c3c:	88 e9       	ldi	r24, 0x98	; 152
    1c3e:	98 e0       	ldi	r25, 0x08	; 8
    1c40:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <esc_4+0x1>
    1c44:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <esc_4>
    1c48:	0f c0       	rjmp	.+30     	; 0x1c68 <loop+0x60c>
  }
  else
  {
    throttle = 1000;
    1c4a:	88 ee       	ldi	r24, 0xE8	; 232
    1c4c:	93 e0       	ldi	r25, 0x03	; 3
    1c4e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <throttle+0x1>
    1c52:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <throttle>
    MotorControl(throttle, 0, 0, 0);
    1c56:	c1 2c       	mov	r12, r1
    1c58:	d1 2c       	mov	r13, r1
    1c5a:	76 01       	movw	r14, r12
    1c5c:	97 01       	movw	r18, r14
    1c5e:	86 01       	movw	r16, r12
    1c60:	b7 01       	movw	r22, r14
    1c62:	a6 01       	movw	r20, r12
    1c64:	0e 94 65 01 	call	0x2ca	; 0x2ca <_Z12MotorControlifff>
  }


  while (micros() - inner_loop_timer < 4000);//We wait until 4000us are passed. 250HZ
    1c68:	0e 94 83 15 	call	0x2b06	; 0x2b06 <micros>
    1c6c:	c0 90 a0 01 	lds	r12, 0x01A0	; 0x8001a0 <__data_end>
    1c70:	d0 90 a1 01 	lds	r13, 0x01A1	; 0x8001a1 <__data_end+0x1>
    1c74:	e0 90 a2 01 	lds	r14, 0x01A2	; 0x8001a2 <__data_end+0x2>
    1c78:	f0 90 a3 01 	lds	r15, 0x01A3	; 0x8001a3 <__data_end+0x3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	8c 19       	sub	r24, r12
    1c82:	9d 09       	sbc	r25, r13
    1c84:	ae 09       	sbc	r26, r14
    1c86:	bf 09       	sbc	r27, r15
    1c88:	80 3a       	cpi	r24, 0xA0	; 160
    1c8a:	9f 40       	sbci	r25, 0x0F	; 15
    1c8c:	a1 05       	cpc	r26, r1
    1c8e:	b1 05       	cpc	r27, r1
    1c90:	58 f3       	brcs	.-42     	; 0x1c68 <loop+0x60c>
  dt = (double)(micros() - inner_loop_timer) / 1000000;
    1c92:	0e 94 83 15 	call	0x2b06	; 0x2b06 <micros>
    1c96:	c0 90 a0 01 	lds	r12, 0x01A0	; 0x8001a0 <__data_end>
    1c9a:	d0 90 a1 01 	lds	r13, 0x01A1	; 0x8001a1 <__data_end+0x1>
    1c9e:	e0 90 a2 01 	lds	r14, 0x01A2	; 0x8001a2 <__data_end+0x2>
    1ca2:	f0 90 a3 01 	lds	r15, 0x01A3	; 0x8001a3 <__data_end+0x3>
    1ca6:	6c 19       	sub	r22, r12
    1ca8:	7d 09       	sbc	r23, r13
    1caa:	8e 09       	sbc	r24, r14
    1cac:	9f 09       	sbc	r25, r15
    1cae:	0e 94 0e 10 	call	0x201c	; 0x201c <__floatunsisf>
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	34 e2       	ldi	r19, 0x24	; 36
    1cb6:	44 e7       	ldi	r20, 0x74	; 116
    1cb8:	59 e4       	ldi	r21, 0x49	; 73
    1cba:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__divsf3>
    1cbe:	60 93 a4 01 	sts	0x01A4, r22	; 0x8001a4 <dt>
    1cc2:	70 93 a5 01 	sts	0x01A5, r23	; 0x8001a5 <dt+0x1>
    1cc6:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <dt+0x2>
    1cca:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <dt+0x3>
  //Serial.println(dt * 1000000);
  inner_loop_timer = micros();
    1cce:	0e 94 83 15 	call	0x2b06	; 0x2b06 <micros>
    1cd2:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <__data_end>
    1cd6:	70 93 a1 01 	sts	0x01A1, r23	; 0x8001a1 <__data_end+0x1>
    1cda:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end+0x2>
    1cde:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <__data_end+0x3>
}
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	ff 90       	pop	r15
    1cec:	ef 90       	pop	r14
    1cee:	df 90       	pop	r13
    1cf0:	cf 90       	pop	r12
    1cf2:	bf 90       	pop	r11
    1cf4:	af 90       	pop	r10
    1cf6:	9f 90       	pop	r9
    1cf8:	8f 90       	pop	r8
    1cfa:	7f 90       	pop	r7
    1cfc:	6f 90       	pop	r6
    1cfe:	5f 90       	pop	r5
    1d00:	4f 90       	pop	r4
    1d02:	08 95       	ret

00001d04 <__subsf3>:
    1d04:	50 58       	subi	r21, 0x80	; 128

00001d06 <__addsf3>:
    1d06:	bb 27       	eor	r27, r27
    1d08:	aa 27       	eor	r26, r26
    1d0a:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__addsf3x>
    1d0e:	0c 94 ad 10 	jmp	0x215a	; 0x215a <__fp_round>
    1d12:	0e 94 9f 10 	call	0x213e	; 0x213e <__fp_pscA>
    1d16:	38 f0       	brcs	.+14     	; 0x1d26 <__addsf3+0x20>
    1d18:	0e 94 a6 10 	call	0x214c	; 0x214c <__fp_pscB>
    1d1c:	20 f0       	brcs	.+8      	; 0x1d26 <__addsf3+0x20>
    1d1e:	39 f4       	brne	.+14     	; 0x1d2e <__addsf3+0x28>
    1d20:	9f 3f       	cpi	r25, 0xFF	; 255
    1d22:	19 f4       	brne	.+6      	; 0x1d2a <__addsf3+0x24>
    1d24:	26 f4       	brtc	.+8      	; 0x1d2e <__addsf3+0x28>
    1d26:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <__fp_nan>
    1d2a:	0e f4       	brtc	.+2      	; 0x1d2e <__addsf3+0x28>
    1d2c:	e0 95       	com	r30
    1d2e:	e7 fb       	bst	r30, 7
    1d30:	0c 94 6f 10 	jmp	0x20de	; 0x20de <__fp_inf>

00001d34 <__addsf3x>:
    1d34:	e9 2f       	mov	r30, r25
    1d36:	0e 94 be 10 	call	0x217c	; 0x217c <__fp_split3>
    1d3a:	58 f3       	brcs	.-42     	; 0x1d12 <__addsf3+0xc>
    1d3c:	ba 17       	cp	r27, r26
    1d3e:	62 07       	cpc	r22, r18
    1d40:	73 07       	cpc	r23, r19
    1d42:	84 07       	cpc	r24, r20
    1d44:	95 07       	cpc	r25, r21
    1d46:	20 f0       	brcs	.+8      	; 0x1d50 <__addsf3x+0x1c>
    1d48:	79 f4       	brne	.+30     	; 0x1d68 <__addsf3x+0x34>
    1d4a:	a6 f5       	brtc	.+104    	; 0x1db4 <__addsf3x+0x80>
    1d4c:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__fp_zero>
    1d50:	0e f4       	brtc	.+2      	; 0x1d54 <__addsf3x+0x20>
    1d52:	e0 95       	com	r30
    1d54:	0b 2e       	mov	r0, r27
    1d56:	ba 2f       	mov	r27, r26
    1d58:	a0 2d       	mov	r26, r0
    1d5a:	0b 01       	movw	r0, r22
    1d5c:	b9 01       	movw	r22, r18
    1d5e:	90 01       	movw	r18, r0
    1d60:	0c 01       	movw	r0, r24
    1d62:	ca 01       	movw	r24, r20
    1d64:	a0 01       	movw	r20, r0
    1d66:	11 24       	eor	r1, r1
    1d68:	ff 27       	eor	r31, r31
    1d6a:	59 1b       	sub	r21, r25
    1d6c:	99 f0       	breq	.+38     	; 0x1d94 <__addsf3x+0x60>
    1d6e:	59 3f       	cpi	r21, 0xF9	; 249
    1d70:	50 f4       	brcc	.+20     	; 0x1d86 <__addsf3x+0x52>
    1d72:	50 3e       	cpi	r21, 0xE0	; 224
    1d74:	68 f1       	brcs	.+90     	; 0x1dd0 <__addsf3x+0x9c>
    1d76:	1a 16       	cp	r1, r26
    1d78:	f0 40       	sbci	r31, 0x00	; 0
    1d7a:	a2 2f       	mov	r26, r18
    1d7c:	23 2f       	mov	r18, r19
    1d7e:	34 2f       	mov	r19, r20
    1d80:	44 27       	eor	r20, r20
    1d82:	58 5f       	subi	r21, 0xF8	; 248
    1d84:	f3 cf       	rjmp	.-26     	; 0x1d6c <__addsf3x+0x38>
    1d86:	46 95       	lsr	r20
    1d88:	37 95       	ror	r19
    1d8a:	27 95       	ror	r18
    1d8c:	a7 95       	ror	r26
    1d8e:	f0 40       	sbci	r31, 0x00	; 0
    1d90:	53 95       	inc	r21
    1d92:	c9 f7       	brne	.-14     	; 0x1d86 <__addsf3x+0x52>
    1d94:	7e f4       	brtc	.+30     	; 0x1db4 <__addsf3x+0x80>
    1d96:	1f 16       	cp	r1, r31
    1d98:	ba 0b       	sbc	r27, r26
    1d9a:	62 0b       	sbc	r22, r18
    1d9c:	73 0b       	sbc	r23, r19
    1d9e:	84 0b       	sbc	r24, r20
    1da0:	ba f0       	brmi	.+46     	; 0x1dd0 <__addsf3x+0x9c>
    1da2:	91 50       	subi	r25, 0x01	; 1
    1da4:	a1 f0       	breq	.+40     	; 0x1dce <__addsf3x+0x9a>
    1da6:	ff 0f       	add	r31, r31
    1da8:	bb 1f       	adc	r27, r27
    1daa:	66 1f       	adc	r22, r22
    1dac:	77 1f       	adc	r23, r23
    1dae:	88 1f       	adc	r24, r24
    1db0:	c2 f7       	brpl	.-16     	; 0x1da2 <__addsf3x+0x6e>
    1db2:	0e c0       	rjmp	.+28     	; 0x1dd0 <__addsf3x+0x9c>
    1db4:	ba 0f       	add	r27, r26
    1db6:	62 1f       	adc	r22, r18
    1db8:	73 1f       	adc	r23, r19
    1dba:	84 1f       	adc	r24, r20
    1dbc:	48 f4       	brcc	.+18     	; 0x1dd0 <__addsf3x+0x9c>
    1dbe:	87 95       	ror	r24
    1dc0:	77 95       	ror	r23
    1dc2:	67 95       	ror	r22
    1dc4:	b7 95       	ror	r27
    1dc6:	f7 95       	ror	r31
    1dc8:	9e 3f       	cpi	r25, 0xFE	; 254
    1dca:	08 f0       	brcs	.+2      	; 0x1dce <__addsf3x+0x9a>
    1dcc:	b0 cf       	rjmp	.-160    	; 0x1d2e <__addsf3+0x28>
    1dce:	93 95       	inc	r25
    1dd0:	88 0f       	add	r24, r24
    1dd2:	08 f0       	brcs	.+2      	; 0x1dd6 <__addsf3x+0xa2>
    1dd4:	99 27       	eor	r25, r25
    1dd6:	ee 0f       	add	r30, r30
    1dd8:	97 95       	ror	r25
    1dda:	87 95       	ror	r24
    1ddc:	08 95       	ret
    1dde:	0e 94 9f 10 	call	0x213e	; 0x213e <__fp_pscA>
    1de2:	60 f0       	brcs	.+24     	; 0x1dfc <__addsf3x+0xc8>
    1de4:	80 e8       	ldi	r24, 0x80	; 128
    1de6:	91 e0       	ldi	r25, 0x01	; 1
    1de8:	09 f4       	brne	.+2      	; 0x1dec <__addsf3x+0xb8>
    1dea:	9e ef       	ldi	r25, 0xFE	; 254
    1dec:	0e 94 a6 10 	call	0x214c	; 0x214c <__fp_pscB>
    1df0:	28 f0       	brcs	.+10     	; 0x1dfc <__addsf3x+0xc8>
    1df2:	40 e8       	ldi	r20, 0x80	; 128
    1df4:	51 e0       	ldi	r21, 0x01	; 1
    1df6:	71 f4       	brne	.+28     	; 0x1e14 <atan2+0x10>
    1df8:	5e ef       	ldi	r21, 0xFE	; 254
    1dfa:	0c c0       	rjmp	.+24     	; 0x1e14 <atan2+0x10>
    1dfc:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <__fp_nan>
    1e00:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__fp_zero>

00001e04 <atan2>:
    1e04:	e9 2f       	mov	r30, r25
    1e06:	e0 78       	andi	r30, 0x80	; 128
    1e08:	0e 94 be 10 	call	0x217c	; 0x217c <__fp_split3>
    1e0c:	40 f3       	brcs	.-48     	; 0x1dde <__addsf3x+0xaa>
    1e0e:	09 2e       	mov	r0, r25
    1e10:	05 2a       	or	r0, r21
    1e12:	b1 f3       	breq	.-20     	; 0x1e00 <__addsf3x+0xcc>
    1e14:	26 17       	cp	r18, r22
    1e16:	37 07       	cpc	r19, r23
    1e18:	48 07       	cpc	r20, r24
    1e1a:	59 07       	cpc	r21, r25
    1e1c:	38 f0       	brcs	.+14     	; 0x1e2c <atan2+0x28>
    1e1e:	0e 2e       	mov	r0, r30
    1e20:	07 f8       	bld	r0, 7
    1e22:	e0 25       	eor	r30, r0
    1e24:	69 f0       	breq	.+26     	; 0x1e40 <atan2+0x3c>
    1e26:	e0 25       	eor	r30, r0
    1e28:	e0 64       	ori	r30, 0x40	; 64
    1e2a:	0a c0       	rjmp	.+20     	; 0x1e40 <atan2+0x3c>
    1e2c:	ef 63       	ori	r30, 0x3F	; 63
    1e2e:	07 f8       	bld	r0, 7
    1e30:	00 94       	com	r0
    1e32:	07 fa       	bst	r0, 7
    1e34:	db 01       	movw	r26, r22
    1e36:	b9 01       	movw	r22, r18
    1e38:	9d 01       	movw	r18, r26
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	ca 01       	movw	r24, r20
    1e3e:	ad 01       	movw	r20, r26
    1e40:	ef 93       	push	r30
    1e42:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <__divsf3_pse>
    1e46:	0e 94 ad 10 	call	0x215a	; 0x215a <__fp_round>
    1e4a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <atan>
    1e4e:	5f 91       	pop	r21
    1e50:	55 23       	and	r21, r21
    1e52:	39 f0       	breq	.+14     	; 0x1e62 <atan2+0x5e>
    1e54:	2b ed       	ldi	r18, 0xDB	; 219
    1e56:	3f e0       	ldi	r19, 0x0F	; 15
    1e58:	49 e4       	ldi	r20, 0x49	; 73
    1e5a:	50 fd       	sbrc	r21, 0
    1e5c:	49 ec       	ldi	r20, 0xC9	; 201
    1e5e:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <__addsf3>
    1e62:	08 95       	ret

00001e64 <atan>:
    1e64:	df 93       	push	r29
    1e66:	dd 27       	eor	r29, r29
    1e68:	b9 2f       	mov	r27, r25
    1e6a:	bf 77       	andi	r27, 0x7F	; 127
    1e6c:	40 e8       	ldi	r20, 0x80	; 128
    1e6e:	5f e3       	ldi	r21, 0x3F	; 63
    1e70:	16 16       	cp	r1, r22
    1e72:	17 06       	cpc	r1, r23
    1e74:	48 07       	cpc	r20, r24
    1e76:	5b 07       	cpc	r21, r27
    1e78:	18 f4       	brcc	.+6      	; 0x1e80 <atan+0x1c>
    1e7a:	d9 2f       	mov	r29, r25
    1e7c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <inverse>
    1e80:	9f 93       	push	r25
    1e82:	8f 93       	push	r24
    1e84:	7f 93       	push	r23
    1e86:	6f 93       	push	r22
    1e88:	0e 94 61 11 	call	0x22c2	; 0x22c2 <square>
    1e8c:	e8 e6       	ldi	r30, 0x68	; 104
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__fp_powser>
    1e94:	0e 94 ad 10 	call	0x215a	; 0x215a <__fp_round>
    1e98:	2f 91       	pop	r18
    1e9a:	3f 91       	pop	r19
    1e9c:	4f 91       	pop	r20
    1e9e:	5f 91       	pop	r21
    1ea0:	0e 94 07 11 	call	0x220e	; 0x220e <__mulsf3x>
    1ea4:	dd 23       	and	r29, r29
    1ea6:	51 f0       	breq	.+20     	; 0x1ebc <atan+0x58>
    1ea8:	90 58       	subi	r25, 0x80	; 128
    1eaa:	a2 ea       	ldi	r26, 0xA2	; 162
    1eac:	2a ed       	ldi	r18, 0xDA	; 218
    1eae:	3f e0       	ldi	r19, 0x0F	; 15
    1eb0:	49 ec       	ldi	r20, 0xC9	; 201
    1eb2:	5f e3       	ldi	r21, 0x3F	; 63
    1eb4:	d0 78       	andi	r29, 0x80	; 128
    1eb6:	5d 27       	eor	r21, r29
    1eb8:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__addsf3x>
    1ebc:	df 91       	pop	r29
    1ebe:	0c 94 ad 10 	jmp	0x215a	; 0x215a <__fp_round>

00001ec2 <__cmpsf2>:
    1ec2:	0e 94 4b 10 	call	0x2096	; 0x2096 <__fp_cmp>
    1ec6:	08 f4       	brcc	.+2      	; 0x1eca <__cmpsf2+0x8>
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	08 95       	ret

00001ecc <__divsf3>:
    1ecc:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__divsf3x>
    1ed0:	0c 94 ad 10 	jmp	0x215a	; 0x215a <__fp_round>
    1ed4:	0e 94 a6 10 	call	0x214c	; 0x214c <__fp_pscB>
    1ed8:	58 f0       	brcs	.+22     	; 0x1ef0 <__divsf3+0x24>
    1eda:	0e 94 9f 10 	call	0x213e	; 0x213e <__fp_pscA>
    1ede:	40 f0       	brcs	.+16     	; 0x1ef0 <__divsf3+0x24>
    1ee0:	29 f4       	brne	.+10     	; 0x1eec <__divsf3+0x20>
    1ee2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ee4:	29 f0       	breq	.+10     	; 0x1ef0 <__divsf3+0x24>
    1ee6:	0c 94 6f 10 	jmp	0x20de	; 0x20de <__fp_inf>
    1eea:	51 11       	cpse	r21, r1
    1eec:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__fp_szero>
    1ef0:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <__fp_nan>

00001ef4 <__divsf3x>:
    1ef4:	0e 94 be 10 	call	0x217c	; 0x217c <__fp_split3>
    1ef8:	68 f3       	brcs	.-38     	; 0x1ed4 <__divsf3+0x8>

00001efa <__divsf3_pse>:
    1efa:	99 23       	and	r25, r25
    1efc:	b1 f3       	breq	.-20     	; 0x1eea <__divsf3+0x1e>
    1efe:	55 23       	and	r21, r21
    1f00:	91 f3       	breq	.-28     	; 0x1ee6 <__divsf3+0x1a>
    1f02:	95 1b       	sub	r25, r21
    1f04:	55 0b       	sbc	r21, r21
    1f06:	bb 27       	eor	r27, r27
    1f08:	aa 27       	eor	r26, r26
    1f0a:	62 17       	cp	r22, r18
    1f0c:	73 07       	cpc	r23, r19
    1f0e:	84 07       	cpc	r24, r20
    1f10:	38 f0       	brcs	.+14     	; 0x1f20 <__divsf3_pse+0x26>
    1f12:	9f 5f       	subi	r25, 0xFF	; 255
    1f14:	5f 4f       	sbci	r21, 0xFF	; 255
    1f16:	22 0f       	add	r18, r18
    1f18:	33 1f       	adc	r19, r19
    1f1a:	44 1f       	adc	r20, r20
    1f1c:	aa 1f       	adc	r26, r26
    1f1e:	a9 f3       	breq	.-22     	; 0x1f0a <__divsf3_pse+0x10>
    1f20:	35 d0       	rcall	.+106    	; 0x1f8c <__divsf3_pse+0x92>
    1f22:	0e 2e       	mov	r0, r30
    1f24:	3a f0       	brmi	.+14     	; 0x1f34 <__divsf3_pse+0x3a>
    1f26:	e0 e8       	ldi	r30, 0x80	; 128
    1f28:	32 d0       	rcall	.+100    	; 0x1f8e <__divsf3_pse+0x94>
    1f2a:	91 50       	subi	r25, 0x01	; 1
    1f2c:	50 40       	sbci	r21, 0x00	; 0
    1f2e:	e6 95       	lsr	r30
    1f30:	00 1c       	adc	r0, r0
    1f32:	ca f7       	brpl	.-14     	; 0x1f26 <__divsf3_pse+0x2c>
    1f34:	2b d0       	rcall	.+86     	; 0x1f8c <__divsf3_pse+0x92>
    1f36:	fe 2f       	mov	r31, r30
    1f38:	29 d0       	rcall	.+82     	; 0x1f8c <__divsf3_pse+0x92>
    1f3a:	66 0f       	add	r22, r22
    1f3c:	77 1f       	adc	r23, r23
    1f3e:	88 1f       	adc	r24, r24
    1f40:	bb 1f       	adc	r27, r27
    1f42:	26 17       	cp	r18, r22
    1f44:	37 07       	cpc	r19, r23
    1f46:	48 07       	cpc	r20, r24
    1f48:	ab 07       	cpc	r26, r27
    1f4a:	b0 e8       	ldi	r27, 0x80	; 128
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <__divsf3_pse+0x56>
    1f4e:	bb 0b       	sbc	r27, r27
    1f50:	80 2d       	mov	r24, r0
    1f52:	bf 01       	movw	r22, r30
    1f54:	ff 27       	eor	r31, r31
    1f56:	93 58       	subi	r25, 0x83	; 131
    1f58:	5f 4f       	sbci	r21, 0xFF	; 255
    1f5a:	3a f0       	brmi	.+14     	; 0x1f6a <__divsf3_pse+0x70>
    1f5c:	9e 3f       	cpi	r25, 0xFE	; 254
    1f5e:	51 05       	cpc	r21, r1
    1f60:	78 f0       	brcs	.+30     	; 0x1f80 <__divsf3_pse+0x86>
    1f62:	0c 94 6f 10 	jmp	0x20de	; 0x20de <__fp_inf>
    1f66:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__fp_szero>
    1f6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f6c:	e4 f3       	brlt	.-8      	; 0x1f66 <__divsf3_pse+0x6c>
    1f6e:	98 3e       	cpi	r25, 0xE8	; 232
    1f70:	d4 f3       	brlt	.-12     	; 0x1f66 <__divsf3_pse+0x6c>
    1f72:	86 95       	lsr	r24
    1f74:	77 95       	ror	r23
    1f76:	67 95       	ror	r22
    1f78:	b7 95       	ror	r27
    1f7a:	f7 95       	ror	r31
    1f7c:	9f 5f       	subi	r25, 0xFF	; 255
    1f7e:	c9 f7       	brne	.-14     	; 0x1f72 <__divsf3_pse+0x78>
    1f80:	88 0f       	add	r24, r24
    1f82:	91 1d       	adc	r25, r1
    1f84:	96 95       	lsr	r25
    1f86:	87 95       	ror	r24
    1f88:	97 f9       	bld	r25, 7
    1f8a:	08 95       	ret
    1f8c:	e1 e0       	ldi	r30, 0x01	; 1
    1f8e:	66 0f       	add	r22, r22
    1f90:	77 1f       	adc	r23, r23
    1f92:	88 1f       	adc	r24, r24
    1f94:	bb 1f       	adc	r27, r27
    1f96:	62 17       	cp	r22, r18
    1f98:	73 07       	cpc	r23, r19
    1f9a:	84 07       	cpc	r24, r20
    1f9c:	ba 07       	cpc	r27, r26
    1f9e:	20 f0       	brcs	.+8      	; 0x1fa8 <__divsf3_pse+0xae>
    1fa0:	62 1b       	sub	r22, r18
    1fa2:	73 0b       	sbc	r23, r19
    1fa4:	84 0b       	sbc	r24, r20
    1fa6:	ba 0b       	sbc	r27, r26
    1fa8:	ee 1f       	adc	r30, r30
    1faa:	88 f7       	brcc	.-30     	; 0x1f8e <__divsf3_pse+0x94>
    1fac:	e0 95       	com	r30
    1fae:	08 95       	ret

00001fb0 <__fixsfsi>:
    1fb0:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__fixunssfsi>
    1fb4:	68 94       	set
    1fb6:	b1 11       	cpse	r27, r1
    1fb8:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__fp_szero>
    1fbc:	08 95       	ret

00001fbe <__fixunssfsi>:
    1fbe:	0e 94 c6 10 	call	0x218c	; 0x218c <__fp_splitA>
    1fc2:	88 f0       	brcs	.+34     	; 0x1fe6 <__fixunssfsi+0x28>
    1fc4:	9f 57       	subi	r25, 0x7F	; 127
    1fc6:	98 f0       	brcs	.+38     	; 0x1fee <__fixunssfsi+0x30>
    1fc8:	b9 2f       	mov	r27, r25
    1fca:	99 27       	eor	r25, r25
    1fcc:	b7 51       	subi	r27, 0x17	; 23
    1fce:	b0 f0       	brcs	.+44     	; 0x1ffc <__fixunssfsi+0x3e>
    1fd0:	e1 f0       	breq	.+56     	; 0x200a <__fixunssfsi+0x4c>
    1fd2:	66 0f       	add	r22, r22
    1fd4:	77 1f       	adc	r23, r23
    1fd6:	88 1f       	adc	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	1a f0       	brmi	.+6      	; 0x1fe2 <__fixunssfsi+0x24>
    1fdc:	ba 95       	dec	r27
    1fde:	c9 f7       	brne	.-14     	; 0x1fd2 <__fixunssfsi+0x14>
    1fe0:	14 c0       	rjmp	.+40     	; 0x200a <__fixunssfsi+0x4c>
    1fe2:	b1 30       	cpi	r27, 0x01	; 1
    1fe4:	91 f0       	breq	.+36     	; 0x200a <__fixunssfsi+0x4c>
    1fe6:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__fp_zero>
    1fea:	b1 e0       	ldi	r27, 0x01	; 1
    1fec:	08 95       	ret
    1fee:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__fp_zero>
    1ff2:	67 2f       	mov	r22, r23
    1ff4:	78 2f       	mov	r23, r24
    1ff6:	88 27       	eor	r24, r24
    1ff8:	b8 5f       	subi	r27, 0xF8	; 248
    1ffa:	39 f0       	breq	.+14     	; 0x200a <__fixunssfsi+0x4c>
    1ffc:	b9 3f       	cpi	r27, 0xF9	; 249
    1ffe:	cc f3       	brlt	.-14     	; 0x1ff2 <__fixunssfsi+0x34>
    2000:	86 95       	lsr	r24
    2002:	77 95       	ror	r23
    2004:	67 95       	ror	r22
    2006:	b3 95       	inc	r27
    2008:	d9 f7       	brne	.-10     	; 0x2000 <__fixunssfsi+0x42>
    200a:	3e f4       	brtc	.+14     	; 0x201a <__fixunssfsi+0x5c>
    200c:	90 95       	com	r25
    200e:	80 95       	com	r24
    2010:	70 95       	com	r23
    2012:	61 95       	neg	r22
    2014:	7f 4f       	sbci	r23, 0xFF	; 255
    2016:	8f 4f       	sbci	r24, 0xFF	; 255
    2018:	9f 4f       	sbci	r25, 0xFF	; 255
    201a:	08 95       	ret

0000201c <__floatunsisf>:
    201c:	e8 94       	clt
    201e:	09 c0       	rjmp	.+18     	; 0x2032 <__floatsisf+0x12>

00002020 <__floatsisf>:
    2020:	97 fb       	bst	r25, 7
    2022:	3e f4       	brtc	.+14     	; 0x2032 <__floatsisf+0x12>
    2024:	90 95       	com	r25
    2026:	80 95       	com	r24
    2028:	70 95       	com	r23
    202a:	61 95       	neg	r22
    202c:	7f 4f       	sbci	r23, 0xFF	; 255
    202e:	8f 4f       	sbci	r24, 0xFF	; 255
    2030:	9f 4f       	sbci	r25, 0xFF	; 255
    2032:	99 23       	and	r25, r25
    2034:	a9 f0       	breq	.+42     	; 0x2060 <__floatsisf+0x40>
    2036:	f9 2f       	mov	r31, r25
    2038:	96 e9       	ldi	r25, 0x96	; 150
    203a:	bb 27       	eor	r27, r27
    203c:	93 95       	inc	r25
    203e:	f6 95       	lsr	r31
    2040:	87 95       	ror	r24
    2042:	77 95       	ror	r23
    2044:	67 95       	ror	r22
    2046:	b7 95       	ror	r27
    2048:	f1 11       	cpse	r31, r1
    204a:	f8 cf       	rjmp	.-16     	; 0x203c <__floatsisf+0x1c>
    204c:	fa f4       	brpl	.+62     	; 0x208c <__floatsisf+0x6c>
    204e:	bb 0f       	add	r27, r27
    2050:	11 f4       	brne	.+4      	; 0x2056 <__floatsisf+0x36>
    2052:	60 ff       	sbrs	r22, 0
    2054:	1b c0       	rjmp	.+54     	; 0x208c <__floatsisf+0x6c>
    2056:	6f 5f       	subi	r22, 0xFF	; 255
    2058:	7f 4f       	sbci	r23, 0xFF	; 255
    205a:	8f 4f       	sbci	r24, 0xFF	; 255
    205c:	9f 4f       	sbci	r25, 0xFF	; 255
    205e:	16 c0       	rjmp	.+44     	; 0x208c <__floatsisf+0x6c>
    2060:	88 23       	and	r24, r24
    2062:	11 f0       	breq	.+4      	; 0x2068 <__floatsisf+0x48>
    2064:	96 e9       	ldi	r25, 0x96	; 150
    2066:	11 c0       	rjmp	.+34     	; 0x208a <__floatsisf+0x6a>
    2068:	77 23       	and	r23, r23
    206a:	21 f0       	breq	.+8      	; 0x2074 <__floatsisf+0x54>
    206c:	9e e8       	ldi	r25, 0x8E	; 142
    206e:	87 2f       	mov	r24, r23
    2070:	76 2f       	mov	r23, r22
    2072:	05 c0       	rjmp	.+10     	; 0x207e <__floatsisf+0x5e>
    2074:	66 23       	and	r22, r22
    2076:	71 f0       	breq	.+28     	; 0x2094 <__floatsisf+0x74>
    2078:	96 e8       	ldi	r25, 0x86	; 134
    207a:	86 2f       	mov	r24, r22
    207c:	70 e0       	ldi	r23, 0x00	; 0
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	2a f0       	brmi	.+10     	; 0x208c <__floatsisf+0x6c>
    2082:	9a 95       	dec	r25
    2084:	66 0f       	add	r22, r22
    2086:	77 1f       	adc	r23, r23
    2088:	88 1f       	adc	r24, r24
    208a:	da f7       	brpl	.-10     	; 0x2082 <__floatsisf+0x62>
    208c:	88 0f       	add	r24, r24
    208e:	96 95       	lsr	r25
    2090:	87 95       	ror	r24
    2092:	97 f9       	bld	r25, 7
    2094:	08 95       	ret

00002096 <__fp_cmp>:
    2096:	99 0f       	add	r25, r25
    2098:	00 08       	sbc	r0, r0
    209a:	55 0f       	add	r21, r21
    209c:	aa 0b       	sbc	r26, r26
    209e:	e0 e8       	ldi	r30, 0x80	; 128
    20a0:	fe ef       	ldi	r31, 0xFE	; 254
    20a2:	16 16       	cp	r1, r22
    20a4:	17 06       	cpc	r1, r23
    20a6:	e8 07       	cpc	r30, r24
    20a8:	f9 07       	cpc	r31, r25
    20aa:	c0 f0       	brcs	.+48     	; 0x20dc <__fp_cmp+0x46>
    20ac:	12 16       	cp	r1, r18
    20ae:	13 06       	cpc	r1, r19
    20b0:	e4 07       	cpc	r30, r20
    20b2:	f5 07       	cpc	r31, r21
    20b4:	98 f0       	brcs	.+38     	; 0x20dc <__fp_cmp+0x46>
    20b6:	62 1b       	sub	r22, r18
    20b8:	73 0b       	sbc	r23, r19
    20ba:	84 0b       	sbc	r24, r20
    20bc:	95 0b       	sbc	r25, r21
    20be:	39 f4       	brne	.+14     	; 0x20ce <__fp_cmp+0x38>
    20c0:	0a 26       	eor	r0, r26
    20c2:	61 f0       	breq	.+24     	; 0x20dc <__fp_cmp+0x46>
    20c4:	23 2b       	or	r18, r19
    20c6:	24 2b       	or	r18, r20
    20c8:	25 2b       	or	r18, r21
    20ca:	21 f4       	brne	.+8      	; 0x20d4 <__fp_cmp+0x3e>
    20cc:	08 95       	ret
    20ce:	0a 26       	eor	r0, r26
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <__fp_cmp+0x3e>
    20d2:	a1 40       	sbci	r26, 0x01	; 1
    20d4:	a6 95       	lsr	r26
    20d6:	8f ef       	ldi	r24, 0xFF	; 255
    20d8:	81 1d       	adc	r24, r1
    20da:	81 1d       	adc	r24, r1
    20dc:	08 95       	ret

000020de <__fp_inf>:
    20de:	97 f9       	bld	r25, 7
    20e0:	9f 67       	ori	r25, 0x7F	; 127
    20e2:	80 e8       	ldi	r24, 0x80	; 128
    20e4:	70 e0       	ldi	r23, 0x00	; 0
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	08 95       	ret

000020ea <__fp_nan>:
    20ea:	9f ef       	ldi	r25, 0xFF	; 255
    20ec:	80 ec       	ldi	r24, 0xC0	; 192
    20ee:	08 95       	ret

000020f0 <__fp_powser>:
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	1f 93       	push	r17
    20f6:	0f 93       	push	r16
    20f8:	ff 92       	push	r15
    20fa:	ef 92       	push	r14
    20fc:	df 92       	push	r13
    20fe:	7b 01       	movw	r14, r22
    2100:	8c 01       	movw	r16, r24
    2102:	68 94       	set
    2104:	06 c0       	rjmp	.+12     	; 0x2112 <__fp_powser+0x22>
    2106:	da 2e       	mov	r13, r26
    2108:	ef 01       	movw	r28, r30
    210a:	0e 94 07 11 	call	0x220e	; 0x220e <__mulsf3x>
    210e:	fe 01       	movw	r30, r28
    2110:	e8 94       	clt
    2112:	a5 91       	lpm	r26, Z+
    2114:	25 91       	lpm	r18, Z+
    2116:	35 91       	lpm	r19, Z+
    2118:	45 91       	lpm	r20, Z+
    211a:	55 91       	lpm	r21, Z+
    211c:	a6 f3       	brts	.-24     	; 0x2106 <__fp_powser+0x16>
    211e:	ef 01       	movw	r28, r30
    2120:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <__addsf3x>
    2124:	fe 01       	movw	r30, r28
    2126:	97 01       	movw	r18, r14
    2128:	a8 01       	movw	r20, r16
    212a:	da 94       	dec	r13
    212c:	69 f7       	brne	.-38     	; 0x2108 <__fp_powser+0x18>
    212e:	df 90       	pop	r13
    2130:	ef 90       	pop	r14
    2132:	ff 90       	pop	r15
    2134:	0f 91       	pop	r16
    2136:	1f 91       	pop	r17
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	08 95       	ret

0000213e <__fp_pscA>:
    213e:	00 24       	eor	r0, r0
    2140:	0a 94       	dec	r0
    2142:	16 16       	cp	r1, r22
    2144:	17 06       	cpc	r1, r23
    2146:	18 06       	cpc	r1, r24
    2148:	09 06       	cpc	r0, r25
    214a:	08 95       	ret

0000214c <__fp_pscB>:
    214c:	00 24       	eor	r0, r0
    214e:	0a 94       	dec	r0
    2150:	12 16       	cp	r1, r18
    2152:	13 06       	cpc	r1, r19
    2154:	14 06       	cpc	r1, r20
    2156:	05 06       	cpc	r0, r21
    2158:	08 95       	ret

0000215a <__fp_round>:
    215a:	09 2e       	mov	r0, r25
    215c:	03 94       	inc	r0
    215e:	00 0c       	add	r0, r0
    2160:	11 f4       	brne	.+4      	; 0x2166 <__fp_round+0xc>
    2162:	88 23       	and	r24, r24
    2164:	52 f0       	brmi	.+20     	; 0x217a <__fp_round+0x20>
    2166:	bb 0f       	add	r27, r27
    2168:	40 f4       	brcc	.+16     	; 0x217a <__fp_round+0x20>
    216a:	bf 2b       	or	r27, r31
    216c:	11 f4       	brne	.+4      	; 0x2172 <__fp_round+0x18>
    216e:	60 ff       	sbrs	r22, 0
    2170:	04 c0       	rjmp	.+8      	; 0x217a <__fp_round+0x20>
    2172:	6f 5f       	subi	r22, 0xFF	; 255
    2174:	7f 4f       	sbci	r23, 0xFF	; 255
    2176:	8f 4f       	sbci	r24, 0xFF	; 255
    2178:	9f 4f       	sbci	r25, 0xFF	; 255
    217a:	08 95       	ret

0000217c <__fp_split3>:
    217c:	57 fd       	sbrc	r21, 7
    217e:	90 58       	subi	r25, 0x80	; 128
    2180:	44 0f       	add	r20, r20
    2182:	55 1f       	adc	r21, r21
    2184:	59 f0       	breq	.+22     	; 0x219c <__fp_splitA+0x10>
    2186:	5f 3f       	cpi	r21, 0xFF	; 255
    2188:	71 f0       	breq	.+28     	; 0x21a6 <__fp_splitA+0x1a>
    218a:	47 95       	ror	r20

0000218c <__fp_splitA>:
    218c:	88 0f       	add	r24, r24
    218e:	97 fb       	bst	r25, 7
    2190:	99 1f       	adc	r25, r25
    2192:	61 f0       	breq	.+24     	; 0x21ac <__fp_splitA+0x20>
    2194:	9f 3f       	cpi	r25, 0xFF	; 255
    2196:	79 f0       	breq	.+30     	; 0x21b6 <__fp_splitA+0x2a>
    2198:	87 95       	ror	r24
    219a:	08 95       	ret
    219c:	12 16       	cp	r1, r18
    219e:	13 06       	cpc	r1, r19
    21a0:	14 06       	cpc	r1, r20
    21a2:	55 1f       	adc	r21, r21
    21a4:	f2 cf       	rjmp	.-28     	; 0x218a <__fp_split3+0xe>
    21a6:	46 95       	lsr	r20
    21a8:	f1 df       	rcall	.-30     	; 0x218c <__fp_splitA>
    21aa:	08 c0       	rjmp	.+16     	; 0x21bc <__fp_splitA+0x30>
    21ac:	16 16       	cp	r1, r22
    21ae:	17 06       	cpc	r1, r23
    21b0:	18 06       	cpc	r1, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	f1 cf       	rjmp	.-30     	; 0x2198 <__fp_splitA+0xc>
    21b6:	86 95       	lsr	r24
    21b8:	71 05       	cpc	r23, r1
    21ba:	61 05       	cpc	r22, r1
    21bc:	08 94       	sec
    21be:	08 95       	ret

000021c0 <__fp_zero>:
    21c0:	e8 94       	clt

000021c2 <__fp_szero>:
    21c2:	bb 27       	eor	r27, r27
    21c4:	66 27       	eor	r22, r22
    21c6:	77 27       	eor	r23, r23
    21c8:	cb 01       	movw	r24, r22
    21ca:	97 f9       	bld	r25, 7
    21cc:	08 95       	ret

000021ce <__gesf2>:
    21ce:	0e 94 4b 10 	call	0x2096	; 0x2096 <__fp_cmp>
    21d2:	08 f4       	brcc	.+2      	; 0x21d6 <__gesf2+0x8>
    21d4:	8f ef       	ldi	r24, 0xFF	; 255
    21d6:	08 95       	ret

000021d8 <inverse>:
    21d8:	9b 01       	movw	r18, r22
    21da:	ac 01       	movw	r20, r24
    21dc:	60 e0       	ldi	r22, 0x00	; 0
    21de:	70 e0       	ldi	r23, 0x00	; 0
    21e0:	80 e8       	ldi	r24, 0x80	; 128
    21e2:	9f e3       	ldi	r25, 0x3F	; 63
    21e4:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__divsf3>

000021e8 <__mulsf3>:
    21e8:	0e 94 07 11 	call	0x220e	; 0x220e <__mulsf3x>
    21ec:	0c 94 ad 10 	jmp	0x215a	; 0x215a <__fp_round>
    21f0:	0e 94 9f 10 	call	0x213e	; 0x213e <__fp_pscA>
    21f4:	38 f0       	brcs	.+14     	; 0x2204 <__mulsf3+0x1c>
    21f6:	0e 94 a6 10 	call	0x214c	; 0x214c <__fp_pscB>
    21fa:	20 f0       	brcs	.+8      	; 0x2204 <__mulsf3+0x1c>
    21fc:	95 23       	and	r25, r21
    21fe:	11 f0       	breq	.+4      	; 0x2204 <__mulsf3+0x1c>
    2200:	0c 94 6f 10 	jmp	0x20de	; 0x20de <__fp_inf>
    2204:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <__fp_nan>
    2208:	11 24       	eor	r1, r1
    220a:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__fp_szero>

0000220e <__mulsf3x>:
    220e:	0e 94 be 10 	call	0x217c	; 0x217c <__fp_split3>
    2212:	70 f3       	brcs	.-36     	; 0x21f0 <__mulsf3+0x8>

00002214 <__mulsf3_pse>:
    2214:	95 9f       	mul	r25, r21
    2216:	c1 f3       	breq	.-16     	; 0x2208 <__mulsf3+0x20>
    2218:	95 0f       	add	r25, r21
    221a:	50 e0       	ldi	r21, 0x00	; 0
    221c:	55 1f       	adc	r21, r21
    221e:	62 9f       	mul	r22, r18
    2220:	f0 01       	movw	r30, r0
    2222:	72 9f       	mul	r23, r18
    2224:	bb 27       	eor	r27, r27
    2226:	f0 0d       	add	r31, r0
    2228:	b1 1d       	adc	r27, r1
    222a:	63 9f       	mul	r22, r19
    222c:	aa 27       	eor	r26, r26
    222e:	f0 0d       	add	r31, r0
    2230:	b1 1d       	adc	r27, r1
    2232:	aa 1f       	adc	r26, r26
    2234:	64 9f       	mul	r22, r20
    2236:	66 27       	eor	r22, r22
    2238:	b0 0d       	add	r27, r0
    223a:	a1 1d       	adc	r26, r1
    223c:	66 1f       	adc	r22, r22
    223e:	82 9f       	mul	r24, r18
    2240:	22 27       	eor	r18, r18
    2242:	b0 0d       	add	r27, r0
    2244:	a1 1d       	adc	r26, r1
    2246:	62 1f       	adc	r22, r18
    2248:	73 9f       	mul	r23, r19
    224a:	b0 0d       	add	r27, r0
    224c:	a1 1d       	adc	r26, r1
    224e:	62 1f       	adc	r22, r18
    2250:	83 9f       	mul	r24, r19
    2252:	a0 0d       	add	r26, r0
    2254:	61 1d       	adc	r22, r1
    2256:	22 1f       	adc	r18, r18
    2258:	74 9f       	mul	r23, r20
    225a:	33 27       	eor	r19, r19
    225c:	a0 0d       	add	r26, r0
    225e:	61 1d       	adc	r22, r1
    2260:	23 1f       	adc	r18, r19
    2262:	84 9f       	mul	r24, r20
    2264:	60 0d       	add	r22, r0
    2266:	21 1d       	adc	r18, r1
    2268:	82 2f       	mov	r24, r18
    226a:	76 2f       	mov	r23, r22
    226c:	6a 2f       	mov	r22, r26
    226e:	11 24       	eor	r1, r1
    2270:	9f 57       	subi	r25, 0x7F	; 127
    2272:	50 40       	sbci	r21, 0x00	; 0
    2274:	9a f0       	brmi	.+38     	; 0x229c <__mulsf3_pse+0x88>
    2276:	f1 f0       	breq	.+60     	; 0x22b4 <__mulsf3_pse+0xa0>
    2278:	88 23       	and	r24, r24
    227a:	4a f0       	brmi	.+18     	; 0x228e <__mulsf3_pse+0x7a>
    227c:	ee 0f       	add	r30, r30
    227e:	ff 1f       	adc	r31, r31
    2280:	bb 1f       	adc	r27, r27
    2282:	66 1f       	adc	r22, r22
    2284:	77 1f       	adc	r23, r23
    2286:	88 1f       	adc	r24, r24
    2288:	91 50       	subi	r25, 0x01	; 1
    228a:	50 40       	sbci	r21, 0x00	; 0
    228c:	a9 f7       	brne	.-22     	; 0x2278 <__mulsf3_pse+0x64>
    228e:	9e 3f       	cpi	r25, 0xFE	; 254
    2290:	51 05       	cpc	r21, r1
    2292:	80 f0       	brcs	.+32     	; 0x22b4 <__mulsf3_pse+0xa0>
    2294:	0c 94 6f 10 	jmp	0x20de	; 0x20de <__fp_inf>
    2298:	0c 94 e1 10 	jmp	0x21c2	; 0x21c2 <__fp_szero>
    229c:	5f 3f       	cpi	r21, 0xFF	; 255
    229e:	e4 f3       	brlt	.-8      	; 0x2298 <__mulsf3_pse+0x84>
    22a0:	98 3e       	cpi	r25, 0xE8	; 232
    22a2:	d4 f3       	brlt	.-12     	; 0x2298 <__mulsf3_pse+0x84>
    22a4:	86 95       	lsr	r24
    22a6:	77 95       	ror	r23
    22a8:	67 95       	ror	r22
    22aa:	b7 95       	ror	r27
    22ac:	f7 95       	ror	r31
    22ae:	e7 95       	ror	r30
    22b0:	9f 5f       	subi	r25, 0xFF	; 255
    22b2:	c1 f7       	brne	.-16     	; 0x22a4 <__mulsf3_pse+0x90>
    22b4:	fe 2b       	or	r31, r30
    22b6:	88 0f       	add	r24, r24
    22b8:	91 1d       	adc	r25, r1
    22ba:	96 95       	lsr	r25
    22bc:	87 95       	ror	r24
    22be:	97 f9       	bld	r25, 7
    22c0:	08 95       	ret

000022c2 <square>:
    22c2:	9b 01       	movw	r18, r22
    22c4:	ac 01       	movw	r20, r24
    22c6:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <__mulsf3>

000022ca <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    22ca:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    22cc:	91 8d       	ldd	r25, Z+25	; 0x19
    22ce:	22 8d       	ldd	r18, Z+26	; 0x1a
    22d0:	89 2f       	mov	r24, r25
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	80 5c       	subi	r24, 0xC0	; 192
    22d6:	9f 4f       	sbci	r25, 0xFF	; 255
    22d8:	82 1b       	sub	r24, r18
    22da:	91 09       	sbc	r25, r1
}
    22dc:	8f 73       	andi	r24, 0x3F	; 63
    22de:	99 27       	eor	r25, r25
    22e0:	08 95       	ret

000022e2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    22e2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    22e4:	91 8d       	ldd	r25, Z+25	; 0x19
    22e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    22e8:	98 17       	cp	r25, r24
    22ea:	31 f0       	breq	.+12     	; 0x22f8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    22ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    22ee:	e8 0f       	add	r30, r24
    22f0:	f1 1d       	adc	r31, r1
    22f2:	85 8d       	ldd	r24, Z+29	; 0x1d
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    22f8:	8f ef       	ldi	r24, 0xFF	; 255
    22fa:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    22fc:	08 95       	ret

000022fe <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    22fe:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2300:	91 8d       	ldd	r25, Z+25	; 0x19
    2302:	82 8d       	ldd	r24, Z+26	; 0x1a
    2304:	98 17       	cp	r25, r24
    2306:	61 f0       	breq	.+24     	; 0x2320 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2308:	82 8d       	ldd	r24, Z+26	; 0x1a
    230a:	df 01       	movw	r26, r30
    230c:	a8 0f       	add	r26, r24
    230e:	b1 1d       	adc	r27, r1
    2310:	5d 96       	adiw	r26, 0x1d	; 29
    2312:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2314:	92 8d       	ldd	r25, Z+26	; 0x1a
    2316:	9f 5f       	subi	r25, 0xFF	; 255
    2318:	9f 73       	andi	r25, 0x3F	; 63
    231a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2320:	8f ef       	ldi	r24, 0xFF	; 255
    2322:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2324:	08 95       	ret

00002326 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2326:	88 ee       	ldi	r24, 0xE8	; 232
    2328:	92 e1       	ldi	r25, 0x12	; 18
    232a:	89 2b       	or	r24, r25
    232c:	49 f0       	breq	.+18     	; 0x2340 <_Z14serialEventRunv+0x1a>
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	89 2b       	or	r24, r25
    2334:	29 f0       	breq	.+10     	; 0x2340 <_Z14serialEventRunv+0x1a>
    2336:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <_Z17Serial0_availablev>
    233a:	81 11       	cpse	r24, r1
    233c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2340:	08 95       	ret

00002342 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2342:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2344:	84 8d       	ldd	r24, Z+28	; 0x1c
    2346:	df 01       	movw	r26, r30
    2348:	a8 0f       	add	r26, r24
    234a:	b1 1d       	adc	r27, r1
    234c:	a3 5a       	subi	r26, 0xA3	; 163
    234e:	bf 4f       	sbci	r27, 0xFF	; 255
    2350:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2352:	84 8d       	ldd	r24, Z+28	; 0x1c
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	01 96       	adiw	r24, 0x01	; 1
    2358:	8f 73       	andi	r24, 0x3F	; 63
    235a:	99 27       	eor	r25, r25
    235c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    235e:	a6 89       	ldd	r26, Z+22	; 0x16
    2360:	b7 89       	ldd	r27, Z+23	; 0x17
    2362:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2364:	a0 89       	ldd	r26, Z+16	; 0x10
    2366:	b1 89       	ldd	r27, Z+17	; 0x11
    2368:	8c 91       	ld	r24, X
    236a:	80 64       	ori	r24, 0x40	; 64
    236c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    236e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2370:	84 8d       	ldd	r24, Z+28	; 0x1c
    2372:	98 13       	cpse	r25, r24
    2374:	06 c0       	rjmp	.+12     	; 0x2382 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2376:	02 88       	ldd	r0, Z+18	; 0x12
    2378:	f3 89       	ldd	r31, Z+19	; 0x13
    237a:	e0 2d       	mov	r30, r0
    237c:	80 81       	ld	r24, Z
    237e:	8f 7d       	andi	r24, 0xDF	; 223
    2380:	80 83       	st	Z, r24
    2382:	08 95       	ret

00002384 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2384:	ef 92       	push	r14
    2386:	ff 92       	push	r15
    2388:	0f 93       	push	r16
    238a:	1f 93       	push	r17
    238c:	cf 93       	push	r28
    238e:	df 93       	push	r29
    2390:	ec 01       	movw	r28, r24
  _written = true;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2396:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2398:	8c 8d       	ldd	r24, Y+28	; 0x1c
    239a:	98 13       	cpse	r25, r24
    239c:	05 c0       	rjmp	.+10     	; 0x23a8 <_ZN14HardwareSerial5writeEh+0x24>
    239e:	e8 89       	ldd	r30, Y+16	; 0x10
    23a0:	f9 89       	ldd	r31, Y+17	; 0x11
    23a2:	80 81       	ld	r24, Z
    23a4:	85 fd       	sbrc	r24, 5
    23a6:	24 c0       	rjmp	.+72     	; 0x23f0 <_ZN14HardwareSerial5writeEh+0x6c>
    23a8:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    23aa:	0b 8d       	ldd	r16, Y+27	; 0x1b
    23ac:	10 e0       	ldi	r17, 0x00	; 0
    23ae:	0f 5f       	subi	r16, 0xFF	; 255
    23b0:	1f 4f       	sbci	r17, 0xFF	; 255
    23b2:	0f 73       	andi	r16, 0x3F	; 63
    23b4:	11 27       	eor	r17, r17
    23b6:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    23b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23ba:	e8 12       	cpse	r14, r24
    23bc:	0c c0       	rjmp	.+24     	; 0x23d6 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	07 fc       	sbrc	r0, 7
    23c2:	fa cf       	rjmp	.-12     	; 0x23b8 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    23c4:	e8 89       	ldd	r30, Y+16	; 0x10
    23c6:	f9 89       	ldd	r31, Y+17	; 0x11
    23c8:	80 81       	ld	r24, Z
    23ca:	85 ff       	sbrs	r24, 5
    23cc:	f5 cf       	rjmp	.-22     	; 0x23b8 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    23ce:	ce 01       	movw	r24, r28
    23d0:	0e 94 a1 11 	call	0x2342	; 0x2342 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    23d4:	f1 cf       	rjmp	.-30     	; 0x23b8 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    23d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d8:	fe 01       	movw	r30, r28
    23da:	e8 0f       	add	r30, r24
    23dc:	f1 1d       	adc	r31, r1
    23de:	e3 5a       	subi	r30, 0xA3	; 163
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    23e4:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    23e6:	ea 89       	ldd	r30, Y+18	; 0x12
    23e8:	fb 89       	ldd	r31, Y+19	; 0x13
    23ea:	80 81       	ld	r24, Z
    23ec:	80 62       	ori	r24, 0x20	; 32
    23ee:	07 c0       	rjmp	.+14     	; 0x23fe <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    23f0:	ee 89       	ldd	r30, Y+22	; 0x16
    23f2:	ff 89       	ldd	r31, Y+23	; 0x17
    23f4:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    23f6:	e8 89       	ldd	r30, Y+16	; 0x10
    23f8:	f9 89       	ldd	r31, Y+17	; 0x11
    23fa:	80 81       	ld	r24, Z
    23fc:	80 64       	ori	r24, 0x40	; 64
    23fe:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	ff 90       	pop	r15
    240e:	ef 90       	pop	r14
    2410:	08 95       	ret

00002412 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2418:	88 8d       	ldd	r24, Y+24	; 0x18
    241a:	88 23       	and	r24, r24
    241c:	c9 f0       	breq	.+50     	; 0x2450 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    241e:	ea 89       	ldd	r30, Y+18	; 0x12
    2420:	fb 89       	ldd	r31, Y+19	; 0x13
    2422:	80 81       	ld	r24, Z
    2424:	85 fd       	sbrc	r24, 5
    2426:	05 c0       	rjmp	.+10     	; 0x2432 <_ZN14HardwareSerial5flushEv+0x20>
    2428:	a8 89       	ldd	r26, Y+16	; 0x10
    242a:	b9 89       	ldd	r27, Y+17	; 0x11
    242c:	8c 91       	ld	r24, X
    242e:	86 fd       	sbrc	r24, 6
    2430:	0f c0       	rjmp	.+30     	; 0x2450 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	07 fc       	sbrc	r0, 7
    2436:	f5 cf       	rjmp	.-22     	; 0x2422 <_ZN14HardwareSerial5flushEv+0x10>
    2438:	80 81       	ld	r24, Z
    243a:	85 ff       	sbrs	r24, 5
    243c:	f2 cf       	rjmp	.-28     	; 0x2422 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    243e:	a8 89       	ldd	r26, Y+16	; 0x10
    2440:	b9 89       	ldd	r27, Y+17	; 0x11
    2442:	8c 91       	ld	r24, X
    2444:	85 ff       	sbrs	r24, 5
    2446:	ed cf       	rjmp	.-38     	; 0x2422 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    2448:	ce 01       	movw	r24, r28
    244a:	0e 94 a1 11 	call	0x2342	; 0x2342 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    244e:	e7 cf       	rjmp	.-50     	; 0x241e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	08 95       	ret

00002456 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2456:	cf 92       	push	r12
    2458:	df 92       	push	r13
    245a:	ef 92       	push	r14
    245c:	ff 92       	push	r15
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	ec 01       	movw	r28, r24
    2466:	6a 01       	movw	r12, r20
    2468:	7b 01       	movw	r14, r22
    246a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    246c:	e8 89       	ldd	r30, Y+16	; 0x10
    246e:	f9 89       	ldd	r31, Y+17	; 0x11
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2474:	41 15       	cp	r20, r1
    2476:	51 4e       	sbci	r21, 0xE1	; 225
    2478:	61 05       	cpc	r22, r1
    247a:	71 05       	cpc	r23, r1
    247c:	b1 f0       	breq	.+44     	; 0x24aa <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    247e:	60 e0       	ldi	r22, 0x00	; 0
    2480:	79 e0       	ldi	r23, 0x09	; 9
    2482:	8d e3       	ldi	r24, 0x3D	; 61
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	a7 01       	movw	r20, r14
    2488:	96 01       	movw	r18, r12
    248a:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodsi4>
    248e:	da 01       	movw	r26, r20
    2490:	c9 01       	movw	r24, r18
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	a1 09       	sbc	r26, r1
    2496:	b1 09       	sbc	r27, r1
    2498:	b6 95       	lsr	r27
    249a:	a7 95       	ror	r26
    249c:	97 95       	ror	r25
    249e:	87 95       	ror	r24
    24a0:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    24a2:	21 15       	cp	r18, r1
    24a4:	80 e1       	ldi	r24, 0x10	; 16
    24a6:	38 07       	cpc	r19, r24
    24a8:	a8 f0       	brcs	.+42     	; 0x24d4 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    24aa:	e8 89       	ldd	r30, Y+16	; 0x10
    24ac:	f9 89       	ldd	r31, Y+17	; 0x11
    24ae:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    24b0:	60 e8       	ldi	r22, 0x80	; 128
    24b2:	74 e8       	ldi	r23, 0x84	; 132
    24b4:	8e e1       	ldi	r24, 0x1E	; 30
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	a7 01       	movw	r20, r14
    24ba:	96 01       	movw	r18, r12
    24bc:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodsi4>
    24c0:	da 01       	movw	r26, r20
    24c2:	c9 01       	movw	r24, r18
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	a1 09       	sbc	r26, r1
    24c8:	b1 09       	sbc	r27, r1
    24ca:	b6 95       	lsr	r27
    24cc:	a7 95       	ror	r26
    24ce:	97 95       	ror	r25
    24d0:	87 95       	ror	r24
    24d2:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    24d4:	ec 85       	ldd	r30, Y+12	; 0x0c
    24d6:	fd 85       	ldd	r31, Y+13	; 0x0d
    24d8:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    24da:	ee 85       	ldd	r30, Y+14	; 0x0e
    24dc:	ff 85       	ldd	r31, Y+15	; 0x0f
    24de:	20 83       	st	Z, r18

  _written = false;
    24e0:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    24e2:	ec 89       	ldd	r30, Y+20	; 0x14
    24e4:	fd 89       	ldd	r31, Y+21	; 0x15
    24e6:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    24e8:	ea 89       	ldd	r30, Y+18	; 0x12
    24ea:	fb 89       	ldd	r31, Y+19	; 0x13
    24ec:	80 81       	ld	r24, Z
    24ee:	80 61       	ori	r24, 0x10	; 16
    24f0:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    24f2:	ea 89       	ldd	r30, Y+18	; 0x12
    24f4:	fb 89       	ldd	r31, Y+19	; 0x13
    24f6:	80 81       	ld	r24, Z
    24f8:	88 60       	ori	r24, 0x08	; 8
    24fa:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    24fc:	ea 89       	ldd	r30, Y+18	; 0x12
    24fe:	fb 89       	ldd	r31, Y+19	; 0x13
    2500:	80 81       	ld	r24, Z
    2502:	80 68       	ori	r24, 0x80	; 128
    2504:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    2506:	ea 89       	ldd	r30, Y+18	; 0x12
    2508:	fb 89       	ldd	r31, Y+19	; 0x13
    250a:	80 81       	ld	r24, Z
    250c:	8f 7d       	andi	r24, 0xDF	; 223
    250e:	80 83       	st	Z, r24
}
    2510:	df 91       	pop	r29
    2512:	cf 91       	pop	r28
    2514:	1f 91       	pop	r17
    2516:	ff 90       	pop	r15
    2518:	ef 90       	pop	r14
    251a:	df 90       	pop	r13
    251c:	cf 90       	pop	r12
    251e:	08 95       	ret

00002520 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2520:	1f 92       	push	r1
    2522:	0f 92       	push	r0
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	0f 92       	push	r0
    2528:	11 24       	eor	r1, r1
    252a:	2f 93       	push	r18
    252c:	8f 93       	push	r24
    252e:	9f 93       	push	r25
    2530:	ef 93       	push	r30
    2532:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2534:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <Serial+0x10>
    2538:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <Serial+0x11>
    253c:	80 81       	ld	r24, Z
    253e:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <Serial+0x16>
    2542:	f0 91 87 02 	lds	r31, 0x0287	; 0x800287 <Serial+0x17>
    2546:	82 fd       	sbrc	r24, 2
    2548:	12 c0       	rjmp	.+36     	; 0x256e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    254a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    254c:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <Serial+0x19>
    2550:	8f 5f       	subi	r24, 0xFF	; 255
    2552:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2554:	20 91 8a 02 	lds	r18, 0x028A	; 0x80028a <Serial+0x1a>
    2558:	82 17       	cp	r24, r18
    255a:	51 f0       	breq	.+20     	; 0x2570 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    255c:	e0 91 89 02 	lds	r30, 0x0289	; 0x800289 <Serial+0x19>
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	e0 59       	subi	r30, 0x90	; 144
    2564:	fd 4f       	sbci	r31, 0xFD	; 253
    2566:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    2568:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <Serial+0x19>
    256c:	01 c0       	rjmp	.+2      	; 0x2570 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    256e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    2570:	ff 91       	pop	r31
    2572:	ef 91       	pop	r30
    2574:	9f 91       	pop	r25
    2576:	8f 91       	pop	r24
    2578:	2f 91       	pop	r18
    257a:	0f 90       	pop	r0
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	0f 90       	pop	r0
    2580:	1f 90       	pop	r1
    2582:	18 95       	reti

00002584 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2584:	1f 92       	push	r1
    2586:	0f 92       	push	r0
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	0f 92       	push	r0
    258c:	11 24       	eor	r1, r1
    258e:	2f 93       	push	r18
    2590:	3f 93       	push	r19
    2592:	4f 93       	push	r20
    2594:	5f 93       	push	r21
    2596:	6f 93       	push	r22
    2598:	7f 93       	push	r23
    259a:	8f 93       	push	r24
    259c:	9f 93       	push	r25
    259e:	af 93       	push	r26
    25a0:	bf 93       	push	r27
    25a2:	ef 93       	push	r30
    25a4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    25a6:	80 e7       	ldi	r24, 0x70	; 112
    25a8:	92 e0       	ldi	r25, 0x02	; 2
    25aa:	0e 94 a1 11 	call	0x2342	; 0x2342 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    25ae:	ff 91       	pop	r31
    25b0:	ef 91       	pop	r30
    25b2:	bf 91       	pop	r27
    25b4:	af 91       	pop	r26
    25b6:	9f 91       	pop	r25
    25b8:	8f 91       	pop	r24
    25ba:	7f 91       	pop	r23
    25bc:	6f 91       	pop	r22
    25be:	5f 91       	pop	r21
    25c0:	4f 91       	pop	r20
    25c2:	3f 91       	pop	r19
    25c4:	2f 91       	pop	r18
    25c6:	0f 90       	pop	r0
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	0f 90       	pop	r0
    25cc:	1f 90       	pop	r1
    25ce:	18 95       	reti

000025d0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    25d0:	80 e7       	ldi	r24, 0x70	; 112
    25d2:	92 e0       	ldi	r25, 0x02	; 2
    25d4:	0e 94 65 11 	call	0x22ca	; 0x22ca <_ZN14HardwareSerial9availableEv>
    25d8:	21 e0       	ldi	r18, 0x01	; 1
    25da:	89 2b       	or	r24, r25
    25dc:	09 f4       	brne	.+2      	; 0x25e0 <_Z17Serial0_availablev+0x10>
    25de:	20 e0       	ldi	r18, 0x00	; 0
}
    25e0:	82 2f       	mov	r24, r18
    25e2:	08 95       	ret

000025e4 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    25e4:	e0 e7       	ldi	r30, 0x70	; 112
    25e6:	f2 e0       	ldi	r31, 0x02	; 2
    25e8:	13 82       	std	Z+3, r1	; 0x03
    25ea:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    25ec:	88 ee       	ldi	r24, 0xE8	; 232
    25ee:	93 e0       	ldi	r25, 0x03	; 3
    25f0:	a0 e0       	ldi	r26, 0x00	; 0
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	84 83       	std	Z+4, r24	; 0x04
    25f6:	95 83       	std	Z+5, r25	; 0x05
    25f8:	a6 83       	std	Z+6, r26	; 0x06
    25fa:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    25fc:	85 e7       	ldi	r24, 0x75	; 117
    25fe:	91 e0       	ldi	r25, 0x01	; 1
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	80 83       	st	Z, r24
    2604:	85 ec       	ldi	r24, 0xC5	; 197
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	95 87       	std	Z+13, r25	; 0x0d
    260a:	84 87       	std	Z+12, r24	; 0x0c
    260c:	84 ec       	ldi	r24, 0xC4	; 196
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	97 87       	std	Z+15, r25	; 0x0f
    2612:	86 87       	std	Z+14, r24	; 0x0e
    2614:	80 ec       	ldi	r24, 0xC0	; 192
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	91 8b       	std	Z+17, r25	; 0x11
    261a:	80 8b       	std	Z+16, r24	; 0x10
    261c:	81 ec       	ldi	r24, 0xC1	; 193
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	93 8b       	std	Z+19, r25	; 0x13
    2622:	82 8b       	std	Z+18, r24	; 0x12
    2624:	82 ec       	ldi	r24, 0xC2	; 194
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	95 8b       	std	Z+21, r25	; 0x15
    262a:	84 8b       	std	Z+20, r24	; 0x14
    262c:	86 ec       	ldi	r24, 0xC6	; 198
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	97 8b       	std	Z+23, r25	; 0x17
    2632:	86 8b       	std	Z+22, r24	; 0x16
    2634:	11 8e       	std	Z+25, r1	; 0x19
    2636:	12 8e       	std	Z+26, r1	; 0x1a
    2638:	13 8e       	std	Z+27, r1	; 0x1b
    263a:	14 8e       	std	Z+28, r1	; 0x1c
    263c:	08 95       	ret

0000263e <initVariant>:
    263e:	08 95       	ret

00002640 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2640:	0e 94 ef 15 	call	0x2bde	; 0x2bde <init>

	initVariant();
    2644:	0e 94 1f 13 	call	0x263e	; 0x263e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2648:	0e 94 0b 08 	call	0x1016	; 0x1016 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    264c:	c3 e9       	ldi	r28, 0x93	; 147
    264e:	d1 e1       	ldi	r29, 0x11	; 17
#endif
	
	setup();
    
	for (;;) {
		loop();
    2650:	0e 94 2e 0b 	call	0x165c	; 0x165c <loop>
		if (serialEventRun) serialEventRun();
    2654:	20 97       	sbiw	r28, 0x00	; 0
    2656:	e1 f3       	breq	.-8      	; 0x2650 <main+0x10>
    2658:	0e 94 93 11 	call	0x2326	; 0x2326 <_Z14serialEventRunv>
    265c:	f9 cf       	rjmp	.-14     	; 0x2650 <main+0x10>

0000265e <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    265e:	cf 92       	push	r12
    2660:	df 92       	push	r13
    2662:	ef 92       	push	r14
    2664:	ff 92       	push	r15
    2666:	0f 93       	push	r16
    2668:	1f 93       	push	r17
    266a:	cf 93       	push	r28
    266c:	df 93       	push	r29
    266e:	6c 01       	movw	r12, r24
    2670:	7a 01       	movw	r14, r20
    2672:	8b 01       	movw	r16, r22
    2674:	c0 e0       	ldi	r28, 0x00	; 0
    2676:	d0 e0       	ldi	r29, 0x00	; 0
    2678:	ce 15       	cp	r28, r14
    267a:	df 05       	cpc	r29, r15
    267c:	81 f0       	breq	.+32     	; 0x269e <_ZN5Print5writeEPKhj+0x40>
    267e:	d8 01       	movw	r26, r16
    2680:	6d 91       	ld	r22, X+
    2682:	8d 01       	movw	r16, r26
    2684:	d6 01       	movw	r26, r12
    2686:	ed 91       	ld	r30, X+
    2688:	fc 91       	ld	r31, X
    268a:	01 90       	ld	r0, Z+
    268c:	f0 81       	ld	r31, Z
    268e:	e0 2d       	mov	r30, r0
    2690:	c6 01       	movw	r24, r12
    2692:	09 95       	icall
    2694:	89 2b       	or	r24, r25
    2696:	11 f0       	breq	.+4      	; 0x269c <_ZN5Print5writeEPKhj+0x3e>
    2698:	21 96       	adiw	r28, 0x01	; 1
    269a:	ee cf       	rjmp	.-36     	; 0x2678 <_ZN5Print5writeEPKhj+0x1a>
    269c:	7e 01       	movw	r14, r28
    269e:	c7 01       	movw	r24, r14
    26a0:	df 91       	pop	r29
    26a2:	cf 91       	pop	r28
    26a4:	1f 91       	pop	r17
    26a6:	0f 91       	pop	r16
    26a8:	ff 90       	pop	r15
    26aa:	ef 90       	pop	r14
    26ac:	df 90       	pop	r13
    26ae:	cf 90       	pop	r12
    26b0:	08 95       	ret

000026b2 <_ZN5Print5writeEPKc>:
    26b2:	61 15       	cp	r22, r1
    26b4:	71 05       	cpc	r23, r1
    26b6:	79 f0       	breq	.+30     	; 0x26d6 <_ZN5Print5writeEPKc+0x24>
    26b8:	fb 01       	movw	r30, r22
    26ba:	01 90       	ld	r0, Z+
    26bc:	00 20       	and	r0, r0
    26be:	e9 f7       	brne	.-6      	; 0x26ba <_ZN5Print5writeEPKc+0x8>
    26c0:	31 97       	sbiw	r30, 0x01	; 1
    26c2:	af 01       	movw	r20, r30
    26c4:	46 1b       	sub	r20, r22
    26c6:	57 0b       	sbc	r21, r23
    26c8:	dc 01       	movw	r26, r24
    26ca:	ed 91       	ld	r30, X+
    26cc:	fc 91       	ld	r31, X
    26ce:	02 80       	ldd	r0, Z+2	; 0x02
    26d0:	f3 81       	ldd	r31, Z+3	; 0x03
    26d2:	e0 2d       	mov	r30, r0
    26d4:	09 94       	ijmp
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	08 95       	ret

000026dc <_ZN5Print5printEPKc>:
    26dc:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <_ZN5Print5writeEPKc>

000026e0 <_ZN5Print5printEc>:
    26e0:	dc 01       	movw	r26, r24
    26e2:	ed 91       	ld	r30, X+
    26e4:	fc 91       	ld	r31, X
    26e6:	01 90       	ld	r0, Z+
    26e8:	f0 81       	ld	r31, Z
    26ea:	e0 2d       	mov	r30, r0
    26ec:	09 94       	ijmp

000026ee <_ZN5Print7printlnEv>:
    26ee:	61 e8       	ldi	r22, 0x81	; 129
    26f0:	71 e0       	ldi	r23, 0x01	; 1
    26f2:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <_ZN5Print5writeEPKc>

000026f6 <_ZN5Print7printlnEPKc>:
    26f6:	0f 93       	push	r16
    26f8:	1f 93       	push	r17
    26fa:	cf 93       	push	r28
    26fc:	df 93       	push	r29
    26fe:	ec 01       	movw	r28, r24
    2700:	0e 94 59 13 	call	0x26b2	; 0x26b2 <_ZN5Print5writeEPKc>
    2704:	8c 01       	movw	r16, r24
    2706:	ce 01       	movw	r24, r28
    2708:	0e 94 77 13 	call	0x26ee	; 0x26ee <_ZN5Print7printlnEv>
    270c:	80 0f       	add	r24, r16
    270e:	91 1f       	adc	r25, r17
    2710:	df 91       	pop	r29
    2712:	cf 91       	pop	r28
    2714:	1f 91       	pop	r17
    2716:	0f 91       	pop	r16
    2718:	08 95       	ret

0000271a <_ZN5Print11printNumberEmh>:
    271a:	8f 92       	push	r8
    271c:	9f 92       	push	r9
    271e:	af 92       	push	r10
    2720:	bf 92       	push	r11
    2722:	ef 92       	push	r14
    2724:	ff 92       	push	r15
    2726:	0f 93       	push	r16
    2728:	1f 93       	push	r17
    272a:	cf 93       	push	r28
    272c:	df 93       	push	r29
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	a1 97       	sbiw	r28, 0x21	; 33
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
    273e:	7c 01       	movw	r14, r24
    2740:	fa 01       	movw	r30, r20
    2742:	cb 01       	movw	r24, r22
    2744:	19 a2       	std	Y+33, r1	; 0x21
    2746:	22 30       	cpi	r18, 0x02	; 2
    2748:	08 f4       	brcc	.+2      	; 0x274c <_ZN5Print11printNumberEmh+0x32>
    274a:	2a e0       	ldi	r18, 0x0A	; 10
    274c:	8e 01       	movw	r16, r28
    274e:	0f 5d       	subi	r16, 0xDF	; 223
    2750:	1f 4f       	sbci	r17, 0xFF	; 255
    2752:	82 2e       	mov	r8, r18
    2754:	91 2c       	mov	r9, r1
    2756:	a1 2c       	mov	r10, r1
    2758:	b1 2c       	mov	r11, r1
    275a:	bf 01       	movw	r22, r30
    275c:	a5 01       	movw	r20, r10
    275e:	94 01       	movw	r18, r8
    2760:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodsi4>
    2764:	f9 01       	movw	r30, r18
    2766:	ca 01       	movw	r24, r20
    2768:	01 50       	subi	r16, 0x01	; 1
    276a:	11 09       	sbc	r17, r1
    276c:	6a 30       	cpi	r22, 0x0A	; 10
    276e:	10 f4       	brcc	.+4      	; 0x2774 <_ZN5Print11printNumberEmh+0x5a>
    2770:	60 5d       	subi	r22, 0xD0	; 208
    2772:	01 c0       	rjmp	.+2      	; 0x2776 <_ZN5Print11printNumberEmh+0x5c>
    2774:	69 5c       	subi	r22, 0xC9	; 201
    2776:	d8 01       	movw	r26, r16
    2778:	6c 93       	st	X, r22
    277a:	23 2b       	or	r18, r19
    277c:	24 2b       	or	r18, r20
    277e:	25 2b       	or	r18, r21
    2780:	61 f7       	brne	.-40     	; 0x275a <_ZN5Print11printNumberEmh+0x40>
    2782:	b8 01       	movw	r22, r16
    2784:	c7 01       	movw	r24, r14
    2786:	0e 94 59 13 	call	0x26b2	; 0x26b2 <_ZN5Print5writeEPKc>
    278a:	a1 96       	adiw	r28, 0x21	; 33
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	f8 94       	cli
    2790:	de bf       	out	0x3e, r29	; 62
    2792:	0f be       	out	0x3f, r0	; 63
    2794:	cd bf       	out	0x3d, r28	; 61
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	1f 91       	pop	r17
    279c:	0f 91       	pop	r16
    279e:	ff 90       	pop	r15
    27a0:	ef 90       	pop	r14
    27a2:	bf 90       	pop	r11
    27a4:	af 90       	pop	r10
    27a6:	9f 90       	pop	r9
    27a8:	8f 90       	pop	r8
    27aa:	08 95       	ret

000027ac <_ZN5Print5printEmi>:
    27ac:	21 15       	cp	r18, r1
    27ae:	31 05       	cpc	r19, r1
    27b0:	41 f4       	brne	.+16     	; 0x27c2 <_ZN5Print5printEmi+0x16>
    27b2:	dc 01       	movw	r26, r24
    27b4:	ed 91       	ld	r30, X+
    27b6:	fc 91       	ld	r31, X
    27b8:	01 90       	ld	r0, Z+
    27ba:	f0 81       	ld	r31, Z
    27bc:	e0 2d       	mov	r30, r0
    27be:	64 2f       	mov	r22, r20
    27c0:	09 94       	ijmp
    27c2:	0c 94 8d 13 	jmp	0x271a	; 0x271a <_ZN5Print11printNumberEmh>

000027c6 <_ZN5Print5printEji>:
    27c6:	9a 01       	movw	r18, r20
    27c8:	ab 01       	movw	r20, r22
    27ca:	60 e0       	ldi	r22, 0x00	; 0
    27cc:	70 e0       	ldi	r23, 0x00	; 0
    27ce:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <_ZN5Print5printEmi>

000027d2 <_ZN5Print5printEli>:
    27d2:	cf 92       	push	r12
    27d4:	df 92       	push	r13
    27d6:	ef 92       	push	r14
    27d8:	ff 92       	push	r15
    27da:	0f 93       	push	r16
    27dc:	1f 93       	push	r17
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
    27e2:	21 15       	cp	r18, r1
    27e4:	31 05       	cpc	r19, r1
    27e6:	81 f4       	brne	.+32     	; 0x2808 <_ZN5Print5printEli+0x36>
    27e8:	dc 01       	movw	r26, r24
    27ea:	ed 91       	ld	r30, X+
    27ec:	fc 91       	ld	r31, X
    27ee:	01 90       	ld	r0, Z+
    27f0:	f0 81       	ld	r31, Z
    27f2:	e0 2d       	mov	r30, r0
    27f4:	64 2f       	mov	r22, r20
    27f6:	df 91       	pop	r29
    27f8:	cf 91       	pop	r28
    27fa:	1f 91       	pop	r17
    27fc:	0f 91       	pop	r16
    27fe:	ff 90       	pop	r15
    2800:	ef 90       	pop	r14
    2802:	df 90       	pop	r13
    2804:	cf 90       	pop	r12
    2806:	09 94       	ijmp
    2808:	2a 30       	cpi	r18, 0x0A	; 10
    280a:	31 05       	cpc	r19, r1
    280c:	01 f5       	brne	.+64     	; 0x284e <_ZN5Print5printEli+0x7c>
    280e:	77 ff       	sbrs	r23, 7
    2810:	1d c0       	rjmp	.+58     	; 0x284c <_ZN5Print5printEli+0x7a>
    2812:	6a 01       	movw	r12, r20
    2814:	7b 01       	movw	r14, r22
    2816:	ec 01       	movw	r28, r24
    2818:	6d e2       	ldi	r22, 0x2D	; 45
    281a:	0e 94 70 13 	call	0x26e0	; 0x26e0 <_ZN5Print5printEc>
    281e:	8c 01       	movw	r16, r24
    2820:	44 27       	eor	r20, r20
    2822:	55 27       	eor	r21, r21
    2824:	ba 01       	movw	r22, r20
    2826:	4c 19       	sub	r20, r12
    2828:	5d 09       	sbc	r21, r13
    282a:	6e 09       	sbc	r22, r14
    282c:	7f 09       	sbc	r23, r15
    282e:	2a e0       	ldi	r18, 0x0A	; 10
    2830:	ce 01       	movw	r24, r28
    2832:	0e 94 8d 13 	call	0x271a	; 0x271a <_ZN5Print11printNumberEmh>
    2836:	80 0f       	add	r24, r16
    2838:	91 1f       	adc	r25, r17
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	ff 90       	pop	r15
    2844:	ef 90       	pop	r14
    2846:	df 90       	pop	r13
    2848:	cf 90       	pop	r12
    284a:	08 95       	ret
    284c:	2a e0       	ldi	r18, 0x0A	; 10
    284e:	df 91       	pop	r29
    2850:	cf 91       	pop	r28
    2852:	1f 91       	pop	r17
    2854:	0f 91       	pop	r16
    2856:	ff 90       	pop	r15
    2858:	ef 90       	pop	r14
    285a:	df 90       	pop	r13
    285c:	cf 90       	pop	r12
    285e:	0c 94 8d 13 	jmp	0x271a	; 0x271a <_ZN5Print11printNumberEmh>

00002862 <_ZN5Print5printEii>:
    2862:	9a 01       	movw	r18, r20
    2864:	ab 01       	movw	r20, r22
    2866:	77 0f       	add	r23, r23
    2868:	66 0b       	sbc	r22, r22
    286a:	77 0b       	sbc	r23, r23
    286c:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <_ZN5Print5printEli>

00002870 <_ZN5Print7printlnEii>:
    2870:	0f 93       	push	r16
    2872:	1f 93       	push	r17
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    2878:	ec 01       	movw	r28, r24
    287a:	0e 94 31 14 	call	0x2862	; 0x2862 <_ZN5Print5printEii>
    287e:	8c 01       	movw	r16, r24
    2880:	ce 01       	movw	r24, r28
    2882:	0e 94 77 13 	call	0x26ee	; 0x26ee <_ZN5Print7printlnEv>
    2886:	80 0f       	add	r24, r16
    2888:	91 1f       	adc	r25, r17
    288a:	df 91       	pop	r29
    288c:	cf 91       	pop	r28
    288e:	1f 91       	pop	r17
    2890:	0f 91       	pop	r16
    2892:	08 95       	ret

00002894 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2894:	7f 92       	push	r7
    2896:	8f 92       	push	r8
    2898:	9f 92       	push	r9
    289a:	af 92       	push	r10
    289c:	bf 92       	push	r11
    289e:	cf 92       	push	r12
    28a0:	df 92       	push	r13
    28a2:	ef 92       	push	r14
    28a4:	ff 92       	push	r15
    28a6:	0f 93       	push	r16
    28a8:	1f 93       	push	r17
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	8c 01       	movw	r16, r24
    28b0:	6a 01       	movw	r12, r20
    28b2:	7b 01       	movw	r14, r22
    28b4:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    28b6:	9a 01       	movw	r18, r20
    28b8:	ab 01       	movw	r20, r22
    28ba:	c7 01       	movw	r24, r14
    28bc:	b6 01       	movw	r22, r12
    28be:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__unordsf2>
    28c2:	88 23       	and	r24, r24
    28c4:	19 f0       	breq	.+6      	; 0x28cc <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    28c6:	64 e8       	ldi	r22, 0x84	; 132
    28c8:	71 e0       	ldi	r23, 0x01	; 1
    28ca:	27 c0       	rjmp	.+78     	; 0x291a <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    28cc:	46 01       	movw	r8, r12
    28ce:	57 01       	movw	r10, r14
    28d0:	e8 94       	clt
    28d2:	b7 f8       	bld	r11, 7
    28d4:	2f ef       	ldi	r18, 0xFF	; 255
    28d6:	3f ef       	ldi	r19, 0xFF	; 255
    28d8:	4f e7       	ldi	r20, 0x7F	; 127
    28da:	5f e7       	ldi	r21, 0x7F	; 127
    28dc:	c5 01       	movw	r24, r10
    28de:	b4 01       	movw	r22, r8
    28e0:	0e 94 d1 1b 	call	0x37a2	; 0x37a2 <__unordsf2>
    28e4:	81 11       	cpse	r24, r1
    28e6:	0d c0       	rjmp	.+26     	; 0x2902 <_ZN5Print10printFloatEdh+0x6e>
    28e8:	2f ef       	ldi	r18, 0xFF	; 255
    28ea:	3f ef       	ldi	r19, 0xFF	; 255
    28ec:	4f e7       	ldi	r20, 0x7F	; 127
    28ee:	5f e7       	ldi	r21, 0x7F	; 127
    28f0:	c5 01       	movw	r24, r10
    28f2:	b4 01       	movw	r22, r8
    28f4:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
    28f8:	18 16       	cp	r1, r24
    28fa:	1c f4       	brge	.+6      	; 0x2902 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    28fc:	68 e8       	ldi	r22, 0x88	; 136
    28fe:	71 e0       	ldi	r23, 0x01	; 1
    2900:	0c c0       	rjmp	.+24     	; 0x291a <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2902:	2f ef       	ldi	r18, 0xFF	; 255
    2904:	3f ef       	ldi	r19, 0xFF	; 255
    2906:	4f e7       	ldi	r20, 0x7F	; 127
    2908:	5f e4       	ldi	r21, 0x4F	; 79
    290a:	c7 01       	movw	r24, r14
    290c:	b6 01       	movw	r22, r12
    290e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <__gesf2>
    2912:	18 16       	cp	r1, r24
    2914:	94 f4       	brge	.+36     	; 0x293a <_ZN5Print10printFloatEdh+0xa6>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2916:	6c e8       	ldi	r22, 0x8C	; 140
    2918:	71 e0       	ldi	r23, 0x01	; 1
    291a:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	1f 91       	pop	r17
    2922:	0f 91       	pop	r16
    2924:	ff 90       	pop	r15
    2926:	ef 90       	pop	r14
    2928:	df 90       	pop	r13
    292a:	cf 90       	pop	r12
    292c:	bf 90       	pop	r11
    292e:	af 90       	pop	r10
    2930:	9f 90       	pop	r9
    2932:	8f 90       	pop	r8
    2934:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2936:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    293a:	2f ef       	ldi	r18, 0xFF	; 255
    293c:	3f ef       	ldi	r19, 0xFF	; 255
    293e:	4f e7       	ldi	r20, 0x7F	; 127
    2940:	5f ec       	ldi	r21, 0xCF	; 207
    2942:	c7 01       	movw	r24, r14
    2944:	b6 01       	movw	r22, r12
    2946:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
    294a:	87 fd       	sbrc	r24, 7
    294c:	e4 cf       	rjmp	.-56     	; 0x2916 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	a9 01       	movw	r20, r18
    2954:	c7 01       	movw	r24, r14
    2956:	b6 01       	movw	r22, r12
    2958:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <__cmpsf2>
    295c:	87 ff       	sbrs	r24, 7
    295e:	0a c0       	rjmp	.+20     	; 0x2974 <_ZN5Print10printFloatEdh+0xe0>
  {
     n += print('-');
    2960:	6d e2       	ldi	r22, 0x2D	; 45
    2962:	c8 01       	movw	r24, r16
    2964:	0e 94 70 13 	call	0x26e0	; 0x26e0 <_ZN5Print5printEc>
    2968:	ec 01       	movw	r28, r24
     number = -number;
    296a:	f7 fa       	bst	r15, 7
    296c:	f0 94       	com	r15
    296e:	f7 f8       	bld	r15, 7
    2970:	f0 94       	com	r15
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <_ZN5Print10printFloatEdh+0xe4>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2974:	c0 e0       	ldi	r28, 0x00	; 0
    2976:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2978:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    297a:	60 e0       	ldi	r22, 0x00	; 0
    297c:	70 e0       	ldi	r23, 0x00	; 0
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    2982:	7b 14       	cp	r7, r11
    2984:	41 f0       	breq	.+16     	; 0x2996 <_ZN5Print10printFloatEdh+0x102>
    rounding /= 10.0;
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e2       	ldi	r20, 0x20	; 32
    298c:	51 e4       	ldi	r21, 0x41	; 65
    298e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2992:	b3 94       	inc	r11
    2994:	f6 cf       	rjmp	.-20     	; 0x2982 <_ZN5Print10printFloatEdh+0xee>
    rounding /= 10.0;
  
  number += rounding;
    2996:	a7 01       	movw	r20, r14
    2998:	96 01       	movw	r18, r12
    299a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <__addsf3>
    299e:	6b 01       	movw	r12, r22
    29a0:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    29a2:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__fixunssfsi>
    29a6:	4b 01       	movw	r8, r22
    29a8:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    29aa:	2a e0       	ldi	r18, 0x0A	; 10
    29ac:	ab 01       	movw	r20, r22
    29ae:	bc 01       	movw	r22, r24
    29b0:	c8 01       	movw	r24, r16
    29b2:	0e 94 8d 13 	call	0x271a	; 0x271a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    29b6:	c8 0f       	add	r28, r24
    29b8:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    29ba:	77 20       	and	r7, r7
    29bc:	b9 f1       	breq	.+110    	; 0x2a2c <_ZN5Print10printFloatEdh+0x198>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    29be:	c5 01       	movw	r24, r10
    29c0:	b4 01       	movw	r22, r8
    29c2:	0e 94 0e 10 	call	0x201c	; 0x201c <__floatunsisf>
    29c6:	9b 01       	movw	r18, r22
    29c8:	ac 01       	movw	r20, r24
    29ca:	c7 01       	movw	r24, r14
    29cc:	b6 01       	movw	r22, r12
    29ce:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
    29d2:	6b 01       	movw	r12, r22
    29d4:	7c 01       	movw	r14, r24
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    29d6:	6e e2       	ldi	r22, 0x2E	; 46
    29d8:	c8 01       	movw	r24, r16
    29da:	0e 94 70 13 	call	0x26e0	; 0x26e0 <_ZN5Print5printEc>
    29de:	c8 0f       	add	r28, r24
    29e0:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e2       	ldi	r20, 0x20	; 32
    29e8:	51 e4       	ldi	r21, 0x41	; 65
    29ea:	c7 01       	movw	r24, r14
    29ec:	b6 01       	movw	r22, r12
    29ee:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__mulsf3>
    29f2:	4b 01       	movw	r8, r22
    29f4:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    29f6:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__fixunssfsi>
    29fa:	6b 01       	movw	r12, r22
    29fc:	7c 01       	movw	r14, r24
    n += print(toPrint);
    29fe:	4a e0       	ldi	r20, 0x0A	; 10
    2a00:	50 e0       	ldi	r21, 0x00	; 0
    2a02:	c8 01       	movw	r24, r16
    2a04:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <_ZN5Print5printEji>
    2a08:	c8 0f       	add	r28, r24
    2a0a:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    2a0c:	b6 01       	movw	r22, r12
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	0e 94 0e 10 	call	0x201c	; 0x201c <__floatunsisf>
    2a16:	9b 01       	movw	r18, r22
    2a18:	ac 01       	movw	r20, r24
    2a1a:	c5 01       	movw	r24, r10
    2a1c:	b4 01       	movw	r22, r8
    2a1e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <__subsf3>
    2a22:	6b 01       	movw	r12, r22
    2a24:	7c 01       	movw	r14, r24
    2a26:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2a28:	71 10       	cpse	r7, r1
    2a2a:	db cf       	rjmp	.-74     	; 0x29e2 <_ZN5Print10printFloatEdh+0x14e>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2a2c:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2a2e:	df 91       	pop	r29
    2a30:	cf 91       	pop	r28
    2a32:	1f 91       	pop	r17
    2a34:	0f 91       	pop	r16
    2a36:	ff 90       	pop	r15
    2a38:	ef 90       	pop	r14
    2a3a:	df 90       	pop	r13
    2a3c:	cf 90       	pop	r12
    2a3e:	bf 90       	pop	r11
    2a40:	af 90       	pop	r10
    2a42:	9f 90       	pop	r9
    2a44:	8f 90       	pop	r8
    2a46:	7f 90       	pop	r7
    2a48:	08 95       	ret

00002a4a <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2a4a:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <_ZN5Print10printFloatEdh>

00002a4e <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    2a4e:	0f 93       	push	r16
    2a50:	1f 93       	push	r17
    2a52:	cf 93       	push	r28
    2a54:	df 93       	push	r29
    2a56:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2a58:	0e 94 4a 14 	call	0x2894	; 0x2894 <_ZN5Print10printFloatEdh>
    2a5c:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    2a5e:	ce 01       	movw	r24, r28
    2a60:	0e 94 77 13 	call	0x26ee	; 0x26ee <_ZN5Print7printlnEv>
  return n;
}
    2a64:	80 0f       	add	r24, r16
    2a66:	91 1f       	adc	r25, r17
    2a68:	df 91       	pop	r29
    2a6a:	cf 91       	pop	r28
    2a6c:	1f 91       	pop	r17
    2a6e:	0f 91       	pop	r16
    2a70:	08 95       	ret

00002a72 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    2a72:	1f 92       	push	r1
    2a74:	0f 92       	push	r0
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	0f 92       	push	r0
    2a7a:	11 24       	eor	r1, r1
    2a7c:	2f 93       	push	r18
    2a7e:	3f 93       	push	r19
    2a80:	8f 93       	push	r24
    2a82:	9f 93       	push	r25
    2a84:	af 93       	push	r26
    2a86:	bf 93       	push	r27
    2a88:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <timer0_millis>
    2a8c:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <timer0_millis+0x1>
    2a90:	a0 91 10 03 	lds	r26, 0x0310	; 0x800310 <timer0_millis+0x2>
    2a94:	b0 91 11 03 	lds	r27, 0x0311	; 0x800311 <timer0_millis+0x3>
    2a98:	30 91 0d 03 	lds	r19, 0x030D	; 0x80030d <timer0_fract>
    2a9c:	23 e0       	ldi	r18, 0x03	; 3
    2a9e:	23 0f       	add	r18, r19
    2aa0:	2d 37       	cpi	r18, 0x7D	; 125
    2aa2:	20 f4       	brcc	.+8      	; 0x2aac <__vector_16+0x3a>
    2aa4:	01 96       	adiw	r24, 0x01	; 1
    2aa6:	a1 1d       	adc	r26, r1
    2aa8:	b1 1d       	adc	r27, r1
    2aaa:	05 c0       	rjmp	.+10     	; 0x2ab6 <__vector_16+0x44>
    2aac:	26 e8       	ldi	r18, 0x86	; 134
    2aae:	23 0f       	add	r18, r19
    2ab0:	02 96       	adiw	r24, 0x02	; 2
    2ab2:	a1 1d       	adc	r26, r1
    2ab4:	b1 1d       	adc	r27, r1
    2ab6:	20 93 0d 03 	sts	0x030D, r18	; 0x80030d <timer0_fract>
    2aba:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <timer0_millis>
    2abe:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <timer0_millis+0x1>
    2ac2:	a0 93 10 03 	sts	0x0310, r26	; 0x800310 <timer0_millis+0x2>
    2ac6:	b0 93 11 03 	sts	0x0311, r27	; 0x800311 <timer0_millis+0x3>
    2aca:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <timer0_overflow_count>
    2ace:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <timer0_overflow_count+0x1>
    2ad2:	a0 91 14 03 	lds	r26, 0x0314	; 0x800314 <timer0_overflow_count+0x2>
    2ad6:	b0 91 15 03 	lds	r27, 0x0315	; 0x800315 <timer0_overflow_count+0x3>
    2ada:	01 96       	adiw	r24, 0x01	; 1
    2adc:	a1 1d       	adc	r26, r1
    2ade:	b1 1d       	adc	r27, r1
    2ae0:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <timer0_overflow_count>
    2ae4:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <timer0_overflow_count+0x1>
    2ae8:	a0 93 14 03 	sts	0x0314, r26	; 0x800314 <timer0_overflow_count+0x2>
    2aec:	b0 93 15 03 	sts	0x0315, r27	; 0x800315 <timer0_overflow_count+0x3>
    2af0:	bf 91       	pop	r27
    2af2:	af 91       	pop	r26
    2af4:	9f 91       	pop	r25
    2af6:	8f 91       	pop	r24
    2af8:	3f 91       	pop	r19
    2afa:	2f 91       	pop	r18
    2afc:	0f 90       	pop	r0
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	0f 90       	pop	r0
    2b02:	1f 90       	pop	r1
    2b04:	18 95       	reti

00002b06 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2b06:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2b08:	f8 94       	cli
	m = timer0_overflow_count;
    2b0a:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <timer0_overflow_count>
    2b0e:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <timer0_overflow_count+0x1>
    2b12:	a0 91 14 03 	lds	r26, 0x0314	; 0x800314 <timer0_overflow_count+0x2>
    2b16:	b0 91 15 03 	lds	r27, 0x0315	; 0x800315 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2b1a:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2b1c:	a8 9b       	sbis	0x15, 0	; 21
    2b1e:	05 c0       	rjmp	.+10     	; 0x2b2a <micros+0x24>
    2b20:	2f 3f       	cpi	r18, 0xFF	; 255
    2b22:	19 f0       	breq	.+6      	; 0x2b2a <micros+0x24>
		m++;
    2b24:	01 96       	adiw	r24, 0x01	; 1
    2b26:	a1 1d       	adc	r26, r1
    2b28:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2b2a:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2b2c:	ba 2f       	mov	r27, r26
    2b2e:	a9 2f       	mov	r26, r25
    2b30:	98 2f       	mov	r25, r24
    2b32:	88 27       	eor	r24, r24
    2b34:	82 0f       	add	r24, r18
    2b36:	91 1d       	adc	r25, r1
    2b38:	a1 1d       	adc	r26, r1
    2b3a:	b1 1d       	adc	r27, r1
    2b3c:	bc 01       	movw	r22, r24
    2b3e:	cd 01       	movw	r24, r26
    2b40:	42 e0       	ldi	r20, 0x02	; 2
    2b42:	66 0f       	add	r22, r22
    2b44:	77 1f       	adc	r23, r23
    2b46:	88 1f       	adc	r24, r24
    2b48:	99 1f       	adc	r25, r25
    2b4a:	4a 95       	dec	r20
    2b4c:	d1 f7       	brne	.-12     	; 0x2b42 <micros+0x3c>
}
    2b4e:	08 95       	ret

00002b50 <delay>:

void delay(unsigned long ms)
{
    2b50:	8f 92       	push	r8
    2b52:	9f 92       	push	r9
    2b54:	af 92       	push	r10
    2b56:	bf 92       	push	r11
    2b58:	cf 92       	push	r12
    2b5a:	df 92       	push	r13
    2b5c:	ef 92       	push	r14
    2b5e:	ff 92       	push	r15
    2b60:	6b 01       	movw	r12, r22
    2b62:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2b64:	0e 94 83 15 	call	0x2b06	; 0x2b06 <micros>
    2b68:	4b 01       	movw	r8, r22
    2b6a:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2b6c:	c1 14       	cp	r12, r1
    2b6e:	d1 04       	cpc	r13, r1
    2b70:	e1 04       	cpc	r14, r1
    2b72:	f1 04       	cpc	r15, r1
    2b74:	01 f1       	breq	.+64     	; 0x2bb6 <delay+0x66>
		yield();
    2b76:	0e 94 af 19 	call	0x335e	; 0x335e <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2b7a:	0e 94 83 15 	call	0x2b06	; 0x2b06 <micros>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	88 19       	sub	r24, r8
    2b84:	99 09       	sbc	r25, r9
    2b86:	aa 09       	sbc	r26, r10
    2b88:	bb 09       	sbc	r27, r11
    2b8a:	88 3e       	cpi	r24, 0xE8	; 232
    2b8c:	93 40       	sbci	r25, 0x03	; 3
    2b8e:	a1 05       	cpc	r26, r1
    2b90:	b1 05       	cpc	r27, r1
    2b92:	60 f3       	brcs	.-40     	; 0x2b6c <delay+0x1c>
			ms--;
    2b94:	21 e0       	ldi	r18, 0x01	; 1
    2b96:	c2 1a       	sub	r12, r18
    2b98:	d1 08       	sbc	r13, r1
    2b9a:	e1 08       	sbc	r14, r1
    2b9c:	f1 08       	sbc	r15, r1
			start += 1000;
    2b9e:	88 ee       	ldi	r24, 0xE8	; 232
    2ba0:	88 0e       	add	r8, r24
    2ba2:	83 e0       	ldi	r24, 0x03	; 3
    2ba4:	98 1e       	adc	r9, r24
    2ba6:	a1 1c       	adc	r10, r1
    2ba8:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2baa:	c1 14       	cp	r12, r1
    2bac:	d1 04       	cpc	r13, r1
    2bae:	e1 04       	cpc	r14, r1
    2bb0:	f1 04       	cpc	r15, r1
    2bb2:	19 f7       	brne	.-58     	; 0x2b7a <delay+0x2a>
    2bb4:	db cf       	rjmp	.-74     	; 0x2b6c <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    2bb6:	ff 90       	pop	r15
    2bb8:	ef 90       	pop	r14
    2bba:	df 90       	pop	r13
    2bbc:	cf 90       	pop	r12
    2bbe:	bf 90       	pop	r11
    2bc0:	af 90       	pop	r10
    2bc2:	9f 90       	pop	r9
    2bc4:	8f 90       	pop	r8
    2bc6:	08 95       	ret

00002bc8 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2bc8:	82 30       	cpi	r24, 0x02	; 2
    2bca:	91 05       	cpc	r25, r1
    2bcc:	38 f0       	brcs	.+14     	; 0x2bdc <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2bce:	88 0f       	add	r24, r24
    2bd0:	99 1f       	adc	r25, r25
    2bd2:	88 0f       	add	r24, r24
    2bd4:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    2bd6:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <delayMicroseconds+0x10>
    2bdc:	08 95       	ret

00002bde <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2bde:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2be0:	84 b5       	in	r24, 0x24	; 36
    2be2:	82 60       	ori	r24, 0x02	; 2
    2be4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2be6:	84 b5       	in	r24, 0x24	; 36
    2be8:	81 60       	ori	r24, 0x01	; 1
    2bea:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2bec:	85 b5       	in	r24, 0x25	; 37
    2bee:	82 60       	ori	r24, 0x02	; 2
    2bf0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2bf2:	85 b5       	in	r24, 0x25	; 37
    2bf4:	81 60       	ori	r24, 0x01	; 1
    2bf6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2bf8:	ee e6       	ldi	r30, 0x6E	; 110
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	80 81       	ld	r24, Z
    2bfe:	81 60       	ori	r24, 0x01	; 1
    2c00:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2c02:	e1 e8       	ldi	r30, 0x81	; 129
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2c08:	80 81       	ld	r24, Z
    2c0a:	82 60       	ori	r24, 0x02	; 2
    2c0c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2c0e:	80 81       	ld	r24, Z
    2c10:	81 60       	ori	r24, 0x01	; 1
    2c12:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2c14:	e0 e8       	ldi	r30, 0x80	; 128
    2c16:	f0 e0       	ldi	r31, 0x00	; 0
    2c18:	80 81       	ld	r24, Z
    2c1a:	81 60       	ori	r24, 0x01	; 1
    2c1c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2c1e:	e1 eb       	ldi	r30, 0xB1	; 177
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	84 60       	ori	r24, 0x04	; 4
    2c26:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2c28:	e0 eb       	ldi	r30, 0xB0	; 176
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	80 81       	ld	r24, Z
    2c2e:	81 60       	ori	r24, 0x01	; 1
    2c30:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2c32:	ea e7       	ldi	r30, 0x7A	; 122
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	80 81       	ld	r24, Z
    2c38:	84 60       	ori	r24, 0x04	; 4
    2c3a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2c3c:	80 81       	ld	r24, Z
    2c3e:	82 60       	ori	r24, 0x02	; 2
    2c40:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2c42:	80 81       	ld	r24, Z
    2c44:	81 60       	ori	r24, 0x01	; 1
    2c46:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2c48:	80 81       	ld	r24, Z
    2c4a:	80 68       	ori	r24, 0x80	; 128
    2c4c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2c4e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2c52:	08 95       	ret

00002c54 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2c54:	83 30       	cpi	r24, 0x03	; 3
    2c56:	81 f0       	breq	.+32     	; 0x2c78 <turnOffPWM+0x24>
    2c58:	28 f4       	brcc	.+10     	; 0x2c64 <turnOffPWM+0x10>
    2c5a:	81 30       	cpi	r24, 0x01	; 1
    2c5c:	99 f0       	breq	.+38     	; 0x2c84 <turnOffPWM+0x30>
    2c5e:	82 30       	cpi	r24, 0x02	; 2
    2c60:	a1 f0       	breq	.+40     	; 0x2c8a <turnOffPWM+0x36>
    2c62:	08 95       	ret
    2c64:	87 30       	cpi	r24, 0x07	; 7
    2c66:	a9 f0       	breq	.+42     	; 0x2c92 <turnOffPWM+0x3e>
    2c68:	88 30       	cpi	r24, 0x08	; 8
    2c6a:	b9 f0       	breq	.+46     	; 0x2c9a <turnOffPWM+0x46>
    2c6c:	84 30       	cpi	r24, 0x04	; 4
    2c6e:	d1 f4       	brne	.+52     	; 0x2ca4 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2c70:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2c74:	8f 7d       	andi	r24, 0xDF	; 223
    2c76:	03 c0       	rjmp	.+6      	; 0x2c7e <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2c78:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2c7c:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2c7e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2c82:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2c84:	84 b5       	in	r24, 0x24	; 36
    2c86:	8f 77       	andi	r24, 0x7F	; 127
    2c88:	02 c0       	rjmp	.+4      	; 0x2c8e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2c8a:	84 b5       	in	r24, 0x24	; 36
    2c8c:	8f 7d       	andi	r24, 0xDF	; 223
    2c8e:	84 bd       	out	0x24, r24	; 36
    2c90:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2c92:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c96:	8f 77       	andi	r24, 0x7F	; 127
    2c98:	03 c0       	rjmp	.+6      	; 0x2ca0 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2c9a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2c9e:	8f 7d       	andi	r24, 0xDF	; 223
    2ca0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2ca4:	08 95       	ret

00002ca6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2ca6:	cf 93       	push	r28
    2ca8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	fc 01       	movw	r30, r24
    2cae:	e6 55       	subi	r30, 0x56	; 86
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	e2 54       	subi	r30, 0x42	; 66
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2cbc:	88 23       	and	r24, r24
    2cbe:	61 f1       	breq	.+88     	; 0x2d18 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	88 0f       	add	r24, r24
    2cc4:	99 1f       	adc	r25, r25
    2cc6:	fc 01       	movw	r30, r24
    2cc8:	ea 51       	subi	r30, 0x1A	; 26
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	c5 91       	lpm	r28, Z+
    2cce:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	e4 52       	subi	r30, 0x24	; 36
    2cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd6:	a5 91       	lpm	r26, Z+
    2cd8:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2cda:	61 11       	cpse	r22, r1
    2cdc:	09 c0       	rjmp	.+18     	; 0x2cf0 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2cde:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2ce0:	f8 94       	cli
		*reg &= ~bit;
    2ce2:	88 81       	ld	r24, Y
    2ce4:	20 95       	com	r18
    2ce6:	82 23       	and	r24, r18
    2ce8:	88 83       	st	Y, r24
		*out &= ~bit;
    2cea:	ec 91       	ld	r30, X
    2cec:	2e 23       	and	r18, r30
    2cee:	0b c0       	rjmp	.+22     	; 0x2d06 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2cf0:	62 30       	cpi	r22, 0x02	; 2
    2cf2:	61 f4       	brne	.+24     	; 0x2d0c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2cf4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2cf6:	f8 94       	cli
		*reg &= ~bit;
    2cf8:	88 81       	ld	r24, Y
    2cfa:	32 2f       	mov	r19, r18
    2cfc:	30 95       	com	r19
    2cfe:	83 23       	and	r24, r19
    2d00:	88 83       	st	Y, r24
		*out |= bit;
    2d02:	ec 91       	ld	r30, X
    2d04:	2e 2b       	or	r18, r30
    2d06:	2c 93       	st	X, r18
		SREG = oldSREG;
    2d08:	9f bf       	out	0x3f, r25	; 63
    2d0a:	06 c0       	rjmp	.+12     	; 0x2d18 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2d0c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2d0e:	f8 94       	cli
		*reg |= bit;
    2d10:	e8 81       	ld	r30, Y
    2d12:	2e 2b       	or	r18, r30
    2d14:	28 83       	st	Y, r18
		SREG = oldSREG;
    2d16:	8f bf       	out	0x3f, r24	; 63
	}
}
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	08 95       	ret

00002d1e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2d1e:	1f 93       	push	r17
    2d20:	cf 93       	push	r28
    2d22:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2d24:	28 2f       	mov	r18, r24
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	f9 01       	movw	r30, r18
    2d2a:	ea 56       	subi	r30, 0x6A	; 106
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2d30:	f9 01       	movw	r30, r18
    2d32:	e6 55       	subi	r30, 0x56	; 86
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2d38:	f9 01       	movw	r30, r18
    2d3a:	e2 54       	subi	r30, 0x42	; 66
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2d40:	cc 23       	and	r28, r28
    2d42:	c1 f0       	breq	.+48     	; 0x2d74 <digitalWrite+0x56>
    2d44:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2d46:	81 11       	cpse	r24, r1
    2d48:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <turnOffPWM>

	out = portOutputRegister(port);
    2d4c:	ec 2f       	mov	r30, r28
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	ee 0f       	add	r30, r30
    2d52:	ff 1f       	adc	r31, r31
    2d54:	e4 52       	subi	r30, 0x24	; 36
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	a5 91       	lpm	r26, Z+
    2d5a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2d5c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2d5e:	f8 94       	cli

	if (val == LOW) {
    2d60:	11 11       	cpse	r17, r1
    2d62:	04 c0       	rjmp	.+8      	; 0x2d6c <digitalWrite+0x4e>
		*out &= ~bit;
    2d64:	8c 91       	ld	r24, X
    2d66:	d0 95       	com	r29
    2d68:	d8 23       	and	r29, r24
    2d6a:	02 c0       	rjmp	.+4      	; 0x2d70 <digitalWrite+0x52>
	} else {
		*out |= bit;
    2d6c:	ec 91       	ld	r30, X
    2d6e:	de 2b       	or	r29, r30
    2d70:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2d72:	9f bf       	out	0x3f, r25	; 63
}
    2d74:	df 91       	pop	r29
    2d76:	cf 91       	pop	r28
    2d78:	1f 91       	pop	r17
    2d7a:	08 95       	ret

00002d7c <digitalRead>:

int digitalRead(uint8_t pin)
{
    2d7c:	cf 93       	push	r28
    2d7e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    2d80:	28 2f       	mov	r18, r24
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	f9 01       	movw	r30, r18
    2d86:	ea 56       	subi	r30, 0x6A	; 106
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2d8c:	f9 01       	movw	r30, r18
    2d8e:	e6 55       	subi	r30, 0x56	; 86
    2d90:	ff 4f       	sbci	r31, 0xFF	; 255
    2d92:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2d94:	f9 01       	movw	r30, r18
    2d96:	e2 54       	subi	r30, 0x42	; 66
    2d98:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9a:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    2d9c:	cc 23       	and	r28, r28
    2d9e:	91 f0       	breq	.+36     	; 0x2dc4 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2da0:	81 11       	cpse	r24, r1
    2da2:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2da6:	ec 2f       	mov	r30, r28
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	ee 0f       	add	r30, r30
    2dac:	ff 1f       	adc	r31, r31
    2dae:	ee 52       	subi	r30, 0x2E	; 46
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	a5 91       	lpm	r26, Z+
    2db4:	b4 91       	lpm	r27, Z
    2db6:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2db8:	ed 23       	and	r30, r29
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	21 f4       	brne	.+8      	; 0x2dc8 <digitalRead+0x4c>
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	02 c0       	rjmp	.+4      	; 0x2dc8 <digitalRead+0x4c>
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2dc8:	df 91       	pop	r29
    2dca:	cf 91       	pop	r28
    2dcc:	08 95       	ret

00002dce <__vector_11>:
  return this->servoIndex ;
}

void Servo::detach()
{
  servos[this->servoIndex].Pin.isActive = false;
    2dce:	1f 92       	push	r1
    2dd0:	0f 92       	push	r0
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	0f 92       	push	r0
    2dd6:	11 24       	eor	r1, r1
    2dd8:	2f 93       	push	r18
    2dda:	3f 93       	push	r19
    2ddc:	4f 93       	push	r20
    2dde:	5f 93       	push	r21
    2de0:	6f 93       	push	r22
    2de2:	7f 93       	push	r23
    2de4:	8f 93       	push	r24
    2de6:	9f 93       	push	r25
    2de8:	af 93       	push	r26
    2dea:	bf 93       	push	r27
    2dec:	ef 93       	push	r30
    2dee:	ff 93       	push	r31
    2df0:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZL7Channel>
    2df4:	87 ff       	sbrs	r24, 7
    2df6:	05 c0       	rjmp	.+10     	; 0x2e02 <__vector_11+0x34>
    2df8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2dfc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    2e00:	1b c0       	rjmp	.+54     	; 0x2e38 <__vector_11+0x6a>
    2e02:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <_ZL7Channel>
    2e06:	02 2e       	mov	r0, r18
    2e08:	00 0c       	add	r0, r0
    2e0a:	33 0b       	sbc	r19, r19
    2e0c:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <ServoCount>
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	28 17       	cp	r18, r24
    2e14:	39 07       	cpc	r19, r25
    2e16:	84 f4       	brge	.+32     	; 0x2e38 <__vector_11+0x6a>
    2e18:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZL7Channel>
    2e1c:	08 2e       	mov	r0, r24
    2e1e:	00 0c       	add	r0, r0
    2e20:	99 0b       	sbc	r25, r25
    2e22:	fc 01       	movw	r30, r24
    2e24:	ee 0f       	add	r30, r30
    2e26:	ff 1f       	adc	r31, r31
    2e28:	8e 0f       	add	r24, r30
    2e2a:	9f 1f       	adc	r25, r31
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	e8 5e       	subi	r30, 0xE8	; 232
    2e30:	fc 4f       	sbci	r31, 0xFC	; 252
    2e32:	80 81       	ld	r24, Z
    2e34:	86 fd       	sbrc	r24, 6
    2e36:	15 c0       	rjmp	.+42     	; 0x2e62 <__vector_11+0x94>
    2e38:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZL7Channel>
    2e3c:	8f 5f       	subi	r24, 0xFF	; 255
    2e3e:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_ZL7Channel>
    2e42:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <_ZL7Channel>
    2e46:	02 2e       	mov	r0, r18
    2e48:	00 0c       	add	r0, r0
    2e4a:	33 0b       	sbc	r19, r19
    2e4c:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <ServoCount>
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	28 17       	cp	r18, r24
    2e54:	39 07       	cpc	r19, r25
    2e56:	c4 f4       	brge	.+48     	; 0x2e88 <__vector_11+0xba>
    2e58:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZL7Channel>
    2e5c:	8c 30       	cpi	r24, 0x0C	; 12
    2e5e:	64 f1       	brlt	.+88     	; 0x2eb8 <__vector_11+0xea>
    2e60:	13 c0       	rjmp	.+38     	; 0x2e88 <__vector_11+0xba>
    2e62:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZL7Channel>
    2e66:	08 2e       	mov	r0, r24
    2e68:	00 0c       	add	r0, r0
    2e6a:	99 0b       	sbc	r25, r25
    2e6c:	fc 01       	movw	r30, r24
    2e6e:	ee 0f       	add	r30, r30
    2e70:	ff 1f       	adc	r31, r31
    2e72:	8e 0f       	add	r24, r30
    2e74:	9f 1f       	adc	r25, r31
    2e76:	fc 01       	movw	r30, r24
    2e78:	e8 5e       	subi	r30, 0xE8	; 232
    2e7a:	fc 4f       	sbci	r31, 0xFC	; 252
    2e7c:	80 81       	ld	r24, Z
    2e7e:	60 e0       	ldi	r22, 0x00	; 0
    2e80:	8f 73       	andi	r24, 0x3F	; 63
    2e82:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <digitalWrite>
    2e86:	d8 cf       	rjmp	.-80     	; 0x2e38 <__vector_11+0x6a>
    2e88:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    2e8c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2e90:	04 96       	adiw	r24, 0x04	; 4
    2e92:	80 34       	cpi	r24, 0x40	; 64
    2e94:	9c 49       	sbci	r25, 0x9C	; 156
    2e96:	18 f4       	brcc	.+6      	; 0x2e9e <__vector_11+0xd0>
    2e98:	80 e4       	ldi	r24, 0x40	; 64
    2e9a:	9c e9       	ldi	r25, 0x9C	; 156
    2e9c:	05 c0       	rjmp	.+10     	; 0x2ea8 <__vector_11+0xda>
    2e9e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    2ea2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2ea6:	04 96       	adiw	r24, 0x04	; 4
    2ea8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2eac:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2eb0:	8f ef       	ldi	r24, 0xFF	; 255
    2eb2:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_ZL7Channel>
    2eb6:	3b c0       	rjmp	.+118    	; 0x2f2e <__vector_11+0x160>
    2eb8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    2ebc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2ec0:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZL7Channel>
    2ec4:	08 2e       	mov	r0, r24
    2ec6:	00 0c       	add	r0, r0
    2ec8:	99 0b       	sbc	r25, r25
    2eca:	fc 01       	movw	r30, r24
    2ecc:	ee 0f       	add	r30, r30
    2ece:	ff 1f       	adc	r31, r31
    2ed0:	8e 0f       	add	r24, r30
    2ed2:	9f 1f       	adc	r25, r31
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	e8 5e       	subi	r30, 0xE8	; 232
    2ed8:	fc 4f       	sbci	r31, 0xFC	; 252
    2eda:	81 81       	ldd	r24, Z+1	; 0x01
    2edc:	92 81       	ldd	r25, Z+2	; 0x02
    2ede:	82 0f       	add	r24, r18
    2ee0:	93 1f       	adc	r25, r19
    2ee2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2ee6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2eea:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZL7Channel>
    2eee:	08 2e       	mov	r0, r24
    2ef0:	00 0c       	add	r0, r0
    2ef2:	99 0b       	sbc	r25, r25
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	ee 0f       	add	r30, r30
    2ef8:	ff 1f       	adc	r31, r31
    2efa:	8e 0f       	add	r24, r30
    2efc:	9f 1f       	adc	r25, r31
    2efe:	fc 01       	movw	r30, r24
    2f00:	e8 5e       	subi	r30, 0xE8	; 232
    2f02:	fc 4f       	sbci	r31, 0xFC	; 252
    2f04:	80 81       	ld	r24, Z
    2f06:	86 ff       	sbrs	r24, 6
    2f08:	12 c0       	rjmp	.+36     	; 0x2f2e <__vector_11+0x160>
    2f0a:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_ZL7Channel>
    2f0e:	08 2e       	mov	r0, r24
    2f10:	00 0c       	add	r0, r0
    2f12:	99 0b       	sbc	r25, r25
    2f14:	fc 01       	movw	r30, r24
    2f16:	ee 0f       	add	r30, r30
    2f18:	ff 1f       	adc	r31, r31
    2f1a:	8e 0f       	add	r24, r30
    2f1c:	9f 1f       	adc	r25, r31
    2f1e:	fc 01       	movw	r30, r24
    2f20:	e8 5e       	subi	r30, 0xE8	; 232
    2f22:	fc 4f       	sbci	r31, 0xFC	; 252
    2f24:	80 81       	ld	r24, Z
    2f26:	61 e0       	ldi	r22, 0x01	; 1
    2f28:	8f 73       	andi	r24, 0x3F	; 63
    2f2a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <digitalWrite>
    2f2e:	ff 91       	pop	r31
    2f30:	ef 91       	pop	r30
    2f32:	bf 91       	pop	r27
    2f34:	af 91       	pop	r26
    2f36:	9f 91       	pop	r25
    2f38:	8f 91       	pop	r24
    2f3a:	7f 91       	pop	r23
    2f3c:	6f 91       	pop	r22
    2f3e:	5f 91       	pop	r21
    2f40:	4f 91       	pop	r20
    2f42:	3f 91       	pop	r19
    2f44:	2f 91       	pop	r18
    2f46:	0f 90       	pop	r0
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	0f 90       	pop	r0
    2f4c:	1f 90       	pop	r1
    2f4e:	18 95       	reti

00002f50 <_ZN5ServoC1Ev>:
    2f50:	fc 01       	movw	r30, r24
    2f52:	90 91 16 03 	lds	r25, 0x0316	; 0x800316 <ServoCount>
    2f56:	9c 30       	cpi	r25, 0x0C	; 12
    2f58:	a0 f4       	brcc	.+40     	; 0x2f82 <_ZN5ServoC1Ev+0x32>
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	89 0f       	add	r24, r25
    2f5e:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <ServoCount>
    2f62:	90 83       	st	Z, r25
    2f64:	89 2f       	mov	r24, r25
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	fc 01       	movw	r30, r24
    2f6a:	ee 0f       	add	r30, r30
    2f6c:	ff 1f       	adc	r31, r31
    2f6e:	8e 0f       	add	r24, r30
    2f70:	9f 1f       	adc	r25, r31
    2f72:	fc 01       	movw	r30, r24
    2f74:	e8 5e       	subi	r30, 0xE8	; 232
    2f76:	fc 4f       	sbci	r31, 0xFC	; 252
    2f78:	88 eb       	ldi	r24, 0xB8	; 184
    2f7a:	9b e0       	ldi	r25, 0x0B	; 11
    2f7c:	92 83       	std	Z+2, r25	; 0x02
    2f7e:	81 83       	std	Z+1, r24	; 0x01
    2f80:	08 95       	ret
    2f82:	8f ef       	ldi	r24, 0xFF	; 255
    2f84:	80 83       	st	Z, r24
    2f86:	08 95       	ret

00002f88 <_ZN5Servo6attachEiii>:
    2f88:	df 92       	push	r13
    2f8a:	ef 92       	push	r14
    2f8c:	ff 92       	push	r15
    2f8e:	0f 93       	push	r16
    2f90:	1f 93       	push	r17
    2f92:	cf 93       	push	r28
    2f94:	df 93       	push	r29
    2f96:	ec 01       	movw	r28, r24
    2f98:	d6 2e       	mov	r13, r22
    2f9a:	7a 01       	movw	r14, r20
    2f9c:	89 01       	movw	r16, r18
    2f9e:	88 81       	ld	r24, Y
    2fa0:	8c 30       	cpi	r24, 0x0C	; 12
    2fa2:	08 f0       	brcs	.+2      	; 0x2fa6 <_ZN5Servo6attachEiii+0x1e>
    2fa4:	68 c0       	rjmp	.+208    	; 0x3076 <_ZN5Servo6attachEiii+0xee>
    2fa6:	61 e0       	ldi	r22, 0x01	; 1
    2fa8:	8d 2d       	mov	r24, r13
    2faa:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <pinMode>
    2fae:	88 81       	ld	r24, Y
    2fb0:	e8 2f       	mov	r30, r24
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	9f 01       	movw	r18, r30
    2fb6:	22 0f       	add	r18, r18
    2fb8:	33 1f       	adc	r19, r19
    2fba:	e2 0f       	add	r30, r18
    2fbc:	f3 1f       	adc	r31, r19
    2fbe:	e8 5e       	subi	r30, 0xE8	; 232
    2fc0:	fc 4f       	sbci	r31, 0xFC	; 252
    2fc2:	9d 2d       	mov	r25, r13
    2fc4:	9f 73       	andi	r25, 0x3F	; 63
    2fc6:	20 81       	ld	r18, Z
    2fc8:	20 7c       	andi	r18, 0xC0	; 192
    2fca:	d2 2e       	mov	r13, r18
    2fcc:	d9 2a       	or	r13, r25
    2fce:	d0 82       	st	Z, r13
    2fd0:	20 e2       	ldi	r18, 0x20	; 32
    2fd2:	32 e0       	ldi	r19, 0x02	; 2
    2fd4:	2e 19       	sub	r18, r14
    2fd6:	3f 09       	sbc	r19, r15
    2fd8:	37 ff       	sbrs	r19, 7
    2fda:	02 c0       	rjmp	.+4      	; 0x2fe0 <_ZN5Servo6attachEiii+0x58>
    2fdc:	2d 5f       	subi	r18, 0xFD	; 253
    2fde:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe0:	35 95       	asr	r19
    2fe2:	27 95       	ror	r18
    2fe4:	35 95       	asr	r19
    2fe6:	27 95       	ror	r18
    2fe8:	29 83       	std	Y+1, r18	; 0x01
    2fea:	20 e6       	ldi	r18, 0x60	; 96
    2fec:	39 e0       	ldi	r19, 0x09	; 9
    2fee:	20 1b       	sub	r18, r16
    2ff0:	31 0b       	sbc	r19, r17
    2ff2:	37 ff       	sbrs	r19, 7
    2ff4:	02 c0       	rjmp	.+4      	; 0x2ffa <_ZN5Servo6attachEiii+0x72>
    2ff6:	2d 5f       	subi	r18, 0xFD	; 253
    2ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    2ffa:	35 95       	asr	r19
    2ffc:	27 95       	ror	r18
    2ffe:	35 95       	asr	r19
    3000:	27 95       	ror	r18
    3002:	2a 83       	std	Y+2, r18	; 0x02
    3004:	2c e0       	ldi	r18, 0x0C	; 12
    3006:	62 2f       	mov	r22, r18
    3008:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <__udivmodqi4>
    300c:	28 9f       	mul	r18, r24
    300e:	b0 01       	movw	r22, r0
    3010:	11 24       	eor	r1, r1
    3012:	40 e0       	ldi	r20, 0x00	; 0
    3014:	50 e0       	ldi	r21, 0x00	; 0
    3016:	9b 01       	movw	r18, r22
    3018:	24 0f       	add	r18, r20
    301a:	35 1f       	adc	r19, r21
    301c:	f9 01       	movw	r30, r18
    301e:	ee 0f       	add	r30, r30
    3020:	ff 1f       	adc	r31, r31
    3022:	2e 0f       	add	r18, r30
    3024:	3f 1f       	adc	r19, r31
    3026:	f9 01       	movw	r30, r18
    3028:	e8 5e       	subi	r30, 0xE8	; 232
    302a:	fc 4f       	sbci	r31, 0xFC	; 252
    302c:	90 81       	ld	r25, Z
    302e:	96 fd       	sbrc	r25, 6
    3030:	16 c0       	rjmp	.+44     	; 0x305e <_ZN5Servo6attachEiii+0xd6>
    3032:	4f 5f       	subi	r20, 0xFF	; 255
    3034:	5f 4f       	sbci	r21, 0xFF	; 255
    3036:	4c 30       	cpi	r20, 0x0C	; 12
    3038:	51 05       	cpc	r21, r1
    303a:	69 f7       	brne	.-38     	; 0x3016 <_ZN5Servo6attachEiii+0x8e>
    303c:	81 11       	cpse	r24, r1
    303e:	0f c0       	rjmp	.+30     	; 0x305e <_ZN5Servo6attachEiii+0xd6>
    3040:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3044:	82 e0       	ldi	r24, 0x02	; 2
    3046:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    304a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    304e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    3052:	b1 9a       	sbi	0x16, 1	; 22
    3054:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    3058:	82 60       	ori	r24, 0x02	; 2
    305a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    305e:	e8 81       	ld	r30, Y
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	cf 01       	movw	r24, r30
    3064:	88 0f       	add	r24, r24
    3066:	99 1f       	adc	r25, r25
    3068:	e8 0f       	add	r30, r24
    306a:	f9 1f       	adc	r31, r25
    306c:	e8 5e       	subi	r30, 0xE8	; 232
    306e:	fc 4f       	sbci	r31, 0xFC	; 252
    3070:	80 81       	ld	r24, Z
    3072:	80 64       	ori	r24, 0x40	; 64
    3074:	80 83       	st	Z, r24
    3076:	88 81       	ld	r24, Y
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	1f 91       	pop	r17
    307e:	0f 91       	pop	r16
    3080:	ff 90       	pop	r15
    3082:	ef 90       	pop	r14
    3084:	df 90       	pop	r13
    3086:	08 95       	ret

00003088 <_ZN5Servo6attachEi>:
    3088:	20 e6       	ldi	r18, 0x60	; 96
    308a:	39 e0       	ldi	r19, 0x09	; 9
    308c:	40 e2       	ldi	r20, 0x20	; 32
    308e:	52 e0       	ldi	r21, 0x02	; 2
    3090:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <_ZN5Servo6attachEiii>

00003094 <_ZN5Servo17writeMicrosecondsEi>:
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
{
    3094:	fc 01       	movw	r30, r24
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    3096:	90 81       	ld	r25, Z
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    3098:	9c 30       	cpi	r25, 0x0C	; 12
    309a:	88 f5       	brcc	.+98     	; 0x30fe <_ZN5Servo17writeMicrosecondsEi+0x6a>
  {
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    309c:	81 81       	ldd	r24, Z+1	; 0x01
    309e:	28 e8       	ldi	r18, 0x88	; 136
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	28 1b       	sub	r18, r24
    30a4:	31 09       	sbc	r19, r1
    30a6:	87 fd       	sbrc	r24, 7
    30a8:	33 95       	inc	r19
    30aa:	22 0f       	add	r18, r18
    30ac:	33 1f       	adc	r19, r19
    30ae:	22 0f       	add	r18, r18
    30b0:	33 1f       	adc	r19, r19
    30b2:	62 17       	cp	r22, r18
    30b4:	73 07       	cpc	r23, r19
    30b6:	84 f0       	brlt	.+32     	; 0x30d8 <_ZN5Servo17writeMicrosecondsEi+0x44>
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
    30b8:	82 81       	ldd	r24, Z+2	; 0x02
    30ba:	48 e5       	ldi	r20, 0x58	; 88
    30bc:	52 e0       	ldi	r21, 0x02	; 2
    30be:	48 1b       	sub	r20, r24
    30c0:	51 09       	sbc	r21, r1
    30c2:	87 fd       	sbrc	r24, 7
    30c4:	53 95       	inc	r21
    30c6:	44 0f       	add	r20, r20
    30c8:	55 1f       	adc	r21, r21
    30ca:	44 0f       	add	r20, r20
    30cc:	55 1f       	adc	r21, r21
    30ce:	9b 01       	movw	r18, r22
    30d0:	46 17       	cp	r20, r22
    30d2:	57 07       	cpc	r21, r23
    30d4:	0c f4       	brge	.+2      	; 0x30d8 <_ZN5Servo17writeMicrosecondsEi+0x44>
    30d6:	9a 01       	movw	r18, r20
      value = SERVO_MAX();

    value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    30d8:	22 50       	subi	r18, 0x02	; 2
    30da:	31 09       	sbc	r19, r1
    30dc:	22 0f       	add	r18, r18
    30de:	33 1f       	adc	r19, r19

    uint8_t oldSREG = SREG;
    30e0:	4f b7       	in	r20, 0x3f	; 63
    cli();
    30e2:	f8 94       	cli
    servos[channel].ticks = value;
    30e4:	89 2f       	mov	r24, r25
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	fc 01       	movw	r30, r24
    30ea:	ee 0f       	add	r30, r30
    30ec:	ff 1f       	adc	r31, r31
    30ee:	8e 0f       	add	r24, r30
    30f0:	9f 1f       	adc	r25, r31
    30f2:	fc 01       	movw	r30, r24
    30f4:	e8 5e       	subi	r30, 0xE8	; 232
    30f6:	fc 4f       	sbci	r31, 0xFC	; 252
    30f8:	32 83       	std	Z+2, r19	; 0x02
    30fa:	21 83       	std	Z+1, r18	; 0x01
    SREG = oldSREG;
    30fc:	4f bf       	out	0x3f, r20	; 63
    30fe:	08 95       	ret

00003100 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3100:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <_ZN7TwoWire14rxBufferLengthE>
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	20 91 6d 03 	lds	r18, 0x036D	; 0x80036d <_ZN7TwoWire13rxBufferIndexE>
    310a:	82 1b       	sub	r24, r18
    310c:	91 09       	sbc	r25, r1
    310e:	08 95       	ret

00003110 <_ZN7TwoWire4readEv>:
    3110:	90 91 6d 03 	lds	r25, 0x036D	; 0x80036d <_ZN7TwoWire13rxBufferIndexE>
    3114:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <_ZN7TwoWire14rxBufferLengthE>
    3118:	98 17       	cp	r25, r24
    311a:	50 f4       	brcc	.+20     	; 0x3130 <_ZN7TwoWire4readEv+0x20>
    311c:	e9 2f       	mov	r30, r25
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	e2 59       	subi	r30, 0x92	; 146
    3122:	fc 4f       	sbci	r31, 0xFC	; 252
    3124:	20 81       	ld	r18, Z
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	9f 5f       	subi	r25, 0xFF	; 255
    312a:	90 93 6d 03 	sts	0x036D, r25	; 0x80036d <_ZN7TwoWire13rxBufferIndexE>
    312e:	02 c0       	rjmp	.+4      	; 0x3134 <_ZN7TwoWire4readEv+0x24>
    3130:	2f ef       	ldi	r18, 0xFF	; 255
    3132:	3f ef       	ldi	r19, 0xFF	; 255
    3134:	c9 01       	movw	r24, r18
    3136:	08 95       	ret

00003138 <_ZN7TwoWire4peekEv>:
    3138:	e0 91 6d 03 	lds	r30, 0x036D	; 0x80036d <_ZN7TwoWire13rxBufferIndexE>
    313c:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <_ZN7TwoWire14rxBufferLengthE>
    3140:	e8 17       	cp	r30, r24
    3142:	30 f4       	brcc	.+12     	; 0x3150 <_ZN7TwoWire4peekEv+0x18>
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	e2 59       	subi	r30, 0x92	; 146
    3148:	fc 4f       	sbci	r31, 0xFC	; 252
    314a:	80 81       	ld	r24, Z
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	08 95       	ret
    3150:	8f ef       	ldi	r24, 0xFF	; 255
    3152:	9f ef       	ldi	r25, 0xFF	; 255
    3154:	08 95       	ret

00003156 <_ZN7TwoWire5flushEv>:
    3156:	08 95       	ret

00003158 <_ZN7TwoWire5writeEPKhj>:
    3158:	cf 92       	push	r12
    315a:	df 92       	push	r13
    315c:	ef 92       	push	r14
    315e:	ff 92       	push	r15
    3160:	0f 93       	push	r16
    3162:	1f 93       	push	r17
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	7c 01       	movw	r14, r24
    316a:	cb 01       	movw	r24, r22
    316c:	8a 01       	movw	r16, r20
    316e:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <_ZN7TwoWire12transmittingE>
    3172:	22 23       	and	r18, r18
    3174:	89 f0       	breq	.+34     	; 0x3198 <_ZN7TwoWire5writeEPKhj+0x40>
    3176:	eb 01       	movw	r28, r22
    3178:	6b 01       	movw	r12, r22
    317a:	c4 0e       	add	r12, r20
    317c:	d5 1e       	adc	r13, r21
    317e:	cc 15       	cp	r28, r12
    3180:	dd 05       	cpc	r29, r13
    3182:	69 f0       	breq	.+26     	; 0x319e <_ZN7TwoWire5writeEPKhj+0x46>
    3184:	69 91       	ld	r22, Y+
    3186:	d7 01       	movw	r26, r14
    3188:	ed 91       	ld	r30, X+
    318a:	fc 91       	ld	r31, X
    318c:	01 90       	ld	r0, Z+
    318e:	f0 81       	ld	r31, Z
    3190:	e0 2d       	mov	r30, r0
    3192:	c7 01       	movw	r24, r14
    3194:	09 95       	icall
    3196:	f3 cf       	rjmp	.-26     	; 0x317e <_ZN7TwoWire5writeEPKhj+0x26>
    3198:	64 2f       	mov	r22, r20
    319a:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <twi_transmit>
    319e:	c8 01       	movw	r24, r16
    31a0:	df 91       	pop	r29
    31a2:	cf 91       	pop	r28
    31a4:	1f 91       	pop	r17
    31a6:	0f 91       	pop	r16
    31a8:	ff 90       	pop	r15
    31aa:	ef 90       	pop	r14
    31ac:	df 90       	pop	r13
    31ae:	cf 90       	pop	r12
    31b0:	08 95       	ret

000031b2 <_ZN7TwoWire5writeEh>:
    31b2:	cf 93       	push	r28
    31b4:	df 93       	push	r29
    31b6:	1f 92       	push	r1
    31b8:	cd b7       	in	r28, 0x3d	; 61
    31ba:	de b7       	in	r29, 0x3e	; 62
    31bc:	69 83       	std	Y+1, r22	; 0x01
    31be:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <_ZN7TwoWire12transmittingE>
    31c2:	22 23       	and	r18, r18
    31c4:	d1 f0       	breq	.+52     	; 0x31fa <_ZN7TwoWire5writeEh+0x48>
    31c6:	20 91 49 03 	lds	r18, 0x0349	; 0x800349 <_ZN7TwoWire14txBufferLengthE>
    31ca:	20 32       	cpi	r18, 0x20	; 32
    31cc:	40 f0       	brcs	.+16     	; 0x31de <_ZN7TwoWire5writeEh+0x2c>
    31ce:	21 e0       	ldi	r18, 0x01	; 1
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	fc 01       	movw	r30, r24
    31d4:	33 83       	std	Z+3, r19	; 0x03
    31d6:	22 83       	std	Z+2, r18	; 0x02
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	15 c0       	rjmp	.+42     	; 0x3208 <_ZN7TwoWire5writeEh+0x56>
    31de:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <_ZN7TwoWire13txBufferIndexE>
    31e2:	e8 2f       	mov	r30, r24
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	e5 5b       	subi	r30, 0xB5	; 181
    31e8:	fc 4f       	sbci	r31, 0xFC	; 252
    31ea:	99 81       	ldd	r25, Y+1	; 0x01
    31ec:	90 83       	st	Z, r25
    31ee:	8f 5f       	subi	r24, 0xFF	; 255
    31f0:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <_ZN7TwoWire13txBufferIndexE>
    31f4:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <_ZN7TwoWire14txBufferLengthE>
    31f8:	05 c0       	rjmp	.+10     	; 0x3204 <_ZN7TwoWire5writeEh+0x52>
    31fa:	61 e0       	ldi	r22, 0x01	; 1
    31fc:	ce 01       	movw	r24, r28
    31fe:	01 96       	adiw	r24, 0x01	; 1
    3200:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <twi_transmit>
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	0f 90       	pop	r0
    320a:	df 91       	pop	r29
    320c:	cf 91       	pop	r28
    320e:	08 95       	ret

00003210 <_ZN7TwoWireC1Ev>:
    3210:	fc 01       	movw	r30, r24
    3212:	13 82       	std	Z+3, r1	; 0x03
    3214:	12 82       	std	Z+2, r1	; 0x02
    3216:	88 ee       	ldi	r24, 0xE8	; 232
    3218:	93 e0       	ldi	r25, 0x03	; 3
    321a:	a0 e0       	ldi	r26, 0x00	; 0
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	84 83       	std	Z+4, r24	; 0x04
    3220:	95 83       	std	Z+5, r25	; 0x05
    3222:	a6 83       	std	Z+6, r26	; 0x06
    3224:	b7 83       	std	Z+7, r27	; 0x07
    3226:	84 e9       	ldi	r24, 0x94	; 148
    3228:	91 e0       	ldi	r25, 0x01	; 1
    322a:	91 83       	std	Z+1, r25	; 0x01
    322c:	80 83       	st	Z, r24
    322e:	08 95       	ret

00003230 <_ZN7TwoWire5beginEv>:
    3230:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <_ZN7TwoWire13rxBufferIndexE>
    3234:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <_ZN7TwoWire14rxBufferLengthE>
    3238:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <_ZN7TwoWire13txBufferIndexE>
    323c:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <_ZN7TwoWire14txBufferLengthE>
    3240:	0c 94 b0 19 	jmp	0x3360	; 0x3360 <twi_init>

00003244 <_ZN7TwoWire17beginTransmissionEh>:
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <_ZN7TwoWire12transmittingE>
    324a:	60 93 6b 03 	sts	0x036B, r22	; 0x80036b <_ZN7TwoWire9txAddressE>
    324e:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <_ZN7TwoWire13txBufferIndexE>
    3252:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <_ZN7TwoWire14txBufferLengthE>
    3256:	08 95       	ret

00003258 <_ZN7TwoWire17beginTransmissionEi>:
    3258:	0c 94 22 19 	jmp	0x3244	; 0x3244 <_ZN7TwoWire17beginTransmissionEh>

0000325c <_ZN7TwoWire15endTransmissionEh>:
    325c:	0f 93       	push	r16
    325e:	06 2f       	mov	r16, r22
    3260:	21 e0       	ldi	r18, 0x01	; 1
    3262:	40 91 49 03 	lds	r20, 0x0349	; 0x800349 <_ZN7TwoWire14txBufferLengthE>
    3266:	6b e4       	ldi	r22, 0x4B	; 75
    3268:	73 e0       	ldi	r23, 0x03	; 3
    326a:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <_ZN7TwoWire9txAddressE>
    326e:	0e 94 16 1a 	call	0x342c	; 0x342c <twi_writeTo>
    3272:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <_ZN7TwoWire13txBufferIndexE>
    3276:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <_ZN7TwoWire14txBufferLengthE>
    327a:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <_ZN7TwoWire12transmittingE>
    327e:	0f 91       	pop	r16
    3280:	08 95       	ret

00003282 <_ZN7TwoWire11requestFromEhhmhh>:
    3282:	4f 92       	push	r4
    3284:	5f 92       	push	r5
    3286:	6f 92       	push	r6
    3288:	7f 92       	push	r7
    328a:	af 92       	push	r10
    328c:	bf 92       	push	r11
    328e:	cf 92       	push	r12
    3290:	ef 92       	push	r14
    3292:	ff 92       	push	r15
    3294:	0f 93       	push	r16
    3296:	1f 93       	push	r17
    3298:	cf 93       	push	r28
    329a:	df 93       	push	r29
    329c:	5c 01       	movw	r10, r24
    329e:	f6 2e       	mov	r15, r22
    32a0:	d4 2f       	mov	r29, r20
    32a2:	28 01       	movw	r4, r16
    32a4:	39 01       	movw	r6, r18
    32a6:	ee 20       	and	r14, r14
    32a8:	21 f1       	breq	.+72     	; 0x32f2 <_ZN7TwoWire11requestFromEhhmhh+0x70>
    32aa:	0e 94 22 19 	call	0x3244	; 0x3244 <_ZN7TwoWire17beginTransmissionEh>
    32ae:	ce 2d       	mov	r28, r14
    32b0:	c4 30       	cpi	r28, 0x04	; 4
    32b2:	08 f0       	brcs	.+2      	; 0x32b6 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    32b4:	c3 e0       	ldi	r28, 0x03	; 3
    32b6:	c1 50       	subi	r28, 0x01	; 1
    32b8:	c0 f0       	brcs	.+48     	; 0x32ea <_ZN7TwoWire11requestFromEhhmhh+0x68>
    32ba:	28 e0       	ldi	r18, 0x08	; 8
    32bc:	c2 9f       	mul	r28, r18
    32be:	c0 01       	movw	r24, r0
    32c0:	11 24       	eor	r1, r1
    32c2:	a3 01       	movw	r20, r6
    32c4:	92 01       	movw	r18, r4
    32c6:	04 c0       	rjmp	.+8      	; 0x32d0 <_ZN7TwoWire11requestFromEhhmhh+0x4e>
    32c8:	56 95       	lsr	r21
    32ca:	47 95       	ror	r20
    32cc:	37 95       	ror	r19
    32ce:	27 95       	ror	r18
    32d0:	8a 95       	dec	r24
    32d2:	d2 f7       	brpl	.-12     	; 0x32c8 <_ZN7TwoWire11requestFromEhhmhh+0x46>
    32d4:	ca 01       	movw	r24, r20
    32d6:	b9 01       	movw	r22, r18
    32d8:	d5 01       	movw	r26, r10
    32da:	ed 91       	ld	r30, X+
    32dc:	fc 91       	ld	r31, X
    32de:	01 90       	ld	r0, Z+
    32e0:	f0 81       	ld	r31, Z
    32e2:	e0 2d       	mov	r30, r0
    32e4:	c5 01       	movw	r24, r10
    32e6:	09 95       	icall
    32e8:	e6 cf       	rjmp	.-52     	; 0x32b6 <_ZN7TwoWire11requestFromEhhmhh+0x34>
    32ea:	60 e0       	ldi	r22, 0x00	; 0
    32ec:	c5 01       	movw	r24, r10
    32ee:	0e 94 2e 19 	call	0x325c	; 0x325c <_ZN7TwoWire15endTransmissionEh>
    32f2:	4d 2f       	mov	r20, r29
    32f4:	d1 32       	cpi	r29, 0x21	; 33
    32f6:	08 f0       	brcs	.+2      	; 0x32fa <_ZN7TwoWire11requestFromEhhmhh+0x78>
    32f8:	40 e2       	ldi	r20, 0x20	; 32
    32fa:	2c 2d       	mov	r18, r12
    32fc:	6e e6       	ldi	r22, 0x6E	; 110
    32fe:	73 e0       	ldi	r23, 0x03	; 3
    3300:	8f 2d       	mov	r24, r15
    3302:	0e 94 ce 19 	call	0x339c	; 0x339c <twi_readFrom>
    3306:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <_ZN7TwoWire13rxBufferIndexE>
    330a:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <_ZN7TwoWire14rxBufferLengthE>
    330e:	df 91       	pop	r29
    3310:	cf 91       	pop	r28
    3312:	1f 91       	pop	r17
    3314:	0f 91       	pop	r16
    3316:	ff 90       	pop	r15
    3318:	ef 90       	pop	r14
    331a:	cf 90       	pop	r12
    331c:	bf 90       	pop	r11
    331e:	af 90       	pop	r10
    3320:	7f 90       	pop	r7
    3322:	6f 90       	pop	r6
    3324:	5f 90       	pop	r5
    3326:	4f 90       	pop	r4
    3328:	08 95       	ret

0000332a <_ZN7TwoWire11requestFromEhhh>:
    332a:	cf 92       	push	r12
    332c:	ef 92       	push	r14
    332e:	0f 93       	push	r16
    3330:	1f 93       	push	r17
    3332:	c2 2e       	mov	r12, r18
    3334:	e1 2c       	mov	r14, r1
    3336:	00 e0       	ldi	r16, 0x00	; 0
    3338:	10 e0       	ldi	r17, 0x00	; 0
    333a:	98 01       	movw	r18, r16
    333c:	0e 94 41 19 	call	0x3282	; 0x3282 <_ZN7TwoWire11requestFromEhhmhh>
    3340:	1f 91       	pop	r17
    3342:	0f 91       	pop	r16
    3344:	ef 90       	pop	r14
    3346:	cf 90       	pop	r12
    3348:	08 95       	ret

0000334a <_ZN7TwoWire11requestFromEii>:
    334a:	21 e0       	ldi	r18, 0x01	; 1
    334c:	0c 94 95 19 	jmp	0x332a	; 0x332a <_ZN7TwoWire11requestFromEhhh>

00003350 <_ZN7TwoWire15endTransmissionEv>:
    3350:	61 e0       	ldi	r22, 0x01	; 1
    3352:	0c 94 2e 19 	jmp	0x325c	; 0x325c <_ZN7TwoWire15endTransmissionEh>

00003356 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3356:	8c e3       	ldi	r24, 0x3C	; 60
    3358:	93 e0       	ldi	r25, 0x03	; 3
    335a:	0c 94 08 19 	jmp	0x3210	; 0x3210 <_ZN7TwoWireC1Ev>

0000335e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    335e:	08 95       	ret

00003360 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3360:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <twi_state>
    3364:	81 e0       	ldi	r24, 0x01	; 1
    3366:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <twi_sendStop>
    336a:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <twi_inRepStart>
    336e:	61 e0       	ldi	r22, 0x01	; 1
    3370:	82 e1       	ldi	r24, 0x12	; 18
    3372:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <digitalWrite>
    3376:	61 e0       	ldi	r22, 0x01	; 1
    3378:	83 e1       	ldi	r24, 0x13	; 19
    337a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <digitalWrite>
    337e:	e9 eb       	ldi	r30, 0xB9	; 185
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	80 81       	ld	r24, Z
    3384:	8e 7f       	andi	r24, 0xFE	; 254
    3386:	80 83       	st	Z, r24
    3388:	80 81       	ld	r24, Z
    338a:	8d 7f       	andi	r24, 0xFD	; 253
    338c:	80 83       	st	Z, r24
    338e:	88 e4       	ldi	r24, 0x48	; 72
    3390:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    3394:	85 e4       	ldi	r24, 0x45	; 69
    3396:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    339a:	08 95       	ret

0000339c <twi_readFrom>:
    339c:	41 32       	cpi	r20, 0x21	; 33
    339e:	08 f0       	brcs	.+2      	; 0x33a2 <twi_readFrom+0x6>
    33a0:	43 c0       	rjmp	.+134    	; 0x3428 <twi_readFrom+0x8c>
    33a2:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <twi_state>
    33a6:	91 11       	cpse	r25, r1
    33a8:	fc cf       	rjmp	.-8      	; 0x33a2 <twi_readFrom+0x6>
    33aa:	91 e0       	ldi	r25, 0x01	; 1
    33ac:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <twi_state>
    33b0:	20 93 f9 03 	sts	0x03F9, r18	; 0x8003f9 <twi_sendStop>
    33b4:	2f ef       	ldi	r18, 0xFF	; 255
    33b6:	20 93 8e 03 	sts	0x038E, r18	; 0x80038e <twi_error>
    33ba:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <twi_masterBufferIndex>
    33be:	24 0f       	add	r18, r20
    33c0:	20 93 d2 03 	sts	0x03D2, r18	; 0x8003d2 <twi_masterBufferLength>
    33c4:	90 93 fa 03 	sts	0x03FA, r25	; 0x8003fa <twi_slarw>
    33c8:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <twi_slarw>
    33cc:	88 0f       	add	r24, r24
    33ce:	89 2b       	or	r24, r25
    33d0:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <twi_slarw>
    33d4:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <twi_inRepStart>
    33d8:	81 30       	cpi	r24, 0x01	; 1
    33da:	61 f4       	brne	.+24     	; 0x33f4 <twi_readFrom+0x58>
    33dc:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <twi_inRepStart>
    33e0:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <twi_slarw>
    33e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    33e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    33ec:	83 fd       	sbrc	r24, 3
    33ee:	f8 cf       	rjmp	.-16     	; 0x33e0 <twi_readFrom+0x44>
    33f0:	85 ec       	ldi	r24, 0xC5	; 197
    33f2:	01 c0       	rjmp	.+2      	; 0x33f6 <twi_readFrom+0x5a>
    33f4:	85 ee       	ldi	r24, 0xE5	; 229
    33f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    33fa:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <twi_state>
    33fe:	81 30       	cpi	r24, 0x01	; 1
    3400:	e1 f3       	breq	.-8      	; 0x33fa <twi_readFrom+0x5e>
    3402:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <twi_masterBufferIndex>
    3406:	84 17       	cp	r24, r20
    3408:	10 f4       	brcc	.+4      	; 0x340e <twi_readFrom+0x72>
    340a:	40 91 d3 03 	lds	r20, 0x03D3	; 0x8003d3 <twi_masterBufferIndex>
    340e:	a4 ed       	ldi	r26, 0xD4	; 212
    3410:	b3 e0       	ldi	r27, 0x03	; 3
    3412:	96 2f       	mov	r25, r22
    3414:	fb 01       	movw	r30, r22
    3416:	8e 2f       	mov	r24, r30
    3418:	89 1b       	sub	r24, r25
    341a:	84 17       	cp	r24, r20
    341c:	18 f4       	brcc	.+6      	; 0x3424 <twi_readFrom+0x88>
    341e:	8d 91       	ld	r24, X+
    3420:	81 93       	st	Z+, r24
    3422:	f9 cf       	rjmp	.-14     	; 0x3416 <twi_readFrom+0x7a>
    3424:	84 2f       	mov	r24, r20
    3426:	08 95       	ret
    3428:	80 e0       	ldi	r24, 0x00	; 0
    342a:	08 95       	ret

0000342c <twi_writeTo>:
    342c:	0f 93       	push	r16
    342e:	41 32       	cpi	r20, 0x21	; 33
    3430:	08 f0       	brcs	.+2      	; 0x3434 <twi_writeTo+0x8>
    3432:	4a c0       	rjmp	.+148    	; 0x34c8 <twi_writeTo+0x9c>
    3434:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <twi_state>
    3438:	91 11       	cpse	r25, r1
    343a:	fc cf       	rjmp	.-8      	; 0x3434 <twi_writeTo+0x8>
    343c:	32 e0       	ldi	r19, 0x02	; 2
    343e:	30 93 fb 03 	sts	0x03FB, r19	; 0x8003fb <twi_state>
    3442:	00 93 f9 03 	sts	0x03F9, r16	; 0x8003f9 <twi_sendStop>
    3446:	3f ef       	ldi	r19, 0xFF	; 255
    3448:	30 93 8e 03 	sts	0x038E, r19	; 0x80038e <twi_error>
    344c:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <twi_masterBufferIndex>
    3450:	40 93 d2 03 	sts	0x03D2, r20	; 0x8003d2 <twi_masterBufferLength>
    3454:	56 2f       	mov	r21, r22
    3456:	a4 ed       	ldi	r26, 0xD4	; 212
    3458:	b3 e0       	ldi	r27, 0x03	; 3
    345a:	fb 01       	movw	r30, r22
    345c:	3e 2f       	mov	r19, r30
    345e:	35 1b       	sub	r19, r21
    3460:	34 17       	cp	r19, r20
    3462:	18 f4       	brcc	.+6      	; 0x346a <twi_writeTo+0x3e>
    3464:	31 91       	ld	r19, Z+
    3466:	3d 93       	st	X+, r19
    3468:	f9 cf       	rjmp	.-14     	; 0x345c <twi_writeTo+0x30>
    346a:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <twi_slarw>
    346e:	30 91 fa 03 	lds	r19, 0x03FA	; 0x8003fa <twi_slarw>
    3472:	88 0f       	add	r24, r24
    3474:	83 2b       	or	r24, r19
    3476:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <twi_slarw>
    347a:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <twi_inRepStart>
    347e:	81 30       	cpi	r24, 0x01	; 1
    3480:	61 f4       	brne	.+24     	; 0x349a <twi_writeTo+0x6e>
    3482:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <twi_inRepStart>
    3486:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <twi_slarw>
    348a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    348e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3492:	83 fd       	sbrc	r24, 3
    3494:	f8 cf       	rjmp	.-16     	; 0x3486 <twi_writeTo+0x5a>
    3496:	85 ec       	ldi	r24, 0xC5	; 197
    3498:	01 c0       	rjmp	.+2      	; 0x349c <twi_writeTo+0x70>
    349a:	85 ee       	ldi	r24, 0xE5	; 229
    349c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    34a0:	22 23       	and	r18, r18
    34a2:	21 f0       	breq	.+8      	; 0x34ac <twi_writeTo+0x80>
    34a4:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <twi_state>
    34a8:	82 30       	cpi	r24, 0x02	; 2
    34aa:	d1 f3       	breq	.-12     	; 0x34a0 <twi_writeTo+0x74>
    34ac:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <twi_error>
    34b0:	8f 3f       	cpi	r24, 0xFF	; 255
    34b2:	79 f0       	breq	.+30     	; 0x34d2 <twi_writeTo+0xa6>
    34b4:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <twi_error>
    34b8:	80 32       	cpi	r24, 0x20	; 32
    34ba:	41 f0       	breq	.+16     	; 0x34cc <twi_writeTo+0xa0>
    34bc:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <twi_error>
    34c0:	80 33       	cpi	r24, 0x30	; 48
    34c2:	31 f0       	breq	.+12     	; 0x34d0 <twi_writeTo+0xa4>
    34c4:	94 e0       	ldi	r25, 0x04	; 4
    34c6:	05 c0       	rjmp	.+10     	; 0x34d2 <twi_writeTo+0xa6>
    34c8:	91 e0       	ldi	r25, 0x01	; 1
    34ca:	03 c0       	rjmp	.+6      	; 0x34d2 <twi_writeTo+0xa6>
    34cc:	92 e0       	ldi	r25, 0x02	; 2
    34ce:	01 c0       	rjmp	.+2      	; 0x34d2 <twi_writeTo+0xa6>
    34d0:	93 e0       	ldi	r25, 0x03	; 3
    34d2:	89 2f       	mov	r24, r25
    34d4:	0f 91       	pop	r16
    34d6:	08 95       	ret

000034d8 <twi_transmit>:
    34d8:	40 91 b0 03 	lds	r20, 0x03B0	; 0x8003b0 <twi_txBufferLength>
    34dc:	26 2f       	mov	r18, r22
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	24 0f       	add	r18, r20
    34e2:	31 1d       	adc	r19, r1
    34e4:	21 32       	cpi	r18, 0x21	; 33
    34e6:	31 05       	cpc	r19, r1
    34e8:	dc f4       	brge	.+54     	; 0x3520 <twi_transmit+0x48>
    34ea:	20 91 fb 03 	lds	r18, 0x03FB	; 0x8003fb <twi_state>
    34ee:	24 30       	cpi	r18, 0x04	; 4
    34f0:	c9 f4       	brne	.+50     	; 0x3524 <twi_transmit+0x4c>
    34f2:	fc 01       	movw	r30, r24
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	86 17       	cp	r24, r22
    34fa:	58 f4       	brcc	.+22     	; 0x3512 <twi_transmit+0x3a>
    34fc:	30 91 b0 03 	lds	r19, 0x03B0	; 0x8003b0 <twi_txBufferLength>
    3500:	21 91       	ld	r18, Z+
    3502:	dc 01       	movw	r26, r24
    3504:	ae 54       	subi	r26, 0x4E	; 78
    3506:	bc 4f       	sbci	r27, 0xFC	; 252
    3508:	a3 0f       	add	r26, r19
    350a:	b1 1d       	adc	r27, r1
    350c:	2c 93       	st	X, r18
    350e:	01 96       	adiw	r24, 0x01	; 1
    3510:	f3 cf       	rjmp	.-26     	; 0x34f8 <twi_transmit+0x20>
    3512:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <twi_txBufferLength>
    3516:	68 0f       	add	r22, r24
    3518:	60 93 b0 03 	sts	0x03B0, r22	; 0x8003b0 <twi_txBufferLength>
    351c:	80 e0       	ldi	r24, 0x00	; 0
    351e:	08 95       	ret
    3520:	81 e0       	ldi	r24, 0x01	; 1
    3522:	08 95       	ret
    3524:	82 e0       	ldi	r24, 0x02	; 2
    3526:	08 95       	ret

00003528 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3528:	85 ed       	ldi	r24, 0xD5	; 213
    352a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    352e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3532:	84 fd       	sbrc	r24, 4
    3534:	fc cf       	rjmp	.-8      	; 0x352e <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3536:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <twi_state>
    353a:	08 95       	ret

0000353c <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    353c:	85 ec       	ldi	r24, 0xC5	; 197
    353e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    3542:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <twi_state>
    3546:	08 95       	ret

00003548 <__vector_24>:
}

ISR(TWI_vect)
{
    3548:	1f 92       	push	r1
    354a:	0f 92       	push	r0
    354c:	0f b6       	in	r0, 0x3f	; 63
    354e:	0f 92       	push	r0
    3550:	11 24       	eor	r1, r1
    3552:	2f 93       	push	r18
    3554:	3f 93       	push	r19
    3556:	4f 93       	push	r20
    3558:	5f 93       	push	r21
    355a:	6f 93       	push	r22
    355c:	7f 93       	push	r23
    355e:	8f 93       	push	r24
    3560:	9f 93       	push	r25
    3562:	af 93       	push	r26
    3564:	bf 93       	push	r27
    3566:	ef 93       	push	r30
    3568:	ff 93       	push	r31
  switch(TW_STATUS){
    356a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    356e:	88 7f       	andi	r24, 0xF8	; 248
    3570:	80 36       	cpi	r24, 0x60	; 96
    3572:	09 f4       	brne	.+2      	; 0x3576 <__vector_24+0x2e>
    3574:	9e c0       	rjmp	.+316    	; 0x36b2 <__vector_24+0x16a>
    3576:	78 f5       	brcc	.+94     	; 0x35d6 <__vector_24+0x8e>
    3578:	88 32       	cpi	r24, 0x28	; 40
    357a:	09 f4       	brne	.+2      	; 0x357e <__vector_24+0x36>
    357c:	5d c0       	rjmp	.+186    	; 0x3638 <__vector_24+0xf0>
    357e:	90 f4       	brcc	.+36     	; 0x35a4 <__vector_24+0x5c>
    3580:	80 31       	cpi	r24, 0x10	; 16
    3582:	09 f4       	brne	.+2      	; 0x3586 <__vector_24+0x3e>
    3584:	56 c0       	rjmp	.+172    	; 0x3632 <__vector_24+0xea>
    3586:	38 f4       	brcc	.+14     	; 0x3596 <__vector_24+0x4e>
    3588:	88 23       	and	r24, r24
    358a:	09 f4       	brne	.+2      	; 0x358e <__vector_24+0x46>
    358c:	f5 c0       	rjmp	.+490    	; 0x3778 <__vector_24+0x230>
    358e:	88 30       	cpi	r24, 0x08	; 8
    3590:	09 f4       	brne	.+2      	; 0x3594 <__vector_24+0x4c>
    3592:	4f c0       	rjmp	.+158    	; 0x3632 <__vector_24+0xea>
    3594:	f5 c0       	rjmp	.+490    	; 0x3780 <__vector_24+0x238>
    3596:	88 31       	cpi	r24, 0x18	; 24
    3598:	09 f4       	brne	.+2      	; 0x359c <__vector_24+0x54>
    359a:	4e c0       	rjmp	.+156    	; 0x3638 <__vector_24+0xf0>
    359c:	80 32       	cpi	r24, 0x20	; 32
    359e:	09 f4       	brne	.+2      	; 0x35a2 <__vector_24+0x5a>
    35a0:	5f c0       	rjmp	.+190    	; 0x3660 <__vector_24+0x118>
    35a2:	ee c0       	rjmp	.+476    	; 0x3780 <__vector_24+0x238>
    35a4:	80 34       	cpi	r24, 0x40	; 64
    35a6:	09 f4       	brne	.+2      	; 0x35aa <__vector_24+0x62>
    35a8:	6a c0       	rjmp	.+212    	; 0x367e <__vector_24+0x136>
    35aa:	58 f4       	brcc	.+22     	; 0x35c2 <__vector_24+0x7a>
    35ac:	80 33       	cpi	r24, 0x30	; 48
    35ae:	09 f4       	brne	.+2      	; 0x35b2 <__vector_24+0x6a>
    35b0:	57 c0       	rjmp	.+174    	; 0x3660 <__vector_24+0x118>
    35b2:	88 33       	cpi	r24, 0x38	; 56
    35b4:	09 f0       	breq	.+2      	; 0x35b8 <__vector_24+0x70>
    35b6:	e4 c0       	rjmp	.+456    	; 0x3780 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    35b8:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <twi_error>
      twi_releaseBus();
    35bc:	0e 94 9e 1a 	call	0x353c	; 0x353c <twi_releaseBus>
      break;
    35c0:	df c0       	rjmp	.+446    	; 0x3780 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    35c2:	80 35       	cpi	r24, 0x50	; 80
    35c4:	09 f4       	brne	.+2      	; 0x35c8 <__vector_24+0x80>
    35c6:	4f c0       	rjmp	.+158    	; 0x3666 <__vector_24+0x11e>
    35c8:	88 35       	cpi	r24, 0x58	; 88
    35ca:	09 f4       	brne	.+2      	; 0x35ce <__vector_24+0x86>
    35cc:	5d c0       	rjmp	.+186    	; 0x3688 <__vector_24+0x140>
    35ce:	88 34       	cpi	r24, 0x48	; 72
    35d0:	09 f0       	breq	.+2      	; 0x35d4 <__vector_24+0x8c>
    35d2:	d6 c0       	rjmp	.+428    	; 0x3780 <__vector_24+0x238>
    35d4:	d3 c0       	rjmp	.+422    	; 0x377c <__vector_24+0x234>
    35d6:	88 39       	cpi	r24, 0x98	; 152
    35d8:	09 f4       	brne	.+2      	; 0x35dc <__vector_24+0x94>
    35da:	c4 c0       	rjmp	.+392    	; 0x3764 <__vector_24+0x21c>
    35dc:	a8 f4       	brcc	.+42     	; 0x3608 <__vector_24+0xc0>
    35de:	88 37       	cpi	r24, 0x78	; 120
    35e0:	09 f4       	brne	.+2      	; 0x35e4 <__vector_24+0x9c>
    35e2:	67 c0       	rjmp	.+206    	; 0x36b2 <__vector_24+0x16a>
    35e4:	38 f4       	brcc	.+14     	; 0x35f4 <__vector_24+0xac>
    35e6:	88 36       	cpi	r24, 0x68	; 104
    35e8:	09 f4       	brne	.+2      	; 0x35ec <__vector_24+0xa4>
    35ea:	63 c0       	rjmp	.+198    	; 0x36b2 <__vector_24+0x16a>
    35ec:	80 37       	cpi	r24, 0x70	; 112
    35ee:	09 f4       	brne	.+2      	; 0x35f2 <__vector_24+0xaa>
    35f0:	60 c0       	rjmp	.+192    	; 0x36b2 <__vector_24+0x16a>
    35f2:	c6 c0       	rjmp	.+396    	; 0x3780 <__vector_24+0x238>
    35f4:	88 38       	cpi	r24, 0x88	; 136
    35f6:	09 f4       	brne	.+2      	; 0x35fa <__vector_24+0xb2>
    35f8:	b5 c0       	rjmp	.+362    	; 0x3764 <__vector_24+0x21c>
    35fa:	80 39       	cpi	r24, 0x90	; 144
    35fc:	09 f4       	brne	.+2      	; 0x3600 <__vector_24+0xb8>
    35fe:	5f c0       	rjmp	.+190    	; 0x36be <__vector_24+0x176>
    3600:	80 38       	cpi	r24, 0x80	; 128
    3602:	09 f0       	breq	.+2      	; 0x3606 <__vector_24+0xbe>
    3604:	bd c0       	rjmp	.+378    	; 0x3780 <__vector_24+0x238>
    3606:	5b c0       	rjmp	.+182    	; 0x36be <__vector_24+0x176>
    3608:	80 3b       	cpi	r24, 0xB0	; 176
    360a:	09 f4       	brne	.+2      	; 0x360e <__vector_24+0xc6>
    360c:	83 c0       	rjmp	.+262    	; 0x3714 <__vector_24+0x1cc>
    360e:	38 f4       	brcc	.+14     	; 0x361e <__vector_24+0xd6>
    3610:	80 3a       	cpi	r24, 0xA0	; 160
    3612:	09 f4       	brne	.+2      	; 0x3616 <__vector_24+0xce>
    3614:	66 c0       	rjmp	.+204    	; 0x36e2 <__vector_24+0x19a>
    3616:	88 3a       	cpi	r24, 0xA8	; 168
    3618:	09 f4       	brne	.+2      	; 0x361c <__vector_24+0xd4>
    361a:	7c c0       	rjmp	.+248    	; 0x3714 <__vector_24+0x1cc>
    361c:	b1 c0       	rjmp	.+354    	; 0x3780 <__vector_24+0x238>
    361e:	80 3c       	cpi	r24, 0xC0	; 192
    3620:	09 f4       	brne	.+2      	; 0x3624 <__vector_24+0xdc>
    3622:	a4 c0       	rjmp	.+328    	; 0x376c <__vector_24+0x224>
    3624:	88 3c       	cpi	r24, 0xC8	; 200
    3626:	09 f4       	brne	.+2      	; 0x362a <__vector_24+0xe2>
    3628:	a1 c0       	rjmp	.+322    	; 0x376c <__vector_24+0x224>
    362a:	88 3b       	cpi	r24, 0xB8	; 184
    362c:	09 f4       	brne	.+2      	; 0x3630 <__vector_24+0xe8>
    362e:	87 c0       	rjmp	.+270    	; 0x373e <__vector_24+0x1f6>
    3630:	a7 c0       	rjmp	.+334    	; 0x3780 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3632:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <twi_slarw>
    3636:	10 c0       	rjmp	.+32     	; 0x3658 <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3638:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <twi_masterBufferIndex>
    363c:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <twi_masterBufferLength>
    3640:	98 17       	cp	r25, r24
    3642:	70 f5       	brcc	.+92     	; 0x36a0 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3644:	e0 91 d3 03 	lds	r30, 0x03D3	; 0x8003d3 <twi_masterBufferIndex>
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	8e 0f       	add	r24, r30
    364c:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <twi_masterBufferIndex>
    3650:	f0 e0       	ldi	r31, 0x00	; 0
    3652:	ec 52       	subi	r30, 0x2C	; 44
    3654:	fc 4f       	sbci	r31, 0xFC	; 252
    3656:	80 81       	ld	r24, Z
    3658:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    365c:	85 ec       	ldi	r24, 0xC5	; 197
    365e:	83 c0       	rjmp	.+262    	; 0x3766 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3660:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <twi_error>
    3664:	8b c0       	rjmp	.+278    	; 0x377c <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3666:	e0 91 d3 03 	lds	r30, 0x03D3	; 0x8003d3 <twi_masterBufferIndex>
    366a:	81 e0       	ldi	r24, 0x01	; 1
    366c:	8e 0f       	add	r24, r30
    366e:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <twi_masterBufferIndex>
    3672:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	ec 52       	subi	r30, 0x2C	; 44
    367a:	fc 4f       	sbci	r31, 0xFC	; 252
    367c:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    367e:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <twi_masterBufferIndex>
    3682:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <twi_masterBufferLength>
    3686:	6b c0       	rjmp	.+214    	; 0x375e <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3688:	e0 91 d3 03 	lds	r30, 0x03D3	; 0x8003d3 <twi_masterBufferIndex>
    368c:	81 e0       	ldi	r24, 0x01	; 1
    368e:	8e 0f       	add	r24, r30
    3690:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <twi_masterBufferIndex>
    3694:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3698:	f0 e0       	ldi	r31, 0x00	; 0
    369a:	ec 52       	subi	r30, 0x2C	; 44
    369c:	fc 4f       	sbci	r31, 0xFC	; 252
    369e:	80 83       	st	Z, r24
	if (twi_sendStop)
    36a0:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <twi_sendStop>
    36a4:	81 11       	cpse	r24, r1
    36a6:	6a c0       	rjmp	.+212    	; 0x377c <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    36a8:	81 e0       	ldi	r24, 0x01	; 1
    36aa:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    36ae:	84 ea       	ldi	r24, 0xA4	; 164
    36b0:	5e c0       	rjmp	.+188    	; 0x376e <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    36b2:	83 e0       	ldi	r24, 0x03	; 3
    36b4:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    36b8:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <twi_rxBufferIndex>
    36bc:	cf cf       	rjmp	.-98     	; 0x365c <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    36be:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <twi_rxBufferIndex>
    36c2:	80 32       	cpi	r24, 0x20	; 32
    36c4:	08 f0       	brcs	.+2      	; 0x36c8 <__vector_24+0x180>
    36c6:	4e c0       	rjmp	.+156    	; 0x3764 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    36c8:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <twi_rxBufferIndex>
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	8e 0f       	add	r24, r30
    36d0:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <twi_rxBufferIndex>
    36d4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    36d8:	f0 e0       	ldi	r31, 0x00	; 0
    36da:	e0 57       	subi	r30, 0x70	; 112
    36dc:	fc 4f       	sbci	r31, 0xFC	; 252
    36de:	80 83       	st	Z, r24
    36e0:	bd cf       	rjmp	.-134    	; 0x365c <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    36e2:	0e 94 9e 1a 	call	0x353c	; 0x353c <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    36e6:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <twi_rxBufferIndex>
    36ea:	80 32       	cpi	r24, 0x20	; 32
    36ec:	30 f4       	brcc	.+12     	; 0x36fa <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    36ee:	e0 91 8f 03 	lds	r30, 0x038F	; 0x80038f <twi_rxBufferIndex>
    36f2:	f0 e0       	ldi	r31, 0x00	; 0
    36f4:	e0 57       	subi	r30, 0x70	; 112
    36f6:	fc 4f       	sbci	r31, 0xFC	; 252
    36f8:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    36fa:	60 91 8f 03 	lds	r22, 0x038F	; 0x80038f <twi_rxBufferIndex>
    36fe:	70 e0       	ldi	r23, 0x00	; 0
    3700:	e0 91 f4 03 	lds	r30, 0x03F4	; 0x8003f4 <twi_onSlaveReceive>
    3704:	f0 91 f5 03 	lds	r31, 0x03F5	; 0x8003f5 <twi_onSlaveReceive+0x1>
    3708:	80 e9       	ldi	r24, 0x90	; 144
    370a:	93 e0       	ldi	r25, 0x03	; 3
    370c:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    370e:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <twi_rxBufferIndex>
      break;
    3712:	36 c0       	rjmp	.+108    	; 0x3780 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3714:	84 e0       	ldi	r24, 0x04	; 4
    3716:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    371a:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    371e:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3722:	e0 91 f6 03 	lds	r30, 0x03F6	; 0x8003f6 <twi_onSlaveTransmit>
    3726:	f0 91 f7 03 	lds	r31, 0x03F7	; 0x8003f7 <twi_onSlaveTransmit+0x1>
    372a:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    372c:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <twi_txBufferLength>
    3730:	81 11       	cpse	r24, r1
    3732:	05 c0       	rjmp	.+10     	; 0x373e <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    373a:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    373e:	e0 91 b1 03 	lds	r30, 0x03B1	; 0x8003b1 <twi_txBufferIndex>
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	8e 0f       	add	r24, r30
    3746:	80 93 b1 03 	sts	0x03B1, r24	; 0x8003b1 <twi_txBufferIndex>
    374a:	f0 e0       	ldi	r31, 0x00	; 0
    374c:	ee 54       	subi	r30, 0x4E	; 78
    374e:	fc 4f       	sbci	r31, 0xFC	; 252
    3750:	80 81       	ld	r24, Z
    3752:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3756:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <twi_txBufferIndex>
    375a:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <twi_txBufferLength>
    375e:	98 17       	cp	r25, r24
    3760:	08 f4       	brcc	.+2      	; 0x3764 <__vector_24+0x21c>
    3762:	7c cf       	rjmp	.-264    	; 0x365c <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3764:	85 e8       	ldi	r24, 0x85	; 133
    3766:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    376a:	0a c0       	rjmp	.+20     	; 0x3780 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    376c:	85 ec       	ldi	r24, 0xC5	; 197
    376e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3772:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <twi_state>
      break;
    3776:	04 c0       	rjmp	.+8      	; 0x3780 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3778:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <twi_error>
      twi_stop();
    377c:	0e 94 94 1a 	call	0x3528	; 0x3528 <twi_stop>
      break;
  }
}
    3780:	ff 91       	pop	r31
    3782:	ef 91       	pop	r30
    3784:	bf 91       	pop	r27
    3786:	af 91       	pop	r26
    3788:	9f 91       	pop	r25
    378a:	8f 91       	pop	r24
    378c:	7f 91       	pop	r23
    378e:	6f 91       	pop	r22
    3790:	5f 91       	pop	r21
    3792:	4f 91       	pop	r20
    3794:	3f 91       	pop	r19
    3796:	2f 91       	pop	r18
    3798:	0f 90       	pop	r0
    379a:	0f be       	out	0x3f, r0	; 63
    379c:	0f 90       	pop	r0
    379e:	1f 90       	pop	r1
    37a0:	18 95       	reti

000037a2 <__unordsf2>:
    37a2:	0e 94 4b 10 	call	0x2096	; 0x2096 <__fp_cmp>
    37a6:	88 0b       	sbc	r24, r24
    37a8:	99 0b       	sbc	r25, r25
    37aa:	08 95       	ret

000037ac <__udivmodqi4>:
    37ac:	99 1b       	sub	r25, r25
    37ae:	79 e0       	ldi	r23, 0x09	; 9
    37b0:	04 c0       	rjmp	.+8      	; 0x37ba <__udivmodqi4_ep>

000037b2 <__udivmodqi4_loop>:
    37b2:	99 1f       	adc	r25, r25
    37b4:	96 17       	cp	r25, r22
    37b6:	08 f0       	brcs	.+2      	; 0x37ba <__udivmodqi4_ep>
    37b8:	96 1b       	sub	r25, r22

000037ba <__udivmodqi4_ep>:
    37ba:	88 1f       	adc	r24, r24
    37bc:	7a 95       	dec	r23
    37be:	c9 f7       	brne	.-14     	; 0x37b2 <__udivmodqi4_loop>
    37c0:	80 95       	com	r24
    37c2:	08 95       	ret

000037c4 <__divmodhi4>:
    37c4:	97 fb       	bst	r25, 7
    37c6:	07 2e       	mov	r0, r23
    37c8:	16 f4       	brtc	.+4      	; 0x37ce <__divmodhi4+0xa>
    37ca:	00 94       	com	r0
    37cc:	07 d0       	rcall	.+14     	; 0x37dc <__divmodhi4_neg1>
    37ce:	77 fd       	sbrc	r23, 7
    37d0:	09 d0       	rcall	.+18     	; 0x37e4 <__divmodhi4_neg2>
    37d2:	0e 94 18 1c 	call	0x3830	; 0x3830 <__udivmodhi4>
    37d6:	07 fc       	sbrc	r0, 7
    37d8:	05 d0       	rcall	.+10     	; 0x37e4 <__divmodhi4_neg2>
    37da:	3e f4       	brtc	.+14     	; 0x37ea <__divmodhi4_exit>

000037dc <__divmodhi4_neg1>:
    37dc:	90 95       	com	r25
    37de:	81 95       	neg	r24
    37e0:	9f 4f       	sbci	r25, 0xFF	; 255
    37e2:	08 95       	ret

000037e4 <__divmodhi4_neg2>:
    37e4:	70 95       	com	r23
    37e6:	61 95       	neg	r22
    37e8:	7f 4f       	sbci	r23, 0xFF	; 255

000037ea <__divmodhi4_exit>:
    37ea:	08 95       	ret

000037ec <__udivmodsi4>:
    37ec:	a1 e2       	ldi	r26, 0x21	; 33
    37ee:	1a 2e       	mov	r1, r26
    37f0:	aa 1b       	sub	r26, r26
    37f2:	bb 1b       	sub	r27, r27
    37f4:	fd 01       	movw	r30, r26
    37f6:	0d c0       	rjmp	.+26     	; 0x3812 <__udivmodsi4_ep>

000037f8 <__udivmodsi4_loop>:
    37f8:	aa 1f       	adc	r26, r26
    37fa:	bb 1f       	adc	r27, r27
    37fc:	ee 1f       	adc	r30, r30
    37fe:	ff 1f       	adc	r31, r31
    3800:	a2 17       	cp	r26, r18
    3802:	b3 07       	cpc	r27, r19
    3804:	e4 07       	cpc	r30, r20
    3806:	f5 07       	cpc	r31, r21
    3808:	20 f0       	brcs	.+8      	; 0x3812 <__udivmodsi4_ep>
    380a:	a2 1b       	sub	r26, r18
    380c:	b3 0b       	sbc	r27, r19
    380e:	e4 0b       	sbc	r30, r20
    3810:	f5 0b       	sbc	r31, r21

00003812 <__udivmodsi4_ep>:
    3812:	66 1f       	adc	r22, r22
    3814:	77 1f       	adc	r23, r23
    3816:	88 1f       	adc	r24, r24
    3818:	99 1f       	adc	r25, r25
    381a:	1a 94       	dec	r1
    381c:	69 f7       	brne	.-38     	; 0x37f8 <__udivmodsi4_loop>
    381e:	60 95       	com	r22
    3820:	70 95       	com	r23
    3822:	80 95       	com	r24
    3824:	90 95       	com	r25
    3826:	9b 01       	movw	r18, r22
    3828:	ac 01       	movw	r20, r24
    382a:	bd 01       	movw	r22, r26
    382c:	cf 01       	movw	r24, r30
    382e:	08 95       	ret

00003830 <__udivmodhi4>:
    3830:	aa 1b       	sub	r26, r26
    3832:	bb 1b       	sub	r27, r27
    3834:	51 e1       	ldi	r21, 0x11	; 17
    3836:	07 c0       	rjmp	.+14     	; 0x3846 <__udivmodhi4_ep>

00003838 <__udivmodhi4_loop>:
    3838:	aa 1f       	adc	r26, r26
    383a:	bb 1f       	adc	r27, r27
    383c:	a6 17       	cp	r26, r22
    383e:	b7 07       	cpc	r27, r23
    3840:	10 f0       	brcs	.+4      	; 0x3846 <__udivmodhi4_ep>
    3842:	a6 1b       	sub	r26, r22
    3844:	b7 0b       	sbc	r27, r23

00003846 <__udivmodhi4_ep>:
    3846:	88 1f       	adc	r24, r24
    3848:	99 1f       	adc	r25, r25
    384a:	5a 95       	dec	r21
    384c:	a9 f7       	brne	.-22     	; 0x3838 <__udivmodhi4_loop>
    384e:	80 95       	com	r24
    3850:	90 95       	com	r25
    3852:	bc 01       	movw	r22, r24
    3854:	cd 01       	movw	r24, r26
    3856:	08 95       	ret

00003858 <__tablejump2__>:
    3858:	ee 0f       	add	r30, r30
    385a:	ff 1f       	adc	r31, r31
    385c:	05 90       	lpm	r0, Z+
    385e:	f4 91       	lpm	r31, Z
    3860:	e0 2d       	mov	r30, r0
    3862:	09 94       	ijmp

00003864 <_exit>:
    3864:	f8 94       	cli

00003866 <__stop_program>:
    3866:	ff cf       	rjmp	.-2      	; 0x3866 <__stop_program>
